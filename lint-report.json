[{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\PublicNavbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\RoleGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ThemeProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: string\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: string\n  setTheme: (theme: string) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState(\n    () => localStorage.getItem(storageKey) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: string) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\admin\\AdminHeader.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'timer' is never reassigned. Use 'const' instead.","line":42,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":42,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Moon, Sun, User, LogOut, Settings as SettingsIcon, UserCircle, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const AdminHeader = () => {\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    let timer: number | undefined;\n    const fetchUnread = async () => {\n      try {\n        const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n        if (!token) return;\n        const res = await fetch(`${API_URL}/api/notifications/unread-count`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        if (!res.ok) return;\n        const data = await res.json();\n        setUnreadCount(data.count ?? data);\n      } catch {\n        // ignore polling errors\n      }\n    };\n    fetchUnread();\n    timer = window.setInterval(fetchUnread, 30000);\n    return () => { if (timer) window.clearInterval(timer); };\n  }, [API_URL]);\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  const handleProfile = () => {\n    navigate('/admin/profile');\n  };\n\n  const handleSettings = () => {\n    navigate('/admin/settings');\n  };\n\n  return (\n    <header className=\"sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6\">\n      <SidebarTrigger className=\"-ml-2\" />\n\n      <div className=\"flex-1\" />\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n      >\n        <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n        <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n        <span className=\"sr-only\">Toggle theme</span>\n      </Button>\n\n      {/* Notifications */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"rounded-full relative\"\n        onClick={() => navigate('/admin/notifications')}\n      >\n        <Bell className=\"h-5 w-5\" />\n        {unreadCount > 0 && (\n          <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n            {unreadCount > 9 ? '9+' : unreadCount}\n          </Badge>\n        )}\n      </Button>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n            <User className=\"h-5 w-5\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\" className=\"w-56\">\n          <DropdownMenuLabel>\n            <div className=\"flex flex-col space-y-1\">\n              <p className=\"text-sm font-medium leading-none\">{user?.name || 'Admin'}</p>\n              <p className=\"text-xs leading-none text-muted-foreground\">{user?.email || ''}</p>\n            </div>\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={handleProfile} className=\"cursor-pointer\">\n            <UserCircle className=\"mr-2 h-4 w-4\" />\n            <span>Profile</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleSettings} className=\"cursor-pointer\">\n            <SettingsIcon className=\"mr-2 h-4 w-4\" />\n            <span>Settings</span>\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-destructive focus:text-destructive\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            <span>Logout</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </header>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\admin\\AdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\admin\\AdminSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\admin\\KPICard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\auth\\FileUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\auth\\PasswordStrengthMeter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\charity\\CharityHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\charity\\CharityLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\charity\\CharityNavbar.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'timer' is never reassigned. Use 'const' instead.","line":41,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":41,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NavLink, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Building2, Moon, Sun, User, LogOut, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport const CharityNavbar = () => {\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    let timer: number | undefined;\n    const fetchUnread = async () => {\n      try {\n        const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n        if (!token) return;\n        const res = await fetch(`${API_URL}/api/notifications/unread-count`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        if (!res.ok) return;\n        const data = await res.json();\n        setUnreadCount(data.count ?? data);\n      } catch {\n        // ignore polling errors\n      }\n    };\n    fetchUnread();\n    timer = window.setInterval(fetchUnread, 30000);\n    return () => { if (timer) window.clearInterval(timer); };\n  }, [API_URL]);\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background border-b\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2\">\n            <Building2 className=\"h-8 w-8 text-primary\" />\n            <span className=\"text-xl font-bold\">CharityHub</span>\n          </div>\n\n          {/* Center Navigation - Facebook Style */}\n          <div className=\"hidden md:flex items-center gap-1\">\n            <NavLink\n              to=\"/charity\"\n              end\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Dashboard\n            </NavLink>\n            <NavLink\n              to=\"/charity/posts\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Posts\n            </NavLink>\n            <NavLink\n              to=\"/charity/campaigns\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Campaigns\n            </NavLink>\n            <NavLink\n              to=\"/charity/donations\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Donations\n            </NavLink>\n            <NavLink\n              to=\"/charity/fund-tracking\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Funds\n            </NavLink>\n            <NavLink\n              to=\"/charity/volunteers\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Volunteers\n            </NavLink>\n            <NavLink\n              to=\"/charity/documents\"\n              className={({ isActive }) =>\n                `px-6 py-2 rounded-lg font-medium transition-colors ${\n                  isActive\n                    ? \"bg-primary/10 text-primary border-b-2 border-primary\"\n                    : \"hover:bg-muted\"\n                }`\n              }\n            >\n              Documents\n            </NavLink>\n          </div>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center gap-2\">\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n              className=\"rounded-full\"\n            >\n              <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            </Button>\n\n            {/* Notifications */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"rounded-full relative\"\n              onClick={() => {\n                if (!user) { navigate('/auth/login'); return; }\n                navigate('/charity/notifications');\n              }}\n            >\n              <Bell className=\"h-5 w-5\" />\n              {unreadCount > 0 && (\n                <Badge className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\">\n                  {unreadCount > 9 ? '9+' : unreadCount}\n                </Badge>\n              )}\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"rounded-full flex items-center gap-2\">\n                  <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <User className=\"h-5 w-5\" />\n                  </div>\n                  <span className=\"hidden md:inline text-sm font-medium\">\n                    {user?.name || 'Charity Admin'}\n                  </span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuLabel>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">{user?.name}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">{user?.email}</p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => navigate('/charity/organization')} className=\"cursor-pointer\">\n                  Organization Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/charity/profile')} className=\"cursor-pointer\">\n                  My Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/charity/settings')} className=\"cursor-pointer\">\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-destructive focus:text-destructive\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Logout</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\charity\\CharitySidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\donor\\DonorHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\donor\\DonorLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\donor\\DonorNavbar.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'timer' is never reassigned. Use 'const' instead.","line":41,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":41,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NavLink, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Heart, Moon, Sun, User, LogOut, UserCircle, History, TrendingUp, Bell, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { toast } from \"sonner\";\n\nexport const DonorNavbar = () => {\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const [unreadCount, setUnreadCount] = useState<number>(0);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    let timer: number | undefined;\n    const fetchUnread = async () => {\n      try {\n        const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n        if (!token) return;\n        const res = await fetch(`${API_URL}/api/notifications/unread-count`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        if (!res.ok) return;\n        const data = await res.json();\n        setUnreadCount(data.count ?? data);\n      } catch {\n        // ignore polling errors\n      }\n    };\n    fetchUnread();\n    timer = window.setInterval(fetchUnread, 30000);\n    return () => { if (timer) window.clearInterval(timer); };\n  }, [API_URL]);\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-background border-b shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2 cursor-pointer\" onClick={() => navigate('/donor')}>\n            <Heart className=\"h-8 w-8 text-primary fill-primary\" />\n            <span className=\"text-2xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\n              CharityHub\n            </span>\n          </div>\n\n          {/* Main Navigation - Website Style */}\n          <div className=\"hidden md:flex items-center gap-8\">\n            <NavLink\n              to=\"/donor\"\n              end\n              className={({ isActive }) =>\n                `text-sm font-medium transition-colors hover:text-primary ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`\n              }\n            >\n              Home\n            </NavLink>\n            <NavLink\n              to=\"/donor/news-feed\"\n              className={({ isActive }) =>\n                `text-sm font-medium transition-colors hover:text-primary ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`\n              }\n            >\n              News Feed\n            </NavLink>\n            <NavLink\n              to=\"/donor/charities\"\n              className={({ isActive }) =>\n                `text-sm font-medium transition-colors hover:text-primary ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`\n              }\n            >\n              Charities\n            </NavLink>\n            <NavLink\n              to=\"/donor/leaderboard\"\n              className={({ isActive }) =>\n                `text-sm font-medium transition-colors hover:text-primary ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`\n              }\n            >\n              Leaderboard\n            </NavLink>\n            <NavLink\n              to=\"/donor/about\"\n              className={({ isActive }) =>\n                `text-sm font-medium transition-colors hover:text-primary ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`\n              }\n            >\n              About\n            </NavLink>\n            \n            {/* Profile Dropdown in Navbar */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <button className=\"text-sm font-medium transition-colors hover:text-primary text-muted-foreground flex items-center gap-1\">\n                  Profile\n                  <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem onClick={() => navigate('/donor/profile')} className=\"cursor-pointer\">\n                  <UserCircle className=\"mr-2 h-4 w-4\" />\n                  My Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/donor/history')} className=\"cursor-pointer\">\n                  <History className=\"mr-2 h-4 w-4\" />\n                  Donation History\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/donor/transparency')} className=\"cursor-pointer\">\n                  <TrendingUp className=\"mr-2 h-4 w-4\" />\n                  Fund Transparency\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center gap-3\">\n            {/* Notifications */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative rounded-full\"\n              onClick={() => {\n                if (!user) { navigate('/auth/login'); return; }\n                navigate('/donor/notifications');\n              }}\n            >\n              <Bell className=\"h-5 w-5\" />\n              {unreadCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-red-600 text-white text-[10px] leading-none px-1.5 py-0.5 rounded-full\">\n                  {unreadCount > 9 ? '9+' : unreadCount}\n                </span>\n              )}\n            </Button>\n            {/* Donate Button */}\n            <Button onClick={() => navigate('/donor/donate')} size=\"sm\" className=\"hidden md:flex\">\n              <Heart className=\"mr-2 h-4 w-4\" />\n              Donate Now\n            </Button>\n\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n              className=\"rounded-full\"\n            >\n              <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n                  <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <User className=\"h-5 w-5\" />\n                  </div>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-56\">\n                <DropdownMenuLabel>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium leading-none\">{user?.name || 'Donor'}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">{user?.email}</p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => navigate('/donor/profile')} className=\"cursor-pointer md:hidden\">\n                  <UserCircle className=\"mr-2 h-4 w-4\" />\n                  My Profile\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/donor/history')} className=\"cursor-pointer md:hidden\">\n                  <History className=\"mr-2 h-4 w-4\" />\n                  Donation History\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate('/donor/transparency')} className=\"cursor-pointer md:hidden\">\n                  <TrendingUp className=\"mr-2 h-4 w-4\" />\n                  Fund Transparency\n                </DropdownMenuItem>\n                <DropdownMenuSeparator className=\"md:hidden\" />\n                <DropdownMenuItem onClick={handleLogout} className=\"cursor-pointer text-destructive focus:text-destructive\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  <span>Logout</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\donor\\DonorSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[710,761],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />);\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":129,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":129,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n      </FormItemContext.Provider>\n    );\n  },\n);\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} />;\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\n  ({ ...props }, ref) => {\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n    return (\n      <Slot\n        ref={ref}\n        id={formItemId}\n        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n        aria-invalid={!!error}\n        {...props}\n      />\n    );\n  },\n);\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => {\n    const { formDescriptionId } = useFormField();\n\n    return <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />;\n  },\n);\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...props }, ref) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message) : children;\n\n    if (!body) {\n      return null;\n    }\n\n    return (\n      <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props}>\n        {body}\n      </p>\n    );\n  },\n);\nFormMessage.displayName = \"FormMessage\";\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":636,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":636,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n});\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n        )}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn(\"h-7 w-7\", className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex\",\n          \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n          \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n          \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n          \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n          \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Separator\n        ref={ref}\n        data-sidebar=\"separator\"\n        className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-label\"\n        className={cn(\n          \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-action\"\n        className={cn(\n          \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          // Increases the hit area of the button on mobile.\n          \"after:absolute after:-inset-2 after:md:hidden\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />\n  ),\n);\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({ className, ...props }, ref) => (\n  <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\n    </Tooltip>\n  );\n});\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ ...props }, ref) => (\n  <li ref={ref} {...props} />\n));\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\context\\AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":97,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":97,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useState, useContext, useEffect, ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService, User, LoginCredentials } from '@/services/auth';\nimport { Loader2 } from 'lucide-react';\n\n// Define the shape of the context data\ninterface AuthContextType {\n  user: User | null;\n  login: (credentials: LoginCredentials, returnTo?: string | null) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\n// Create the context with a default undefined value\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Create the AuthProvider component\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check if user is already authenticated on mount\n    const checkSession = async () => {\n      const token = authService.getToken();\n      if (token) {\n        try {\n          // Fetch current user from backend\n          const currentUser = await authService.getCurrentUser();\n          setUser(currentUser);\n        } catch (error) {\n          console.error('Session check failed:', error);\n          // Clear invalid token\n          authService.clearToken();\n        }\n      }\n      setIsLoading(false);\n    };\n    checkSession();\n  }, []);\n\n  const login = async (credentials: LoginCredentials, returnTo?: string | null) => {\n    try {\n      const loggedInUser = await authService.login(credentials);\n      setUser(loggedInUser);\n\n      // --- RBAC REDIRECTION LOGIC ---\n      let redirectPath = returnTo || '/';\n\n      if (!returnTo) {\n          switch (loggedInUser.role) {\n            case 'admin':\n              redirectPath = '/admin'; // <-- THIS IS THE FIX\n              break;\n            case 'charity_admin':\n              redirectPath = '/charity';\n              break;\n            case 'donor':\n              redirectPath = '/donor';\n              break;\n            default:\n              redirectPath = '/';\n          }\n      }\n      \n      navigate(redirectPath, { replace: true });\n\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    navigate('/auth/login');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading: false }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Create a custom hook for easy access to the context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\CharityDetail.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCampaigns', 'fetchCharityDetails', 'fetchDocuments', and 'fetchFollowStatus'. Either include them or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCampaigns, fetchCharityDetails, fetchDocuments, fetchFollowStatus, id]","fix":{"range":[1964,1968],"text":"[fetchCampaigns, fetchCharityDetails, fetchDocuments, fetchFollowStatus, id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ArrowLeft, MapPin, Globe, Phone, Mail, CheckCircle, Calendar, Target, Users, Heart, ExternalLink, FileText, Download } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { PublicNavbar } from \"@/components/PublicNavbar\";\nimport { toast } from \"sonner\";\n\ninterface Charity {\n  id: number;\n  name: string;\n  legal_trading_name?: string;\n  mission?: string;\n  vision?: string;\n  category?: string;\n  address?: string;\n  region?: string;\n  municipality?: string;\n  contact_email: string;\n  contact_phone?: string;\n  website?: string;\n  logo_path?: string;\n  cover_image?: string;\n  verification_status: string;\n  verified_at?: string;\n  owner?: {\n    name: string;\n  };\n}\n\ninterface Campaign {\n  id: number;\n  title: string;\n  description: string;\n  target_amount: number;\n  current_amount: number;\n  start_date: string;\n  end_date: string;\n  status: string;\n  image?: string;\n}\n\nexport default function CharityDetail() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [charity, setCharity] = useState<Charity | null>(null);\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isFollowing, setIsFollowing] = useState<boolean>(false);\n  const [followLoading, setFollowLoading] = useState<boolean>(false);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    if (id) {\n      fetchCharityDetails();\n      fetchCampaigns();\n      fetchDocuments();\n      fetchFollowStatus();\n    }\n  }, [id]);\n\n  const fetchCharityDetails = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/charities/${id}`);\n      if (!response.ok) throw new Error('Charity not found');\n      \n      const data = await response.json();\n      setCharity(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load charity details');\n    }\n  };\n\n  const fetchCampaigns = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/charities/${id}/campaigns`);\n      if (response.ok) {\n        const data = await response.json();\n        setCampaigns(data);\n      }\n    } catch (err) {\n      console.error('Failed to load campaigns:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchDocuments = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/charities/${id}/documents`);\n      if (response.ok) {\n        const data = await response.json();\n        setDocuments(data);\n      }\n    } catch (err) {\n      console.error('Failed to load documents:', err);\n    }\n  };\n\n  const fetchFollowStatus = async () => {\n    try {\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!token) return; // not logged in\n      const res = await fetch(`${API_URL}/api/charities/${id}/follow-status`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) return;\n      const data = await res.json();\n      setIsFollowing(!!data.is_following);\n    } catch {\n      // ignore\n    }\n  };\n\n  const toggleFollow = async () => {\n    try {\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!token) {\n        toast.info('Please log in as a donor to follow charities');\n        navigate('/auth/login');\n        return;\n      }\n      setFollowLoading(true);\n      const res = await fetch(`${API_URL}/api/charities/${id}/follow`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to update follow');\n      const data = await res.json();\n      setIsFollowing(!!data.is_following);\n      toast.success(data.is_following ? 'You are now following this charity' : 'Unfollowed');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to update follow');\n    } finally {\n      setFollowLoading(false);\n    }\n  };\n\n  const handleDonate = (campaignId?: number) => {\n    // Navigate to donation page with charity/campaign context\n    if (campaignId) {\n      navigate(`/auth/register/donor?redirect=/donate?charity=${id}&campaign=${campaignId}`);\n    } else {\n      navigate(`/auth/register/donor?redirect=/donate?charity=${id}`);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <PublicNavbar />\n        <div className=\"flex justify-center items-center py-20\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading charity details...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !charity) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <PublicNavbar />\n        <div className=\"max-w-4xl mx-auto px-4 py-20 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Charity Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">{error || 'The charity you are looking for does not exist.'}</p>\n          <Button onClick={() => navigate('/charities')}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Charities\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PublicNavbar />\n      \n      {/* Hero Section */}\n      <div className=\"relative\">\n        {/* Cover Image */}\n        <div className=\"h-64 md:h-80 overflow-hidden\">\n          <img\n            src={charity.cover_image ? `${import.meta.env.VITE_API_URL}/storage/${charity.cover_image}` : \n                 \"https://images.unsplash.com/photo-1488521787991-ed7bbaae773c?w=1200\"}\n            alt={charity.name}\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute inset-0 bg-black/40\"></div>\n        </div>\n\n        {/* Charity Info Overlay */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-6 text-white\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex items-end gap-6\">\n              {/* Logo */}\n              {charity.logo_path && (\n                <div className=\"w-24 h-24 rounded-full overflow-hidden border-4 border-white bg-white flex-shrink-0\">\n                  <img\n                    src={`${import.meta.env.VITE_API_URL}/storage/${charity.logo_path}`}\n                    alt={`${charity.name} logo`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              )}\n              \n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <h1 className=\"text-3xl md:text-4xl font-bold\">{charity.name}</h1>\n                  <Badge className=\"bg-green-600 text-white\">\n                    <CheckCircle className=\"mr-1 h-3 w-3\" />\n                    Verified\n                  </Badge>\n                  <Button\n                    variant={isFollowing ? 'outline' : 'default'}\n                    size=\"sm\"\n                    className=\"ml-auto\"\n                    onClick={toggleFollow}\n                    disabled={followLoading}\n                  >\n                    {isFollowing ? 'Following' : 'Follow'}\n                  </Button>\n                </div>\n                {charity.legal_trading_name && charity.legal_trading_name !== charity.name && (\n                  <p className=\"text-white/80 mb-2\">Legal name: {charity.legal_trading_name}</p>\n                )}\n                <div className=\"flex items-center gap-4 text-white/90\">\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{charity.municipality && charity.region ? \n                      `${charity.municipality}, ${charity.region}` : \n                      charity.address || 'Philippines'}</span>\n                  </div>\n                  {charity.category && (\n                    <Badge variant=\"outline\" className=\"text-white border-white/50\">\n                      {charity.category}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Back Button */}\n        <Button\n          variant=\"outline\"\n          className=\"absolute top-6 left-6 bg-white/90 hover:bg-white\"\n          onClick={() => navigate('/charities')}\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Charities\n        </Button>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-12\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* About Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle>About {charity.name}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {charity.mission && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Our Mission</h3>\n                    <p className=\"text-muted-foreground\">{charity.mission}</p>\n                  </div>\n                )}\n                {charity.vision && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Our Vision</h3>\n                    <p className=\"text-muted-foreground\">{charity.vision}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Active Campaigns */}\n            {campaigns.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Active Campaigns</CardTitle>\n                  <CardDescription>\n                    Support our ongoing initiatives\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-6\">\n                    {campaigns.map((campaign) => (\n                      <Card key={campaign.id} className=\"border-l-4 border-l-primary\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex justify-between items-start mb-4\">\n                            <div className=\"flex-1\">\n                              <h3 className=\"text-lg font-semibold mb-2\">{campaign.title}</h3>\n                              <p className=\"text-muted-foreground text-sm mb-4\">{campaign.description}</p>\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-4\">\n                            <div>\n                              <div className=\"flex justify-between text-sm mb-2\">\n                                <span>Progress</span>\n                                <span>₱{campaign.current_amount.toLocaleString()} / ₱{campaign.target_amount.toLocaleString()}</span>\n                              </div>\n                              <Progress \n                                value={(campaign.current_amount / campaign.target_amount) * 100} \n                                className=\"h-2\"\n                              />\n                            </div>\n                            \n                            <div className=\"flex justify-between items-center\">\n                              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  <span>Ends {new Date(campaign.end_date).toLocaleDateString()}</span>\n                                </div>\n                                <Badge variant={campaign.status === 'published' ? 'default' : 'secondary'}>\n                                  {campaign.status}\n                                </Badge>\n                              </div>\n                              <Button onClick={() => handleDonate(campaign.id)}>\n                                <Heart className=\"mr-2 h-4 w-4\" />\n                                Donate Now\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Charity Documents */}\n            {documents.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5\" />\n                    Organization Documents\n                  </CardTitle>\n                  <CardDescription>\n                    Official documents and certificates\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-4\">\n                    {documents.map((document) => (\n                      <Card key={document.id} className=\"border-l-4 border-l-blue-500\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Badge variant=\"outline\" className=\"capitalize\">\n                                  {document.doc_type.replace('_', ' ')}\n                                </Badge>\n                                <span className=\"text-sm text-muted-foreground\">\n                                  Uploaded {new Date(document.uploaded_at).toLocaleDateString()}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Official {document.doc_type.replace('_', ' ')} document\n                              </p>\n                            </div>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => window.open(`${API_URL}/storage/${document.file_path}`, '_blank')}\n                            >\n                              <Download className=\"mr-2 h-4 w-4\" />\n                              View\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* General Donation CTA */}\n            <Card className=\"bg-primary/5 border-primary/20\">\n              <CardContent className=\"p-8 text-center\">\n                <h3 className=\"text-2xl font-bold mb-4\">Support {charity.name}</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Your donation helps us continue our mission and make a lasting impact in the community.\n                </p>\n                <Button size=\"lg\" onClick={() => handleDonate()}>\n                  <Heart className=\"mr-2 h-5 w-5\" />\n                  Make a Donation\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Contact Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Contact Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                  <a href={`mailto:${charity.contact_email}`} className=\"text-sm hover:underline\">\n                    {charity.contact_email}\n                  </a>\n                </div>\n                {charity.contact_phone && (\n                  <div className=\"flex items-center gap-3\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <a href={`tel:${charity.contact_phone}`} className=\"text-sm hover:underline\">\n                      {charity.contact_phone}\n                    </a>\n                  </div>\n                )}\n                {charity.website && (\n                  <div className=\"flex items-center gap-3\">\n                    <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                    <a \n                      href={charity.website.startsWith('http') ? charity.website : `https://${charity.website}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"text-sm hover:underline flex items-center gap-1\"\n                    >\n                      Visit Website\n                      <ExternalLink className=\"h-3 w-3\" />\n                    </a>\n                  </div>\n                )}\n                {charity.address && (\n                  <div className=\"flex items-start gap-3\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                    <div className=\"text-sm\">\n                      <p>{charity.address}</p>\n                      {charity.municipality && charity.region && (\n                        <p className=\"text-muted-foreground\">{charity.municipality}, {charity.region}</p>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Verification Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Verification Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"font-medium text-green-600\">Verified Organization</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  This charity has been verified by our team and meets all requirements for transparency and accountability.\n                </p>\n                {charity.verified_at && (\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Verified on {new Date(charity.verified_at).toLocaleDateString()}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Stats</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">Active Campaigns</span>\n                  </div>\n                  <span className=\"font-semibold\">{campaigns.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">Category</span>\n                  </div>\n                  <Badge variant=\"outline\">{charity.category || 'Community'}</Badge>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\PublicAbout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\PublicCharities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\ActionLogs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[691,694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[691,694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm, fetchLogs]","fix":{"range":[1237,1305],"text":"[actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm, fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Search, Filter, Calendar } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface AdminActionLog {\n  id: number;\n  admin: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  action_type: string;\n  target_type?: string;\n  target_id?: number;\n  details?: any;\n  notes?: string;\n  ip_address?: string;\n  created_at: string;\n}\n\nexport default function AdminActionLogs() {\n  const [logs, setLogs] = useState<AdminActionLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [actionTypeFilter, setActionTypeFilter] = useState(\"all\");\n  const [targetTypeFilter, setTargetTypeFilter] = useState(\"all\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  useEffect(() => {\n    fetchLogs();\n  }, [actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm]);\n\n  const fetchLogs = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (actionTypeFilter !== \"all\") params.append(\"action_type\", actionTypeFilter);\n      if (targetTypeFilter !== \"all\") params.append(\"target_type\", targetTypeFilter);\n      if (startDate) params.append(\"start_date\", startDate);\n      if (endDate) params.append(\"end_date\", endDate);\n      if (searchTerm) params.append(\"search\", searchTerm);\n\n      const response = await axios.get(`/api/admin/action-logs?${params.toString()}`);\n      setLogs(response.data.data || []);\n    } catch (error) {\n      console.error(\"Failed to fetch action logs:\", error);\n      toast.error(\"Failed to fetch action logs\");\n      setLogs([]); // Ensure logs is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportLogs = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (actionTypeFilter !== \"all\") params.append(\"action_type\", actionTypeFilter);\n      if (targetTypeFilter !== \"all\") params.append(\"target_type\", targetTypeFilter);\n      if (startDate) params.append(\"start_date\", startDate);\n      if (endDate) params.append(\"end_date\", endDate);\n\n      const response = await axios.get(`/api/admin/action-logs/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `admin_logs_${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success(\"Logs exported successfully\");\n    } catch (error) {\n      toast.error(\"Failed to export logs\");\n    }\n  };\n\n  const formatActionType = (actionType: string) => {\n    return actionType.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getActionBadge = (actionType: string) => {\n    const colors = {\n      approve_charity: \"bg-green-100 text-green-800\",\n      reject_charity: \"bg-red-100 text-red-800\",\n      suspend_user: \"bg-yellow-100 text-yellow-800\",\n      activate_user: \"bg-blue-100 text-blue-800\",\n      review_report: \"bg-purple-100 text-purple-800\",\n      delete_user: \"bg-red-100 text-red-800\",\n      other: \"bg-gray-100 text-gray-800\",\n    };\n\n    const color = colors[actionType as keyof typeof colors] || colors.other;\n    \n    return (\n      <Badge className={color}>\n        {formatActionType(actionType)}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Admin Action Logs</h1>\n          <p className=\"text-muted-foreground\">Audit trail of all administrative actions</p>\n        </div>\n        <Button onClick={exportLogs} className=\"flex items-center gap-2\">\n          <Download className=\"h-4 w-4\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search logs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={actionTypeFilter} onValueChange={setActionTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Action Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Actions</SelectItem>\n                <SelectItem value=\"approve_charity\">Approve Charity</SelectItem>\n                <SelectItem value=\"reject_charity\">Reject Charity</SelectItem>\n                <SelectItem value=\"suspend_user\">Suspend User</SelectItem>\n                <SelectItem value=\"activate_user\">Activate User</SelectItem>\n                <SelectItem value=\"review_report\">Review Report</SelectItem>\n                <SelectItem value=\"delete_user\">Delete User</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={targetTypeFilter} onValueChange={setTargetTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Target Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"User\">User</SelectItem>\n                <SelectItem value=\"Charity\">Charity</SelectItem>\n                <SelectItem value=\"Report\">Report</SelectItem>\n                <SelectItem value=\"Campaign\">Campaign</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"date\"\n              placeholder=\"Start Date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n            <Input\n              type=\"date\"\n              placeholder=\"End Date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Logs List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Action Logs ({(logs || []).length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {(logs || []).map((log) => (\n              <div key={log.id} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      {getActionBadge(log.action_type)}\n                      <span className=\"text-sm text-muted-foreground\">\n                        by {log.admin.name}\n                      </span>\n                    </div>\n                    {log.target_type && (\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Target:</span> {log.target_type} #{log.target_id}\n                      </p>\n                    )}\n                    {log.notes && (\n                      <p className=\"text-sm bg-gray-50 p-2 rounded\">\n                        {log.notes}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-right text-xs text-muted-foreground\">\n                    <p>{new Date(log.created_at).toLocaleString()}</p>\n                    {log.ip_address && <p>IP: {log.ip_address}</p>}\n                  </div>\n                </div>\n                {log.details && (\n                  <details className=\"text-sm\">\n                    <summary className=\"cursor-pointer text-blue-600 hover:underline\">\n                      View Details\n                    </summary>\n                    <pre className=\"mt-2 p-2 bg-gray-50 rounded text-xs overflow-auto\">\n                      {JSON.stringify(log.details, null, 2)}\n                    </pre>\n                  </details>\n                )}\n              </div>\n            ))}\n            {(logs || []).length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No action logs found matching your filters.\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\AuditLogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Categories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2161,2164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2161,2164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2638,2641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2638,2641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Folder, Eye, EyeOff } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  icon: string;\n  color: string;\n  is_active: boolean;\n  sort_order: number;\n  campaigns_count: number;\n  created_at: string;\n}\n\nexport default function AdminCategories() {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"folder\",\n    color: \"#3B82F6\",\n    sort_order: 0,\n  });\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  const fetchCategories = async () => {\n    try {\n      const response = await axios.get(\"/api/admin/categories\");\n      const payload = response.data;\n      const items = Array.isArray(payload)\n        ? payload\n        : (Array.isArray(payload?.data) ? payload.data : []);\n      setCategories(items);\n    } catch (error) {\n      console.error(\"Failed to fetch categories:\", error);\n      toast.error(\"Failed to fetch categories\");\n      setCategories([]); // Ensure categories is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreate = async () => {\n    try {\n      await axios.post(\"/api/admin/categories\", formData);\n      toast.success(\"Category created successfully\");\n      setIsCreateOpen(false);\n      resetForm();\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to create category\");\n    }\n  };\n\n  const handleEdit = async () => {\n    if (!selectedCategory) return;\n\n    try {\n      await axios.put(`/api/admin/categories/${selectedCategory.id}`, {\n        ...formData,\n        is_active: selectedCategory.is_active,\n      });\n      toast.success(\"Category updated successfully\");\n      setIsEditOpen(false);\n      resetForm();\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to update category\");\n    }\n  };\n\n  const toggleActive = async (category: Category) => {\n    try {\n      await axios.put(`/api/admin/categories/${category.id}`, {\n        ...category,\n        is_active: !category.is_active,\n      });\n      toast.success(`Category ${!category.is_active ? 'activated' : 'deactivated'}`);\n      fetchCategories();\n    } catch (error) {\n      toast.error(\"Failed to update category status\");\n    }\n  };\n\n  const handleDelete = async (category: Category) => {\n    if (!confirm(`Are you sure you want to delete \"${category.name}\"?`)) return;\n\n    try {\n      await axios.delete(`/api/admin/categories/${category.id}`);\n      toast.success(\"Category deleted successfully\");\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || \"Failed to delete category\");\n    }\n  };\n\n  const openCreateDialog = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const openEditDialog = (category: Category) => {\n    setSelectedCategory(category);\n    setFormData({\n      name: category.name,\n      description: category.description || \"\",\n      icon: category.icon,\n      color: category.color,\n      sort_order: category.sort_order,\n    });\n    setIsEditOpen(true);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      icon: \"folder\",\n      color: \"#3B82F6\",\n      sort_order: 0,\n    });\n    setSelectedCategory(null);\n  };\n\n  const iconOptions = [\n    \"folder\", \"heart\", \"users\", \"shield\", \"leaf\", \"graduationcap\", \n    \"baby\", \"usercheck\", \"dog\", \"building\", \"palette\"\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Category Management</h1>\n          <p className=\"text-muted-foreground\">Manage campaign categories</p>\n        </div>\n        <Button onClick={openCreateDialog}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Category\n        </Button>\n      </div>\n\n      {/* Categories Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {(Array.isArray(categories) ? categories : []).map((category) => (\n          <Card key={category.id} className={!category.is_active ? \"opacity-60\" : \"\"}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-sm\"\n                    style={{ backgroundColor: category.color }}\n                  >\n                    <Folder className=\"h-4 w-4\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {category.campaigns_count} campaigns\n                    </p>\n                  </div>\n                </div>\n                <Badge variant={category.is_active ? \"default\" : \"secondary\"}>\n                  {category.is_active ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {category.description && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {category.description}\n                </p>\n              )}\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                <span>Sort: {category.sort_order}</span>\n                <span>Slug: {category.slug}</span>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => toggleActive(category)}\n                  className=\"flex-1\"\n                >\n                  {category.is_active ? (\n                    <>\n                      <EyeOff className=\"h-3 w-3 mr-1\" />\n                      Deactivate\n                    </>\n                  ) : (\n                    <>\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Activate\n                    </>\n                  )}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => openEditDialog(category)}\n                >\n                  <Edit className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleDelete(category)}\n                  disabled={category.campaigns_count > 0}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {Array.isArray(categories) && categories.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Folder className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No categories found. Create your first category!</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Category Dialog */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New Category</DialogTitle>\n            <DialogDescription>\n              Add a new category for organizing campaigns\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Name</label>\n              <Input\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Category name\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Category description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Color</label>\n                <Input\n                  type=\"color\"\n                  value={formData.color}\n                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Sort Order</label>\n                <Input\n                  type=\"number\"\n                  value={formData.sort_order}\n                  onChange={(e) => setFormData({ ...formData, sort_order: parseInt(e.target.value) || 0 })}\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreate}>\n                Create Category\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Category Dialog */}\n      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Category</DialogTitle>\n            <DialogDescription>\n              Update category information\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Name</label>\n              <Input\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Category name\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Category description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Color</label>\n                <Input\n                  type=\"color\"\n                  value={formData.color}\n                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Sort Order</label>\n                <Input\n                  type=\"number\"\n                  value={formData.sort_order}\n                  onChange={(e) => setFormData({ ...formData, sort_order: parseInt(e.target.value) || 0 })}\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsEditOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleEdit}>\n                Update Category\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Charities.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCharities'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchCharities, filterStatus]","fix":{"range":[1550,1577],"text":"[currentPage, fetchCharities, filterStatus]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1858,1861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1858,1861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2588,2591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2588,2591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3152,3155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3152,3155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Search, Eye, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"react-router-dom\";\nimport { adminService, Charity } from \"@/services/admin\";\n\n\nexport default function Charities() {\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [selectedCharity, setSelectedCharity] = useState<Charity | null>(null);\n  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [charities, setCharities] = useState<Charity[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    fetchCharities();\n  }, [currentPage, filterStatus]);\n\n  const fetchCharities = async () => {\n    setIsLoading(true);\n    try {\n      const response = await adminService.getAllCharities(currentPage, {\n        status: filterStatus !== 'all' ? filterStatus : undefined\n      });\n      setCharities(response.data);\n    } catch (error: any) {\n      console.error('Failed to fetch charities:', error);\n      toast.error('Failed to load charities');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleViewDetail = async (charity: Charity) => {\n    try {\n      const details = await adminService.getCharityDetails(charity.id);\n      setSelectedCharity(details);\n      setIsDetailDialogOpen(true);\n    } catch (error) {\n      toast.error('Failed to load charity details');\n    }\n  };\n\n  const handleApprove = async (charityId: number) => {\n    try {\n      await adminService.approveCharity(charityId);\n      toast.success(\"Charity approved successfully\");\n      setIsDetailDialogOpen(false);\n      fetchCharities(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to approve charity');\n    }\n  };\n\n  const handleReject = async () => {\n    if (!rejectReason.trim()) {\n      toast.error(\"Please provide a rejection reason\");\n      return;\n    }\n    if (!selectedCharity) return;\n\n    try {\n      await adminService.rejectCharity(selectedCharity.id, rejectReason);\n      toast.success(\"Charity rejected\");\n      setIsRejectDialogOpen(false);\n      setIsDetailDialogOpen(false);\n      setRejectReason(\"\");\n      fetchCharities(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to reject charity');\n    }\n  };\n\n  const handleRequestInfo = (charityId: number) => {\n    toast.info(\"Information request sent to charity\");\n    setIsDetailDialogOpen(false);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"approved\":\n        return <Badge className=\"bg-green-600\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      case \"pending\":\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const filteredCharities = charities.filter(charity => {\n    const matchesSearch = charity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         charity.contact_email.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading charities...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Charity Registrations</h1>\n        <p className=\"text-muted-foreground\">\n          Review and manage charity applications\n        </p>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search charities...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"pending\">Pending</SelectItem>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"rejected\">Rejected</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>ID</TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Organization Email</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Submitted</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredCharities.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                  No charities found\n                </TableCell>\n              </TableRow>\n            ) : filteredCharities.map((charity) => (\n              <TableRow key={charity.id}>\n                <TableCell className=\"font-medium\">{charity.id}</TableCell>\n                <TableCell>{charity.name}</TableCell>\n                <TableCell>{charity.contact_email}</TableCell>\n                <TableCell>{getStatusBadge(charity.verification_status)}</TableCell>\n                <TableCell>{new Date(charity.created_at).toLocaleDateString()}</TableCell>\n                <TableCell className=\"text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => handleViewDetail(charity)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Charity Application Details</DialogTitle>\n            <DialogDescription>\n              Review the charity registration information\n            </DialogDescription>\n          </DialogHeader>\n          {selectedCharity && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Organization Name</Label>\n                <p>{selectedCharity.name}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Email</Label>\n                <p>{selectedCharity.contact_email}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Registration Number</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedCharity.reg_no || 'N/A'}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Mission</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedCharity.mission || 'N/A'}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Status</Label>\n                {getStatusBadge(selectedCharity.verification_status)}\n              </div>\n              {selectedCharity.verification_notes && (\n                <div className=\"grid gap-2\">\n                  <Label className=\"font-semibold\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCharity.verification_notes}</p>\n                </div>\n              )}\n              {selectedCharity.documents && selectedCharity.documents.length > 0 && (\n                <div className=\"grid gap-2\">\n                  <Label className=\"font-semibold\">Submitted Documents</Label>\n                  <div className=\"space-y-2\">\n                    {selectedCharity.documents.map((doc, index) => (\n                      <div key={index} className=\"flex items-center justify-between rounded-md border p-2\">\n                        <span className=\"text-sm\">{doc.document_type}</span>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter className=\"flex gap-2\">\n            {selectedCharity?.verification_status === \"pending\" && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleRequestInfo(selectedCharity.id)}\n                >\n                  <AlertCircle className=\"h-4 w-4 mr-2\" />\n                  Request Info\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => setIsRejectDialogOpen(true)}\n                >\n                  <XCircle className=\"h-4 w-4 mr-2\" />\n                  Reject\n                </Button>\n                <Button onClick={() => handleApprove(selectedCharity.id)}>\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Approve\n                </Button>\n              </>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Charity Application</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejection\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <Textarea\n              placeholder=\"Enter rejection reason...\"\n              value={rejectReason}\n              onChange={(e) => setRejectReason(e.target.value)}\n              rows={4}\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsRejectDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleReject}>\n              Confirm Rejection\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\DocumentExpiry.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [daysFilter, fetchData]","fix":{"range":[1786,1798],"text":"[daysFilter, fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertTriangle, Calendar, Clock, FileText, Eye, Edit, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface ExpiringDocument {\n  id: number;\n  doc_type: string;\n  expiry_date: string;\n  days_until_expiry: number;\n  charity: {\n    id: number;\n    name: string;\n    contact_email: string;\n  };\n}\n\ninterface ExpiredDocument {\n  id: number;\n  doc_type: string;\n  expiry_date: string;\n  days_overdue: number;\n  charity: {\n    id: number;\n    name: string;\n    contact_email: string;\n    verification_status: string;\n  };\n}\n\ninterface ExpiryStatistics {\n  expiring_in_7_days: number;\n  expiring_in_30_days: number;\n  expired: number;\n  charities_with_expired_docs: number;\n}\n\nexport default function AdminDocumentExpiry() {\n  const [expiringDocuments, setExpiringDocuments] = useState<ExpiringDocument[]>([]);\n  const [expiredDocuments, setExpiredDocuments] = useState<ExpiredDocument[]>([]);\n  const [statistics, setStatistics] = useState<ExpiryStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"expiring\");\n  const [daysFilter, setDaysFilter] = useState(\"30\");\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchData();\n  }, [daysFilter]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n\n      const authHeaders = token\n        ? { headers: { Authorization: `Bearer ${token}` } }\n        : {};\n\n      // Fetch expiring documents\n      const expiringResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expiring?days=${daysFilter}`,\n        authHeaders\n      );\n      setExpiringDocuments(expiringResponse.data?.expiring_documents ?? []);\n\n      // Fetch expired documents\n      const expiredResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expired`,\n        authHeaders\n      );\n      setExpiredDocuments(expiredResponse.data?.expired_documents ?? []);\n\n      // Fetch statistics\n      const statsResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expiry-statistics`,\n        authHeaders\n      );\n      setStatistics(statsResponse.data ?? null);\n\n    } catch (error) {\n      toast.error(\"Failed to fetch document expiry data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateDocumentExpiry = async (documentId: number, expires: boolean, expiryDate?: string) => {\n    try {\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      const authHeaders = token ? { headers: { Authorization: `Bearer ${token}` } } : {};\n      await axios.patch(\n        `${API_URL}/api/admin/documents/${documentId}/expiry`,\n        {\n          expires,\n          expiry_date: expiryDate,\n        },\n        authHeaders\n      );\n      toast.success(\"Document expiry updated successfully\");\n      fetchData();\n    } catch (error) {\n      toast.error(\"Failed to update document expiry\");\n    }\n  };\n\n  const formatDocType = (docType: string) => {\n    return docType.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getUrgencyBadge = (days: number, isExpired: boolean = false) => {\n    if (isExpired) {\n      return <Badge className=\"bg-red-100 text-red-800\">Expired</Badge>;\n    }\n    if (days <= 7) {\n      return <Badge className=\"bg-red-100 text-red-800\">Critical</Badge>;\n    }\n    if (days <= 14) {\n      return <Badge className=\"bg-orange-100 text-orange-800\">Urgent</Badge>;\n    }\n    if (days <= 30) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Warning</Badge>;\n    }\n    return <Badge className=\"bg-blue-100 text-blue-800\">Notice</Badge>;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Document Expiry Management</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage charity document expirations</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expiring in 7 Days</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.expiring_in_7_days}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expiring in 30 Days</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{statistics.expiring_in_30_days}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Already Expired</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.expired}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Affected Charities</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-600\">{statistics.charities_with_expired_docs}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Tabs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 items-center\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={activeTab === \"expiring\" ? \"default\" : \"outline\"}\n                onClick={() => setActiveTab(\"expiring\")}\n              >\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Expiring Documents\n              </Button>\n              <Button\n                variant={activeTab === \"expired\" ? \"default\" : \"outline\"}\n                onClick={() => setActiveTab(\"expired\")}\n              >\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                Expired Documents\n              </Button>\n            </div>\n            {activeTab === \"expiring\" && (\n              <Select value={daysFilter} onValueChange={setDaysFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Next 7 days</SelectItem>\n                  <SelectItem value=\"14\">Next 14 days</SelectItem>\n                  <SelectItem value=\"30\">Next 30 days</SelectItem>\n                  <SelectItem value=\"60\">Next 60 days</SelectItem>\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Documents List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            {activeTab === \"expiring\" ? \"Expiring Documents\" : \"Expired Documents\"} \n            ({activeTab === \"expiring\" ? (expiringDocuments?.length ?? 0) : (expiredDocuments?.length ?? 0)})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {activeTab === \"expiring\" ? (\n              (expiringDocuments ?? []).map((document) => (\n                <div key={document.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4 text-blue-500\" />\n                        <span className=\"font-medium\">{formatDocType(document.doc_type)}</span>\n                        {getUrgencyBadge(document.days_until_expiry)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Charity:</strong> {document.charity.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Contact:</strong> {document.charity.contact_email}\n                      </p>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>Expires: {new Date(document.expiry_date).toLocaleDateString()}</span>\n                        <span className=\"text-yellow-600 font-medium\">\n                          ({document.days_until_expiry} days remaining)\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/admin/charities/${document.charity.id}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Charity\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              (expiredDocuments ?? []).map((document) => (\n                <div key={document.id} className=\"border border-red-200 rounded-lg p-4 space-y-3 bg-red-50\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4 text-red-500\" />\n                        <span className=\"font-medium\">{formatDocType(document.doc_type)}</span>\n                        {getUrgencyBadge(0, true)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Charity:</strong> {document.charity.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Contact:</strong> {document.charity.contact_email}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Status:</strong> \n                        <Badge className={document.charity.verification_status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {document.charity.verification_status}\n                        </Badge>\n                      </p>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"h-4 w-4 text-red-500\" />\n                        <span>Expired: {new Date(document.expiry_date).toLocaleDateString()}</span>\n                        <span className=\"text-red-600 font-medium\">\n                          ({document.days_overdue} days overdue)\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/admin/charities/${document.charity.id}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Charity\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            \n            {((activeTab === \"expiring\" && (expiringDocuments?.length ?? 0) === 0) || \n              (activeTab === \"expired\" && (expiredDocuments?.length ?? 0) === 0)) && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No {activeTab} documents found.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Recommendations */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-800\">Recommended Actions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-blue-700\">\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Contact charities with documents expiring in 7 days immediately</li>\n            <li>• Send renewal reminders to charities with documents expiring in 30 days</li>\n            <li>• Review verification status of charities with expired documents</li>\n            <li>• Consider suspending charities with critical expired documents</li>\n            <li>• Set up automated email reminders for document renewals</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Notifications.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchNotifications'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNotifications]","fix":{"range":[1600,1602],"text":"[fetchNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2 } from 'lucide-react';\n\ninterface NotificationItem {\n  id: number;\n  type: string;\n  title?: string;\n  message?: string;\n  read: boolean;\n  created_at: string;\n}\n\nexport default function AdminNotifications() {\n  const [items, setItems] = useState<NotificationItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      const res = await fetch(`${API_URL}/api/me/notifications?unread=false`, {\n        headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      });\n      if (!res.ok) throw new Error('Failed');\n      const data = await res.json();\n      const list = Array.isArray(data?.data) ? data.data : (Array.isArray(data) ? data : []);\n      setItems(list as NotificationItem[]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAllRead = async () => {\n    const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n    await fetch(`${API_URL}/api/notifications/mark-all-read`, {\n      method: 'POST',\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    });\n    fetchNotifications();\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const unreadCount = items.filter(i => !i.read).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Notifications</h1>\n          <p className=\"text-muted-foreground\">Review recent system updates and alerts</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"secondary\">Unread: {unreadCount}</Badge>\n          <Button variant=\"outline\" onClick={markAllRead} disabled={unreadCount === 0}>Mark all read</Button>\n          <Button variant=\"outline\" onClick={fetchNotifications}>Refresh</Button>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Notifications ({items.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-16 text-muted-foreground\">\n              <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" /> Loading...\n            </div>\n          ) : items.length === 0 ? (\n            <div className=\"text-center py-16 text-muted-foreground\">No notifications</div>\n          ) : (\n            <div className=\"space-y-3\">\n              {items.map(n => (\n                <div key={n.id} className={`border rounded-md p-4 ${n.read ? '' : 'bg-muted/40'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"font-medium\">\n                      {n.title || n.type}\n                    </div>\n                    {!n.read && <Badge className=\"bg-blue-100 text-blue-800\">New</Badge>}\n                  </div>\n                  {n.message && <div className=\"mt-1 text-sm text-muted-foreground\">{n.message}</div>}\n                  <div className=\"mt-2 text-xs text-muted-foreground\">{new Date(n.created_at).toLocaleString()}</div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[985,988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[985,988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { User, Mail, Phone, Shield, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { toast } from \"sonner\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n  });\n\n  const handleSave = async () => {\n    try {\n      // TODO: Implement profile update API call\n      // await authService.updateProfile(formData);\n      toast.success(\"Profile updated successfully\");\n      setIsEditing(false);\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to update profile\");\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n    });\n    setIsEditing(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Profile</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account information\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Profile Information Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Personal Information</CardTitle>\n            <CardDescription>\n              Update your personal details\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  disabled={!isEditing}\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"flex items-center gap-2\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  disabled={!isEditing}\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone Number</Label>\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  disabled={!isEditing}\n                  placeholder=\"Not set\"\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex gap-2\">\n              {!isEditing ? (\n                <Button onClick={() => setIsEditing(true)}>\n                  Edit Profile\n                </Button>\n              ) : (\n                <>\n                  <Button onClick={handleSave}>\n                    Save Changes\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleCancel}>\n                    Cancel\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Details Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Details</CardTitle>\n            <CardDescription>\n              Your account information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Role</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground capitalize\">\n                {user?.role?.replace('_', ' ')}\n              </span>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Member Since</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.created_at ? new Date(user.created_at).toLocaleDateString() : 'N/A'}\n              </span>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">User ID</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                #{user?.id}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Card */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle>Security</CardTitle>\n            <CardDescription>\n              Manage your password and security settings\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Password</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Last changed: Never\n                </p>\n              </div>\n              <Button variant=\"outline\">\n                Change Password\n              </Button>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Two-Factor Authentication</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Add an extra layer of security to your account\n                </p>\n              </div>\n              <Button variant=\"outline\" disabled>\n                Enable 2FA\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Reports.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchReports'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [statusFilter, entityTypeFilter, reasonFilter, searchTerm, fetchReports]","fix":{"range":[2244,2302],"text":"[statusFilter, entityTypeFilter, reasonFilter, searchTerm, fetchReports]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { AlertTriangle, Eye, CheckCircle, XCircle, Clock, Search, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface Report {\n  id: number;\n  reporter: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  reporter_role: string;\n  reported_entity_type: string;\n  reported_entity_id: number;\n  reason: string;\n  description: string;\n  evidence_path?: string;\n  status: string;\n  admin_notes?: string;\n  reviewed_by?: number;\n  reviewed_at?: string;\n  action_taken?: string;\n  created_at: string;\n}\n\ninterface ReportStatistics {\n  total: number;\n  pending: number;\n  under_review: number;\n  resolved: number;\n  dismissed: number;\n  by_reason: Array<{ reason: string; count: number }>;\n  recent: Report[];\n}\n\nexport default function AdminReports() {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [statistics, setStatistics] = useState<ReportStatistics | null>(null);\n  const [selectedReport, setSelectedReport] = useState<Report | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [isReviewOpen, setIsReviewOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [entityTypeFilter, setEntityTypeFilter] = useState(\"all\");\n  const [reasonFilter, setReasonFilter] = useState(\"all\");\n\n  // Review form state\n  const [reviewStatus, setReviewStatus] = useState(\"\");\n  const [actionTaken, setActionTaken] = useState(\"\");\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  useEffect(() => {\n    fetchReports();\n    fetchStatistics();\n  }, [statusFilter, entityTypeFilter, reasonFilter, searchTerm]);\n\n  const fetchReports = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      if (entityTypeFilter !== \"all\") params.append(\"entity_type\", entityTypeFilter);\n      if (reasonFilter !== \"all\") params.append(\"reason\", reasonFilter);\n      if (searchTerm) params.append(\"search\", searchTerm);\n\n      const response = await axios.get(`/api/admin/reports?${params.toString()}`);\n      setReports(response.data.data || []);\n    } catch (error) {\n      console.error(\"Failed to fetch reports:\", error);\n      toast.error(\"Failed to fetch reports\");\n      setReports([]); // Ensure reports is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchStatistics = async () => {\n    try {\n      const response = await axios.get(\"/api/admin/reports/statistics\");\n      setStatistics(response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch statistics:\", error);\n    }\n  };\n\n  const handleViewDetails = async (report: Report) => {\n    try {\n      const response = await axios.get(`/api/admin/reports/${report.id}`);\n      setSelectedReport(response.data.report);\n      setIsDetailsOpen(true);\n    } catch (error) {\n      toast.error(\"Failed to fetch report details\");\n    }\n  };\n\n  const handleReviewReport = (report: Report) => {\n    setSelectedReport(report);\n    setReviewStatus(\"\");\n    setActionTaken(\"\");\n    setAdminNotes(\"\");\n    setIsReviewOpen(true);\n  };\n\n  const submitReview = async () => {\n    if (!selectedReport || !reviewStatus) {\n      toast.error(\"Please select a status\");\n      return;\n    }\n\n    try {\n      await axios.patch(`/api/admin/reports/${selectedReport.id}/review`, {\n        status: reviewStatus,\n        action_taken: actionTaken,\n        admin_notes: adminNotes,\n      });\n\n      toast.success(\"Report reviewed successfully\");\n      setIsReviewOpen(false);\n      fetchReports();\n      fetchStatistics();\n    } catch (error) {\n      toast.error(\"Failed to review report\");\n    }\n  };\n\n  const deleteReport = async (reportId: number) => {\n    if (!confirm(\"Are you sure you want to delete this report?\")) return;\n\n    try {\n      await axios.delete(`/api/admin/reports/${reportId}`);\n      toast.success(\"Report deleted successfully\");\n      fetchReports();\n      fetchStatistics();\n    } catch (error) {\n      toast.error(\"Failed to delete report\");\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"destructive\",\n      under_review: \"default\",\n      resolved: \"default\",\n      dismissed: \"secondary\",\n    } as const;\n\n    const colors = {\n      pending: \"bg-red-100 text-red-800\",\n      under_review: \"bg-yellow-100 text-yellow-800\",\n      resolved: \"bg-green-100 text-green-800\",\n      dismissed: \"bg-gray-100 text-gray-800\",\n    };\n\n    return (\n      <Badge className={colors[status as keyof typeof colors]}>\n        {status.replace(\"_\", \" \").toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatReason = (reason: string) => {\n    return reason.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reports Management</h1>\n          <p className=\"text-muted-foreground\">Review and manage user reports</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{statistics.total}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.pending}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Under Review</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{statistics.under_review}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Resolved</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{statistics.resolved}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Dismissed</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-600\">{statistics.dismissed}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reports...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"under_review\">Under Review</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n                <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={entityTypeFilter} onValueChange={setEntityTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by entity type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"user\">User</SelectItem>\n                <SelectItem value=\"charity\">Charity</SelectItem>\n                <SelectItem value=\"campaign\">Campaign</SelectItem>\n                <SelectItem value=\"donation\">Donation</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={reasonFilter} onValueChange={setReasonFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by reason\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Reasons</SelectItem>\n                <SelectItem value=\"fraud\">Fraud</SelectItem>\n                <SelectItem value=\"fake_proof\">Fake Proof</SelectItem>\n                <SelectItem value=\"inappropriate_content\">Inappropriate Content</SelectItem>\n                <SelectItem value=\"scam\">Scam</SelectItem>\n                <SelectItem value=\"fake_charity\">Fake Charity</SelectItem>\n                <SelectItem value=\"misuse_of_funds\">Misuse of Funds</SelectItem>\n                <SelectItem value=\"spam\">Spam</SelectItem>\n                <SelectItem value=\"harassment\">Harassment</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reports List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Reports ({(reports || []).length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {(reports || []).map((report) => (\n              <div key={report.id} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                      <span className=\"font-medium\">Report #{report.id}</span>\n                      {getStatusBadge(report.status)}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Reported by: {report.reporter.name} ({report.reporter_role})\n                    </p>\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Reason:</span> {formatReason(report.reason)}\n                    </p>\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Entity:</span> {report.reported_entity_type} #{report.reported_entity_id}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleViewDetails(report)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View\n                    </Button>\n                    {report.status === \"pending\" && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleReviewReport(report)}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Review\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => deleteReport(report.id)}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n                <p className=\"text-sm bg-gray-50 p-2 rounded\">\n                  {report.description}\n                </p>\n                <div className=\"text-xs text-muted-foreground\">\n                  Submitted: {new Date(report.created_at).toLocaleString()}\n                </div>\n              </div>\n            ))}\n            {(reports || []).length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No reports found matching your filters.\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Report Details</DialogTitle>\n            <DialogDescription>\n              Full details of report #{selectedReport?.id}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedReport && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Reporter</label>\n                  <p className=\"text-sm\">{selectedReport.reporter.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{selectedReport.reporter.email}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Status</label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedReport.status)}</div>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Description</label>\n                <p className=\"text-sm mt-1 p-2 bg-gray-50 rounded\">{selectedReport.description}</p>\n              </div>\n              {selectedReport.evidence_path && (\n                <div>\n                  <label className=\"text-sm font-medium\">Evidence</label>\n                  <p className=\"text-sm mt-1\">\n                    <a \n                      href={`/storage/${selectedReport.evidence_path}`} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:underline\"\n                    >\n                      View Evidence File\n                    </a>\n                  </p>\n                </div>\n              )}\n              {selectedReport.admin_notes && (\n                <div>\n                  <label className=\"text-sm font-medium\">Admin Notes</label>\n                  <p className=\"text-sm mt-1 p-2 bg-blue-50 rounded\">{selectedReport.admin_notes}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Review Report Dialog */}\n      <Dialog open={isReviewOpen} onOpenChange={setIsReviewOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Review Report</DialogTitle>\n            <DialogDescription>\n              Take action on report #{selectedReport?.id}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"under_review\">Under Review</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Action Taken</label>\n              <Select value={actionTaken} onValueChange={setActionTaken}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select action\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No Action</SelectItem>\n                  <SelectItem value=\"warned\">Warned User</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended Account</SelectItem>\n                  <SelectItem value=\"deleted\">Deleted Content</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted User</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Admin Notes</label>\n              <Textarea\n                value={adminNotes}\n                onChange={(e) => setAdminNotes(e.target.value)}\n                placeholder=\"Add notes about your review and action taken...\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsReviewOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={submitReview}>\n                Submit Review\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Users.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchUsers, filterRole]","fix":{"range":[1378,1403],"text":"[currentPage, fetchUsers, filterRole]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1663,1666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1663,1666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2360,2363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2360,2363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2666,2669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2666,2669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9575,9578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9575,9578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9784,9787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9784,9787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Search, UserCog, Trash2, CheckCircle, Eye } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { adminService, User } from \"@/services/admin\";\n\n\nexport default function Users() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRole, setFilterRole] = useState(\"all\");\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [viewingUser, setViewingUser] = useState<User | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [currentPage, filterRole]);\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n    try {\n      const response = await adminService.getUsers(currentPage, {\n        role: filterRole !== 'all' ? filterRole : undefined\n      });\n      setUsers(response.data);\n    } catch (error: any) {\n      console.error('Failed to fetch users:', error);\n      toast.error('Failed to load users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleViewUser = (user: User) => {\n    setViewingUser(user);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveUser = () => {\n    toast.success(\"User updated successfully\");\n    setIsEditDialogOpen(false);\n  };\n\n  const handleSuspendUser = async (userId: number) => {\n    try {\n      await adminService.suspendUser(userId);\n      toast.success(\"User suspended\");\n      fetchUsers(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to suspend user');\n    }\n  };\n\n  const handleActivateUser = async (userId: number) => {\n    try {\n      await adminService.activateUser(userId);\n      toast.success(\"User activated\");\n      fetchUsers(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to activate user');\n    }\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading users...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Users Management</h1>\n        <p className=\"text-muted-foreground\">\n          Manage user accounts and permissions\n        </p>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n        <Select value={filterRole} onValueChange={setFilterRole}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by role\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Roles</SelectItem>\n            <SelectItem value=\"admin\">Admin</SelectItem>\n            <SelectItem value=\"donor\">Donor</SelectItem>\n            <SelectItem value=\"charity_admin\">Charity Admin</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>ID</TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Created</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredUsers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center text-muted-foreground\">\n                  No users found\n                </TableCell>\n              </TableRow>\n            ) : filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell className=\"font-medium\">{user.id}</TableCell>\n                <TableCell>{user.name}</TableCell>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>\n                  <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                    {user.role}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <Badge variant={user.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {user.status}\n                  </Badge>\n                </TableCell>\n                <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\n                <TableCell className=\"text-right\">\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleViewUser(user)}\n                      title=\"View details\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEditUser(user)}\n                      title=\"Edit user\"\n                    >\n                      <UserCog className=\"h-4 w-4\" />\n                    </Button>\n                    {user.status === 'active' ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleSuspendUser(user.id)}\n                        title=\"Suspend user\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleActivateUser(user.id)}\n                        title=\"Activate user\"\n                      >\n                        <CheckCircle className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* View User Details Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>User Details</DialogTitle>\n            <DialogDescription>\n              Complete information about the user\n            </DialogDescription>\n          </DialogHeader>\n          {viewingUser && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Name</Label>\n                  <p>{viewingUser.name}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Email</Label>\n                  <p>{viewingUser.email}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Phone</Label>\n                  <p>{viewingUser.phone || 'Not provided'}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Role</Label>\n                  <Badge variant={viewingUser.role === \"admin\" ? \"default\" : \"secondary\"}>\n                    {viewingUser.role}\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Status</Label>\n                  <Badge variant={viewingUser.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {viewingUser.status}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Registered</Label>\n                  <p>{new Date(viewingUser.created_at).toLocaleDateString()}</p>\n                </div>\n              </div>\n              {(viewingUser as any).address && (\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Address</Label>\n                  <p className=\"text-sm text-muted-foreground\">{(viewingUser as any).address}</p>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Update user information and permissions\n            </DialogDescription>\n          </DialogHeader>\n          {editingUser && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input id=\"name\" defaultValue={editingUser.name} />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input id=\"email\" defaultValue={editingUser.email} />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"role\">Role</Label>\n                <Select defaultValue={editingUser.role.toLowerCase()}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"user\">User</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSaveUser}>Save Changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\Login.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1871,1874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1871,1874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Eye, EyeOff, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\nimport { useAuth } from '@/context/AuthContext'; // <--- 1. IMPORT THE AUTH HOOK\n\nexport default function Login() {\n  const { login } = useAuth(); // <--- 2. GET THE LOGIN FUNCTION FROM CONTEXT\n  const [searchParams] = useSearchParams();\n\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    remember_me: false,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrors({});\n    setIsLoading(true);\n\n    try {\n      // 3. CALL THE CONTEXT'S LOGIN FUNCTION. \n      // It handles the API call, setting user state, and redirection!\n      const returnTo = searchParams.get('return_to');\n      await login(formData, returnTo);\n      \n      // The redirection logic is now handled inside the AuthContext, so we don't need it here.\n      // A success toast can be triggered from the context if desired, or kept here.\n      toast.success('Login successful!');\n\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.message || error.message || 'An unknown error occurred.';\n      setErrors({ general: errorMessage });\n      toast.error('Login failed', {\n        description: errorMessage,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-background to-muted/20 p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Welcome back</h1>\n          <p className=\"text-muted-foreground\">\n            Sign in to your account to continue\n          </p>\n        </div>\n\n        {/* Login Card */}\n        <div className=\"auth-card\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* General Error */}\n            {errors.general && (\n              <div className=\"p-3 text-sm bg-destructive/10 text-destructive border border-destructive/20 rounded-lg\">\n                {errors.general}\n              </div>\n            )}\n\n            {/* Email */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"you@example.com\"\n                value={formData.email}\n                onChange={(e) => handleChange('email', e.target.value)}\n                required\n                autoComplete=\"email\"\n                className={cn(errors.email && 'border-destructive')}\n              />\n            </div>\n\n            {/* Password */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                  value={formData.password}\n                  onChange={(e) => handleChange('password', e.target.value)}\n                  required\n                  autoComplete=\"current-password\"\n                  className={cn(errors.password && 'border-destructive', 'pr-10')}\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n                  tabIndex={-1}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Remember Me & Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={formData.remember_me}\n                  onCheckedChange={(checked) =>\n                    handleChange('remember_me', checked === true)\n                  }\n                />\n                <Label\n                  htmlFor=\"remember\"\n                  className=\"text-sm font-normal cursor-pointer\"\n                >\n                  Remember me\n                </Label>\n              </div>\n\n              <Link\n                to=\"/auth/forgot\"\n                className=\"text-sm text-primary hover:underline\"\n              >\n                Forgot password?\n              </Link>\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                'Sign in'\n              )}\n            </Button>\n            \n            {/* Divider and Socials can remain as is */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Or continue with\n                </span>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-3\">\n               {/* Social buttons remain unchanged */}\n               <Button type=\"button\" variant=\"outline\" disabled>\n                 {/* Google SVG */}\n                 <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\"><path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\" /><path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\" /><path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\" /><path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\" /></svg>\n                 Google\n               </Button>\n               <Button type=\"button\" variant=\"outline\" disabled>\n                 {/* Facebook SVG */}\n                 <svg className=\"mr-2 h-4 w-4\" fill=\"#1877F2\" viewBox=\"0 0 24 24\"><path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" /></svg>\n                 Facebook\n               </Button>\n            </div>\n          </form>\n        </div>\n\n        {/* Sign Up Link */}\n        <p className=\"text-center mt-6 text-sm text-muted-foreground\">\n          Don't have an account?{' '}\n          <Link to=\"/auth/register\" className=\"text-primary font-medium hover:underline\">\n            Sign up\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\RegisterCharity.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8224,8227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8224,8227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ArrowLeft, ArrowRight, Check, Loader2, Save } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { FileUploader, type UploadedFile } from '@/components/auth/FileUploader';\nimport { authService, type CharityRegistrationData } from '@/services/auth';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\nconst STEPS = [\n  { id: 1, name: 'Organization Details', description: 'Basic information about your charity' },\n  { id: 2, name: 'Profile & Mission', description: 'Tell us about your mission' },\n  { id: 3, name: 'Documents & Compliance', description: 'Upload required documents' },\n  { id: 4, name: 'Review & Submit', description: 'Confirm your information' },\n];\n\nconst NONPROFIT_CATEGORIES = [\n  'Education',\n  'Healthcare',\n  'Environment',\n  'Human Rights',\n  'Animal Welfare',\n  'Arts & Culture',\n  'Community Development',\n  'Disaster Relief',\n  'Other',\n];\n\nexport default function RegisterCharity() {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSavingDraft, setIsSavingDraft] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const [formData, setFormData] = useState<Partial<CharityRegistrationData>>({\n    organization_name: '',\n    legal_trading_name: '',\n    registration_number: '',\n    tax_id: '',\n    website: '',\n    contact_person_name: '',\n    contact_email: '',\n    contact_phone: '',\n    password: '',\n    password_confirmation: '',\n    address: '',\n    region: '',\n    municipality: '',\n    nonprofit_category: '',\n    mission_statement: '',\n    description: '',\n    accept_terms: false,\n    confirm_truthfulness: false,\n  });\n\n  // Document uploads\n  const [documents, setDocuments] = useState<{\n    registration_cert: UploadedFile[];\n    tax_registration: UploadedFile[];\n    financial_statement: UploadedFile[];\n    representative_id: UploadedFile[];\n    additional_docs: UploadedFile[];\n  }>({\n    registration_cert: [],\n    tax_registration: [],\n    financial_statement: [],\n    representative_id: [],\n    additional_docs: [],\n  });\n\n  // Logo and cover image\n  const [logo, setLogo] = useState<File | null>(null);\n  const [logoPreview, setLogoPreview] = useState<string | null>(null);\n  const [coverImage, setCoverImage] = useState<File | null>(null);\n  const [coverPreview, setCoverPreview] = useState<string | null>(null);\n\n  const handleChange = (field: string, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setLogo(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setLogoPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n      toast.success('Logo uploaded');\n    }\n  };\n\n  const handleCoverUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setCoverImage(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCoverPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n      toast.success('Cover image uploaded');\n    }\n  };\n\n  const validateStep = (step: number): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (step === 1) {\n      if (!formData.organization_name) newErrors.organization_name = 'Required';\n      if (!formData.registration_number) newErrors.registration_number = 'Required';\n      if (!formData.tax_id) newErrors.tax_id = 'Required';\n      if (!formData.contact_person_name) newErrors.contact_person_name = 'Required';\n      if (!formData.contact_email) newErrors.contact_email = 'Required';\n      if (!formData.contact_phone) newErrors.contact_phone = 'Required';\n      if (!formData.password || (formData.password as string).length < 6) newErrors.password = 'Min 6 characters';\n      if (!formData.password_confirmation) newErrors.password_confirmation = 'Required';\n      if (formData.password && formData.password_confirmation && formData.password !== formData.password_confirmation) {\n        newErrors.password_confirmation = 'Passwords do not match';\n      }\n      if (!formData.address) newErrors.address = 'Required';\n      if (!formData.region) newErrors.region = 'Required';\n      if (!formData.municipality) newErrors.municipality = 'Required';\n      if (!formData.nonprofit_category) newErrors.nonprofit_category = 'Required';\n    }\n\n    if (step === 2) {\n      if (!formData.mission_statement) newErrors.mission_statement = 'Required';\n      if (!formData.description) newErrors.description = 'Required';\n    }\n\n    if (step === 3) {\n      if (documents.registration_cert.length === 0)\n        newErrors.registration_cert = 'Registration certificate is required';\n      if (documents.tax_registration.length === 0)\n        newErrors.tax_registration = 'Tax registration is required';\n      if (documents.representative_id.length === 0)\n        newErrors.representative_id = 'Representative ID is required';\n    }\n\n    if (step === 4) {\n      if (!formData.accept_terms) newErrors.accept_terms = 'You must accept the terms';\n      if (!formData.confirm_truthfulness)\n        newErrors.confirm_truthfulness = 'You must confirm truthfulness';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const nextStep = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep((prev) => Math.min(prev + 1, STEPS.length));\n    }\n  };\n\n  const prevStep = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleSaveDraft = async () => {\n    setIsSavingDraft(true);\n    try {\n      // Save draft to localStorage (excluding file objects)\n      localStorage.setItem('charity_draft', JSON.stringify({ \n        formData, \n        hasLogo: !!logo,\n        hasCover: !!coverImage\n      }));\n      toast.success('Draft saved', {\n        description: 'You can continue your registration later.',\n      });\n    } catch (error) {\n      toast.error('Failed to save draft');\n    } finally {\n      setIsSavingDraft(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!validateStep(4)) return;\n\n    setIsLoading(true);\n    try {\n      // Prepare FormData for file upload\n      const submitData = new FormData();\n      \n      // Add all form fields\n      Object.entries(formData).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          submitData.append(key, value.toString());\n        }\n      });\n\n      // Add logo and cover image\n      if (logo) {\n        submitData.append('logo', logo);\n      }\n      if (coverImage) {\n        submitData.append('cover_image', coverImage);\n      }\n\n      // Add document files\n      documents.registration_cert.forEach((file) => {\n        submitData.append('documents[]', file.file);\n        submitData.append('doc_types[]', 'registration_cert');\n      });\n      documents.tax_registration.forEach((file) => {\n        submitData.append('documents[]', file.file);\n        submitData.append('doc_types[]', 'tax_registration');\n      });\n      documents.financial_statement.forEach((file) => {\n        submitData.append('documents[]', file.file);\n        submitData.append('doc_types[]', 'financial_statement');\n      });\n      documents.representative_id.forEach((file) => {\n        submitData.append('documents[]', file.file);\n        submitData.append('doc_types[]', 'representative_id');\n      });\n      documents.additional_docs.forEach((file) => {\n        submitData.append('documents[]', file.file);\n        submitData.append('doc_types[]', 'additional_docs');\n      });\n\n      await authService.registerCharity(submitData as any);\n\n      // Clear draft after successful submission\n      localStorage.removeItem('charity_draft');\n\n      toast.success('Registration submitted!', {\n        description: 'Your application is under review. We\\'ll notify you by email.',\n      });\n\n      // Redirect to login page\n      navigate('/auth/login');\n    } catch (error) {\n      if (error instanceof Error) {\n        toast.error('Registration failed', { description: error.message });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const progress = (currentStep / STEPS.length) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-muted/20 p-4 py-12\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link\n            to=\"/auth/register\"\n            className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to registration options\n          </Link>\n          <h1 className=\"text-3xl font-bold mb-2\">Register your charity</h1>\n          <p className=\"text-muted-foreground\">Complete the steps below to join our platform</p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {STEPS.map((step, idx) => (\n              <div key={step.id} className=\"flex items-center flex-1\">\n                <div className=\"flex flex-col items-center flex-1\">\n                  <div\n                    className={cn(\n                      'w-10 h-10 rounded-full flex items-center justify-center font-semibold transition-colors',\n                      currentStep > step.id && 'bg-primary text-primary-foreground',\n                      currentStep === step.id && 'bg-primary text-primary-foreground ring-4 ring-primary/20',\n                      currentStep < step.id && 'bg-muted text-muted-foreground'\n                    )}\n                  >\n                    {currentStep > step.id ? <Check className=\"h-5 w-5\" /> : step.id}\n                  </div>\n                  <div className=\"mt-2 text-center hidden md:block\">\n                    <p className=\"text-sm font-medium\">{step.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{step.description}</p>\n                  </div>\n                </div>\n                {idx < STEPS.length - 1 && (\n                  <div\n                    className={cn(\n                      'h-1 flex-1 mx-2 transition-colors',\n                      currentStep > step.id ? 'bg-primary' : 'bg-muted'\n                    )}\n                  />\n                )}\n              </div>\n            ))}\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        {/* Form Content */}\n        <div className=\"auth-card\">\n          {/* Step 1: Organization Details */}\n          {currentStep === 1 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold\">Organization Details</h2>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"organization_name\">\n                    Organization name <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id=\"organization_name\"\n                    value={formData.organization_name}\n                    onChange={(e) => handleChange('organization_name', e.target.value)}\n                    className={cn(errors.organization_name && 'border-destructive')}\n                  />\n                  {errors.organization_name && (\n                    <p className=\"text-sm text-destructive\">{errors.organization_name}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"legal_trading_name\">Legal trading name (if different)</Label>\n                  <Input\n                    id=\"legal_trading_name\"\n                    value={formData.legal_trading_name}\n                    onChange={(e) => handleChange('legal_trading_name', e.target.value)}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"registration_number\">\n                    Registration number <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id=\"registration_number\"\n                    value={formData.registration_number}\n                    onChange={(e) => handleChange('registration_number', e.target.value)}\n                    className={cn(errors.registration_number && 'border-destructive')}\n                  />\n                  {errors.registration_number && (\n                    <p className=\"text-sm text-destructive\">{errors.registration_number}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tax_id\">\n                    Tax ID <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id=\"tax_id\"\n                    value={formData.tax_id}\n                    onChange={(e) => handleChange('tax_id', e.target.value)}\n                    className={cn(errors.tax_id && 'border-destructive')}\n                  />\n                  {errors.tax_id && (\n                    <p className=\"text-sm text-destructive\">{errors.tax_id}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">\n                    Password <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password || ''}\n                    onChange={(e) => handleChange('password', e.target.value)}\n                    className={cn(errors.password && 'border-destructive')}\n                    placeholder=\"At least 6 characters\"\n                  />\n                  {errors.password && (\n                    <p className=\"text-sm text-destructive\">{errors.password}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password_confirmation\">\n                    Confirm Password <span className=\"text-destructive\">*</span>\n                  </Label>\n                  <Input\n                    id=\"password_confirmation\"\n                    type=\"password\"\n                    value={formData.password_confirmation || ''}\n                    onChange={(e) => handleChange('password_confirmation', e.target.value)}\n                    className={cn(errors.password_confirmation && 'border-destructive')}\n                  />\n                  {errors.password_confirmation && (\n                    <p className=\"text-sm text-destructive\">{errors.password_confirmation}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label htmlFor=\"website\">Website</Label>\n                  <Input\n                    id=\"website\"\n                    type=\"url\"\n                    value={formData.website}\n                    onChange={(e) => handleChange('website', e.target.value)}\n                    placeholder=\"https://example.org\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h3 className=\"text-lg font-semibold mb-4\">Primary Contact</h3>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contact_person_name\">\n                      Contact person name <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"contact_person_name\"\n                      value={formData.contact_person_name}\n                      onChange={(e) => handleChange('contact_person_name', e.target.value)}\n                      className={cn(errors.contact_person_name && 'border-destructive')}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contact_email\">\n                      Email <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"contact_email\"\n                      type=\"email\"\n                      value={formData.contact_email}\n                      onChange={(e) => handleChange('contact_email', e.target.value)}\n                      className={cn(errors.contact_email && 'border-destructive')}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2 md:col-span-2\">\n                    <Label htmlFor=\"contact_phone\">\n                      Phone <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"contact_phone\"\n                      type=\"tel\"\n                      value={formData.contact_phone}\n                      onChange={(e) => handleChange('contact_phone', e.target.value)}\n                      className={cn(errors.contact_phone && 'border-destructive')}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h3 className=\"text-lg font-semibold mb-4\">Location</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"address\">\n                      Address <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"address\"\n                      value={formData.address}\n                      onChange={(e) => handleChange('address', e.target.value)}\n                      className={cn(errors.address && 'border-destructive')}\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"region\">\n                        Region <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        id=\"region\"\n                        value={formData.region}\n                        onChange={(e) => handleChange('region', e.target.value)}\n                        className={cn(errors.region && 'border-destructive')}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"municipality\">\n                        Municipality <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <Input\n                        id=\"municipality\"\n                        value={formData.municipality}\n                        onChange={(e) => handleChange('municipality', e.target.value)}\n                        className={cn(errors.municipality && 'border-destructive')}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"nonprofit_category\">\n                        Category <span className=\"text-destructive\">*</span>\n                      </Label>\n                      <select\n                        id=\"nonprofit_category\"\n                        value={formData.nonprofit_category}\n                        onChange={(e) => handleChange('nonprofit_category', e.target.value)}\n                        className={cn(\n                          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring',\n                          errors.nonprofit_category && 'border-destructive'\n                        )}\n                      >\n                        <option value=\"\">Select category</option>\n                        {NONPROFIT_CATEGORIES.map((cat) => (\n                          <option key={cat} value={cat}>\n                            {cat}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Profile & Mission */}\n          {currentStep === 2 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold\">Profile & Mission</h2>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mission_statement\">\n                  Mission statement <span className=\"text-destructive\">*</span>\n                </Label>\n                <Textarea\n                  id=\"mission_statement\"\n                  value={formData.mission_statement}\n                  onChange={(e) => handleChange('mission_statement', e.target.value)}\n                  rows={3}\n                  placeholder=\"A brief statement of your organization's purpose and goals...\"\n                  className={cn(errors.mission_statement && 'border-destructive')}\n                />\n                {errors.mission_statement && (\n                  <p className=\"text-sm text-destructive\">{errors.mission_statement}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">\n                  Detailed description <span className=\"text-destructive\">*</span>\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleChange('description', e.target.value)}\n                  rows={6}\n                  placeholder=\"Tell us more about your organization, programs, and impact...\"\n                  className={cn(errors.description && 'border-destructive')}\n                />\n                {errors.description && (\n                  <p className=\"text-sm text-destructive\">{errors.description}</p>\n                )}\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <h3 className=\"text-lg font-semibold mb-4\">Media (Optional)</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Add your organization's logo and cover image to enhance your profile.\n                </p>\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {/* Logo Upload */}\n                  <div className=\"space-y-2\">\n                    <Label>Organization Logo</Label>\n                    <div className=\"border-2 border-dashed rounded-lg p-4 text-center\">\n                      {logoPreview ? (\n                        <div className=\"space-y-2\">\n                          <img src={logoPreview} alt=\"Logo preview\" className=\"h-32 w-32 object-cover rounded-lg mx-auto\" />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setLogo(null);\n                              setLogoPreview(null);\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ) : (\n                        <div>\n                          <input\n                            type=\"file\"\n                            id=\"logo-upload\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={handleLogoUpload}\n                          />\n                          <label htmlFor=\"logo-upload\" className=\"cursor-pointer\">\n                            <div className=\"flex flex-col items-center gap-2\">\n                              <div className=\"h-16 w-16 rounded-full bg-muted flex items-center justify-center\">\n                                <Save className=\"h-8 w-8 text-muted-foreground\" />\n                              </div>\n                              <p className=\"text-sm font-medium\">Upload Logo</p>\n                              <p className=\"text-xs text-muted-foreground\">PNG, JPG up to 2MB</p>\n                            </div>\n                          </label>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Cover Image Upload */}\n                  <div className=\"space-y-2\">\n                    <Label>Cover Image</Label>\n                    <div className=\"border-2 border-dashed rounded-lg p-4 text-center\">\n                      {coverPreview ? (\n                        <div className=\"space-y-2\">\n                          <img src={coverPreview} alt=\"Cover preview\" className=\"h-32 w-full object-cover rounded-lg\" />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setCoverImage(null);\n                              setCoverPreview(null);\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ) : (\n                        <div>\n                          <input\n                            type=\"file\"\n                            id=\"cover-upload\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={handleCoverUpload}\n                          />\n                          <label htmlFor=\"cover-upload\" className=\"cursor-pointer\">\n                            <div className=\"flex flex-col items-center gap-2\">\n                              <div className=\"h-16 w-16 rounded-full bg-muted flex items-center justify-center\">\n                                <Save className=\"h-8 w-8 text-muted-foreground\" />\n                              </div>\n                              <p className=\"text-sm font-medium\">Upload Cover</p>\n                              <p className=\"text-xs text-muted-foreground\">PNG, JPG up to 5MB</p>\n                            </div>\n                          </label>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Documents */}\n          {currentStep === 3 && (\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\">Documents & Compliance</h2>\n                <p className=\"text-muted-foreground\">\n                  Upload the required documents. All files are securely processed with SHA-256\n                  checksums.\n                </p>\n              </div>\n\n              <FileUploader\n                label=\"Registration certificate / SEC equivalent\"\n                description=\"Official registration document from the relevant authority\"\n                required\n                files={documents.registration_cert}\n                onChange={(files) =>\n                  setDocuments((prev) => ({ ...prev, registration_cert: files }))\n                }\n              />\n              {errors.registration_cert && (\n                <p className=\"text-sm text-destructive -mt-2\">{errors.registration_cert}</p>\n              )}\n\n              <FileUploader\n                label=\"Tax registration (BIR) or Tax ID\"\n                description=\"Tax registration document or proof of tax-exempt status\"\n                required\n                files={documents.tax_registration}\n                onChange={(files) =>\n                  setDocuments((prev) => ({ ...prev, tax_registration: files }))\n                }\n              />\n              {errors.tax_registration && (\n                <p className=\"text-sm text-destructive -mt-2\">{errors.tax_registration}</p>\n              )}\n\n              <FileUploader\n                label=\"Latest audited financial statement\"\n                description=\"Most recent financial report or accountant's summary (if available)\"\n                files={documents.financial_statement}\n                onChange={(files) =>\n                  setDocuments((prev) => ({ ...prev, financial_statement: files }))\n                }\n              />\n\n              <FileUploader\n                label=\"Representative ID (Government-issued ID)\"\n                description=\"Valid government ID of the authorized representative\"\n                required\n                files={documents.representative_id}\n                onChange={(files) =>\n                  setDocuments((prev) => ({ ...prev, representative_id: files }))\n                }\n              />\n              {errors.representative_id && (\n                <p className=\"text-sm text-destructive -mt-2\">{errors.representative_id}</p>\n              )}\n\n              <FileUploader\n                label=\"Additional supporting documents\"\n                description=\"Any other relevant documents to support your application\"\n                multiple\n                files={documents.additional_docs}\n                onChange={(files) =>\n                  setDocuments((prev) => ({ ...prev, additional_docs: files }))\n                }\n              />\n            </div>\n          )}\n\n          {/* Step 4: Review */}\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold\">Review & Submit</h2>\n\n              <div className=\"space-y-6\">\n                <div className=\"p-4 bg-muted/50 rounded-lg space-y-3\">\n                  <h3 className=\"font-semibold\">Organization Details</h3>\n                  <dl className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <dt className=\"text-muted-foreground\">Organization:</dt>\n                    <dd className=\"font-medium\">{formData.organization_name}</dd>\n                    <dt className=\"text-muted-foreground\">Registration #:</dt>\n                    <dd className=\"font-medium\">{formData.registration_number}</dd>\n                    <dt className=\"text-muted-foreground\">Tax ID:</dt>\n                    <dd className=\"font-medium\">{formData.tax_id}</dd>\n                    <dt className=\"text-muted-foreground\">Category:</dt>\n                    <dd className=\"font-medium\">{formData.nonprofit_category}</dd>\n                  </dl>\n                </div>\n\n                <div className=\"p-4 bg-muted/50 rounded-lg space-y-3\">\n                  <h3 className=\"font-semibold\">Contact Information</h3>\n                  <dl className=\"grid grid-cols-2 gap-2 text-sm\">\n                    <dt className=\"text-muted-foreground\">Contact person:</dt>\n                    <dd className=\"font-medium\">{formData.contact_person_name}</dd>\n                    <dt className=\"text-muted-foreground\">Email:</dt>\n                    <dd className=\"font-medium\">{formData.contact_email}</dd>\n                    <dt className=\"text-muted-foreground\">Phone:</dt>\n                    <dd className=\"font-medium\">{formData.contact_phone}</dd>\n                  </dl>\n                </div>\n\n                <div className=\"p-4 bg-muted/50 rounded-lg space-y-3\">\n                  <h3 className=\"font-semibold\">Uploaded Documents</h3>\n                  <ul className=\"text-sm space-y-1\">\n                    <li className=\"flex items-center gap-2\">\n                      <Check className=\"h-4 w-4 text-green-600\" />\n                      Registration certificate ({documents.registration_cert.length})\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <Check className=\"h-4 w-4 text-green-600\" />\n                      Tax registration ({documents.tax_registration.length})\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <Check className=\"h-4 w-4 text-green-600\" />\n                      Representative ID ({documents.representative_id.length})\n                    </li>\n                    {documents.financial_statement.length > 0 && (\n                      <li className=\"flex items-center gap-2\">\n                        <Check className=\"h-4 w-4 text-green-600\" />\n                        Financial statement ({documents.financial_statement.length})\n                      </li>\n                    )}\n                    {documents.additional_docs.length > 0 && (\n                      <li className=\"flex items-center gap-2\">\n                        <Check className=\"h-4 w-4 text-green-600\" />\n                        Additional documents ({documents.additional_docs.length})\n                      </li>\n                    )}\n                  </ul>\n                </div>\n\n                <div className=\"space-y-4 pt-4 border-t\">\n                  <div className=\"flex items-start space-x-2\">\n                    <Checkbox\n                      id=\"confirm_truthfulness\"\n                      checked={formData.confirm_truthfulness}\n                      onCheckedChange={(checked) =>\n                        handleChange('confirm_truthfulness', checked === true)\n                      }\n                      className={cn(errors.confirm_truthfulness && 'border-destructive')}\n                    />\n                    <Label htmlFor=\"confirm_truthfulness\" className=\"font-normal cursor-pointer\">\n                      I confirm that all information provided is truthful and accurate to the best\n                      of my knowledge. <span className=\"text-destructive\">*</span>\n                    </Label>\n                  </div>\n                  {errors.confirm_truthfulness && (\n                    <p className=\"text-sm text-destructive ml-6\">{errors.confirm_truthfulness}</p>\n                  )}\n\n                  <div className=\"flex items-start space-x-2\">\n                    <Checkbox\n                      id=\"accept_terms\"\n                      checked={formData.accept_terms}\n                      onCheckedChange={(checked) => handleChange('accept_terms', checked === true)}\n                      className={cn(errors.accept_terms && 'border-destructive')}\n                    />\n                    <Label htmlFor=\"accept_terms\" className=\"font-normal cursor-pointer\">\n                      I accept the{' '}\n                      <Link to=\"/terms\" className=\"text-primary hover:underline\">\n                        Terms of Service\n                      </Link>{' '}\n                      and{' '}\n                      <Link to=\"/privacy\" className=\"text-primary hover:underline\">\n                        Privacy Policy\n                      </Link>\n                      <span className=\"text-destructive ml-1\">*</span>\n                    </Label>\n                  </div>\n                  {errors.accept_terms && (\n                    <p className=\"text-sm text-destructive ml-6\">{errors.accept_terms}</p>\n                  )}\n                </div>\n\n                <div className=\"p-4 bg-accent/50 border border-accent rounded-lg\">\n                  <p className=\"text-sm\">\n                    <strong>Next steps:</strong> After submission, your application will be\n                    reviewed by our team. This typically takes 3-5 business days. We'll notify you\n                    by email once your review is complete.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex items-center justify-between pt-6 border-t mt-8\">\n            <div className=\"flex gap-2\">\n              {currentStep > 1 && (\n                <Button type=\"button\" variant=\"outline\" onClick={prevStep}>\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back\n                </Button>\n              )}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={handleSaveDraft}\n                disabled={isSavingDraft}\n              >\n                {isSavingDraft ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"mr-2 h-4 w-4\" />\n                    Save draft\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {currentStep < STEPS.length ? (\n              <Button type=\"button\" onClick={nextStep}>\n                Continue\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button type=\"button\" onClick={handleSubmit} disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Submitting...\n                  </>\n                ) : (\n                  'Submit application'\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Sign In Link */}\n        <p className=\"text-center mt-6 text-sm text-muted-foreground\">\n          Already have an account?{' '}\n          <Link to=\"/auth/login\" className=\"text-primary font-medium hover:underline\">\n            Sign in\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\RegisterDonor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1304,1307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1304,1307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2403,2406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2403,2406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ArrowLeft, Eye, EyeOff, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { PasswordStrengthMeter } from '@/components/auth/PasswordStrengthMeter';\nimport { authService, type DonorRegistrationData } from '@/services/auth';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\nexport default function RegisterDonor() {\n  const navigate = useNavigate();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const [formData, setFormData] = useState<DonorRegistrationData>({\n    full_name: '',\n    email: '',\n    password: '',\n    password_confirmation: '',\n    phone: '',\n    address: '',\n    preferred_contact_method: 'email',\n    anonymous_giving: false,\n    accept_terms: false,\n  });\n\n  const handleChange = (field: string, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (formData.password !== formData.password_confirmation) {\n      newErrors.password_confirmation = 'Passwords do not match';\n    }\n\n    if (!formData.accept_terms) {\n      newErrors.accept_terms = 'You must accept the terms and privacy policy';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (isLoading) return; // guard against double submit\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      await authService.registerDonor(formData);\n\n      toast.success('Registration successful!', {\n        description: 'You can now login with your credentials.',\n      });\n\n      // Redirect to login page after successful registration\n      navigate('/auth/login');\n    } catch (error: any) {\n      // Parse 422 validation errors from backend if available\n      const apiErrors = error?.response?.data?.errors as Record<string, string[]> | undefined;\n      if (apiErrors) {\n        const flatErrors: Record<string, string> = {};\n        Object.entries(apiErrors).forEach(([k, v]) => { flatErrors[k] = v?.[0] ?? 'Invalid'; });\n        setErrors(flatErrors);\n        toast.error('Registration failed', { description: Object.values(flatErrors)[0] });\n      } else if (error instanceof Error) {\n        setErrors({ general: error.message });\n        toast.error('Registration failed', { description: error.message });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-background to-muted/20 p-4 py-12\">\n      <div className=\"w-full max-w-2xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link\n            to=\"/auth/register\"\n            className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to registration options\n          </Link>\n          <h1 className=\"text-3xl font-bold mb-2\">Create donor account</h1>\n          <p className=\"text-muted-foreground\">\n            Join our community and start making a difference\n          </p>\n        </div>\n\n        {/* Form Card */}\n        <div className=\"auth-card\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {errors.general && (\n              <div className=\"p-3 text-sm bg-destructive/10 text-destructive border border-destructive/20 rounded-lg\">\n                {errors.general}\n              </div>\n            )}\n\n            {/* Basic Info */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Basic Information</h3>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"full_name\">\n                  Full name <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"full_name\"\n                  value={formData.full_name}\n                  onChange={(e) => handleChange('full_name', e.target.value)}\n                  required\n                  placeholder=\"John Doe\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">\n                  Email address <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleChange('email', e.target.value)}\n                  required\n                  placeholder=\"you@example.com\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone (optional)</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleChange('phone', e.target.value)}\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address (optional)</Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => handleChange('address', e.target.value)}\n                  placeholder=\"123 Main St, City, State ZIP\"\n                />\n              </div>\n            </div>\n\n            {/* Password */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Security</h3>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">\n                  Password <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={formData.password}\n                    onChange={(e) => handleChange('password', e.target.value)}\n                    required\n                    className=\"pr-10\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                    tabIndex={-1}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <PasswordStrengthMeter password={formData.password} />\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password_confirmation\">\n                  Confirm password <span className=\"text-destructive\">*</span>\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password_confirmation\"\n                    type={showConfirmPassword ? 'text' : 'password'}\n                    value={formData.password_confirmation}\n                    onChange={(e) => handleChange('password_confirmation', e.target.value)}\n                    required\n                    className={cn(errors.password_confirmation && 'border-destructive', 'pr-10')}\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground\"\n                    tabIndex={-1}\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </button>\n                </div>\n                {errors.password_confirmation && (\n                  <p className=\"text-sm text-destructive\">{errors.password_confirmation}</p>\n                )}\n              </div>\n            </div>\n\n            {/* Preferences */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Preferences</h3>\n\n              <div className=\"space-y-3\">\n                <Label>Preferred contact method</Label>\n                <RadioGroup\n                  value={formData.preferred_contact_method}\n                  onValueChange={(value) =>\n                    handleChange('preferred_contact_method', value as 'email' | 'sms')\n                  }\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"email\" id=\"email_contact\" />\n                    <Label htmlFor=\"email_contact\" className=\"font-normal cursor-pointer\">\n                      Email\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"sms\" id=\"sms_contact\" />\n                    <Label htmlFor=\"sms_contact\" className=\"font-normal cursor-pointer\">\n                      SMS\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"anonymous_giving\"\n                  checked={formData.anonymous_giving}\n                  onCheckedChange={(checked) => handleChange('anonymous_giving', checked === true)}\n                />\n                <Label htmlFor=\"anonymous_giving\" className=\"font-normal cursor-pointer\">\n                  Enable anonymous giving by default\n                </Label>\n              </div>\n            </div>\n\n            {/* Terms */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-2\">\n                <Checkbox\n                  id=\"accept_terms\"\n                  checked={formData.accept_terms}\n                  onCheckedChange={(checked) => handleChange('accept_terms', checked === true)}\n                  className={cn(errors.accept_terms && 'border-destructive')}\n                />\n                <div className=\"space-y-1\">\n                  <Label htmlFor=\"accept_terms\" className=\"font-normal cursor-pointer\">\n                    I agree to the{' '}\n                    <Link to=\"/terms\" className=\"text-primary hover:underline\">\n                      Terms of Service\n                    </Link>{' '}\n                    and{' '}\n                    <Link to=\"/privacy\" className=\"text-primary hover:underline\">\n                      Privacy Policy\n                    </Link>\n                    <span className=\"text-destructive ml-1\">*</span>\n                  </Label>\n                  {errors.accept_terms && (\n                    <p className=\"text-sm text-destructive\">{errors.accept_terms}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Submit */}\n            <Button type=\"submit\" className=\"w-full\" size=\"lg\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                'Create account'\n              )}\n            </Button>\n          </form>\n        </div>\n\n        {/* Sign In Link */}\n        <p className=\"text-center mt-6 text-sm text-muted-foreground\">\n          Already have an account?{' '}\n          <Link to=\"/auth/login\" className=\"text-primary font-medium hover:underline\">\n            Sign in\n          </Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\RegistrationStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\ResetPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\auth\\VerifyEmail.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\AuditLogsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLogs'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadLogs, page]","fix":{"range":[1783,1789],"text":"[loadLogs, page]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { listAuditLogs } from \"@/services/apiCharity\";\nimport type { AuditLogEntry } from \"@/types/charity\";\nimport { ChevronDown, ChevronRight, Search, Eye } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Audit Logs Page\n * Paginated list of audit events with filters and expandable details\n */\nconst AuditLogsPage = () => {\n  const [logs, setLogs] = useState<AuditLogEntry[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [filters, setFilters] = useState({\n    userId: \"\",\n    action: \"\",\n    entityType: \"all\",\n    startDate: \"\",\n    endDate: \"\",\n  });\n  const [expandedIds, setExpandedIds] = useState<Set<string>>(new Set());\n  const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n  const [selectedLog, setSelectedLog] = useState<AuditLogEntry | null>(null);\n\n  useEffect(() => {\n    loadLogs();\n  }, [page]);\n\n  const loadLogs = async () => {\n    try {\n      setLoading(true);\n      const cleanFilters = {\n        ...filters,\n        entityType: filters.entityType === \"all\" ? undefined : filters.entityType,\n      };\n      const response = await listAuditLogs({\n        page,\n        pageSize: 50,\n        ...cleanFilters,\n        sortBy: \"timestamp\",\n        sortOrder: \"desc\",\n      });\n      setLogs(response.data);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load logs\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFilter = () => {\n    setPage(1);\n    loadLogs();\n  };\n\n  const toggleExpand = (id: string) => {\n    setExpandedIds((prev) => {\n      const next = new Set(prev);\n      if (next.has(id)) {\n        next.delete(id);\n      } else {\n        next.add(id);\n      }\n      return next;\n    });\n  };\n\n  const getEntityBadge = (entityType: string) => {\n    const variants: Record<string, string> = {\n      donation: \"bg-success/10 text-success\",\n      campaign: \"bg-primary/10 text-primary\",\n      document: \"bg-accent/10 text-accent-foreground\",\n      user: \"bg-warning/10 text-warning\",\n    };\n    return (\n      <Badge variant=\"outline\" className={variants[entityType] || \"\"}>\n        {entityType}\n      </Badge>\n    );\n  };\n\n  if (loading && logs.length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Audit Logs</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Filters */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-md\">\n            <div>\n              <Label htmlFor=\"filter-user\">User ID</Label>\n              <Input\n                id=\"filter-user\"\n                value={filters.userId}\n                onChange={(e) =>\n                  setFilters({ ...filters, userId: e.target.value })\n                }\n                placeholder=\"Filter by user...\"\n                className=\"mt-sm\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"filter-action\">Action</Label>\n              <Input\n                id=\"filter-action\"\n                value={filters.action}\n                onChange={(e) =>\n                  setFilters({ ...filters, action: e.target.value })\n                }\n                placeholder=\"e.g., create, update...\"\n                className=\"mt-sm\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"filter-entity\">Entity Type</Label>\n              <Select\n                value={filters.entityType}\n                onValueChange={(value) =>\n                  setFilters({ ...filters, entityType: value })\n                }\n              >\n                <SelectTrigger id=\"filter-entity\" className=\"mt-sm\">\n                  <SelectValue placeholder=\"All types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All types</SelectItem>\n                  <SelectItem value=\"donation\">Donation</SelectItem>\n                  <SelectItem value=\"campaign\">Campaign</SelectItem>\n                  <SelectItem value=\"document\">Document</SelectItem>\n                  <SelectItem value=\"user\">User</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"filter-start\">Start Date</Label>\n              <Input\n                id=\"filter-start\"\n                type=\"date\"\n                value={filters.startDate}\n                onChange={(e) =>\n                  setFilters({ ...filters, startDate: e.target.value })\n                }\n                className=\"mt-sm\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"filter-end\">End Date</Label>\n              <Input\n                id=\"filter-end\"\n                type=\"date\"\n                value={filters.endDate}\n                onChange={(e) =>\n                  setFilters({ ...filters, endDate: e.target.value })\n                }\n                className=\"mt-sm\"\n              />\n            </div>\n            <div className=\"flex items-end\">\n              <Button onClick={handleFilter} className=\"w-full\">\n                <Search className=\"h-4 w-4 mr-xs\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n\n          {/* Table */}\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-8\"></TableHead>\n                  <TableHead>Timestamp</TableHead>\n                  <TableHead>User</TableHead>\n                  <TableHead>Action</TableHead>\n                  <TableHead>Entity</TableHead>\n                  <TableHead>Entity ID</TableHead>\n                  <TableHead className=\"text-right\">Details</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {logs.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-lg\">\n                      <p className=\"text-muted-foreground\">No audit logs found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  logs.map((log) => (\n                    <>\n                      <TableRow key={log.id} className=\"cursor-pointer hover:bg-muted/30\">\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleExpand(log.id)}\n                          >\n                            {expandedIds.has(log.id) ? (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronRight className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </TableCell>\n                        <TableCell className=\"text-sm\">\n                          {new Date(log.timestamp).toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"font-medium\">{log.userName}</TableCell>\n                        <TableCell className=\"capitalize\">{log.action}</TableCell>\n                        <TableCell>{getEntityBadge(log.entityType)}</TableCell>\n                        <TableCell className=\"font-mono text-xs\">\n                          {log.entityId.slice(0, 8)}...\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedLog(log);\n                              setDetailDialogOpen(true);\n                            }}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                      {expandedIds.has(log.id) && (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"bg-muted/20\">\n                            <div className=\"py-sm px-md space-y-xs text-sm\">\n                              {log.ipAddress && (\n                                <p>\n                                  <span className=\"text-muted-foreground\">IP:</span>{\" \"}\n                                  {log.ipAddress}\n                                </p>\n                              )}\n                              <p>\n                                <span className=\"text-muted-foreground\">Details:</span>\n                              </p>\n                              <pre className=\"text-xs bg-muted p-sm rounded overflow-auto\">\n                                {JSON.stringify(log.details, null, 2)}\n                              </pre>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detail Dialog */}\n      {selectedLog && (\n        <Dialog open={detailDialogOpen} onOpenChange={setDetailDialogOpen}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>Audit Log Details</DialogTitle>\n              <DialogDescription>\n                {new Date(selectedLog.timestamp).toLocaleString()}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-md py-md\">\n              <div className=\"grid grid-cols-2 gap-md text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">User:</p>\n                  <p className=\"font-medium\">{selectedLog.userName}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Action:</p>\n                  <p className=\"font-medium capitalize\">{selectedLog.action}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Entity:</p>\n                  {getEntityBadge(selectedLog.entityType)}\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Entity ID:</p>\n                  <code className=\"text-xs font-mono\">{selectedLog.entityId}</code>\n                </div>\n                {selectedLog.ipAddress && (\n                  <div>\n                    <p className=\"text-muted-foreground\">IP Address:</p>\n                    <p className=\"font-medium\">{selectedLog.ipAddress}</p>\n                  </div>\n                )}\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-sm\">Event Details:</p>\n                <pre className=\"text-xs bg-muted p-md rounded overflow-auto max-h-96\">\n                  {JSON.stringify(selectedLog.details, null, 2)}\n                </pre>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setDetailDialogOpen(false)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default AuditLogsPage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CampaignDetailPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCampaign'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadCampaign]","fix":{"range":[1505,1509],"text":"[id, loadCampaign]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  getCampaign,\n  pauseCampaign,\n  resumeCampaign,\n  closeCampaign,\n} from \"@/services/apiCharity\";\nimport type { CampaignDetail } from \"@/types/charity\";\nimport { Edit, Pause, Play, StopCircle, Download, AlertCircle } from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Campaign Detail Page\n * Shows campaign info, progress, media gallery, donor breakdown, and actions\n */\nconst CampaignDetailPage = () => {\n  const { id } = useParams<{ id: string }>();\n  const [campaign, setCampaign] = useState<CampaignDetail | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<\"pause\" | \"resume\" | \"close\" | null>(null);\n\n  useEffect(() => {\n    if (id) {\n      loadCampaign();\n    }\n  }, [id]);\n\n  const loadCampaign = async () => {\n    if (!id) return;\n    try {\n      setLoading(true);\n      const data = await getCampaign(id);\n      setCampaign(data);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load campaign\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAction = async () => {\n    if (!id || !actionType) return;\n    try {\n      if (actionType === \"pause\") {\n        await pauseCampaign(id);\n        toast({ title: \"Success\", description: \"Campaign paused\" });\n      } else if (actionType === \"resume\") {\n        await resumeCampaign(id);\n        toast({ title: \"Success\", description: \"Campaign resumed\" });\n      } else if (actionType === \"close\") {\n        await closeCampaign(id);\n        toast({ title: \"Success\", description: \"Campaign closed\" });\n      }\n      loadCampaign();\n      setActionDialogOpen(false);\n      setActionType(null);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Action failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-lg space-y-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-64\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-48 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!campaign) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-2xl\">\n            <AlertCircle className=\"h-12 w-12 text-destructive mb-md\" />\n            <p className=\"text-lg font-medium\">Campaign not found</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const progress = (campaign.raised / campaign.goal) * 100;\n  const COLORS = [\"hsl(var(--primary))\", \"hsl(var(--accent))\", \"hsl(var(--success))\"];\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"text-3xl mb-sm\">{campaign.title}</CardTitle>\n              <Badge\n                variant=\"outline\"\n                className={\n                  campaign.status === \"active\"\n                    ? \"bg-success/10 text-success\"\n                    : campaign.status === \"paused\"\n                    ? \"bg-warning/10 text-warning\"\n                    : \"bg-muted text-muted-foreground\"\n                }\n              >\n                {campaign.status}\n              </Badge>\n            </div>\n            <div className=\"flex gap-sm\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Edit className=\"h-4 w-4 mr-xs\" />\n                Edit\n              </Button>\n              {campaign.status === \"active\" && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setActionType(\"pause\");\n                    setActionDialogOpen(true);\n                  }}\n                >\n                  <Pause className=\"h-4 w-4 mr-xs\" />\n                  Pause\n                </Button>\n              )}\n              {campaign.status === \"paused\" && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setActionType(\"resume\");\n                    setActionDialogOpen(true);\n                  }}\n                >\n                  <Play className=\"h-4 w-4 mr-xs\" />\n                  Resume\n                </Button>\n              )}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setActionType(\"close\");\n                  setActionDialogOpen(true);\n                }}\n              >\n                <StopCircle className=\"h-4 w-4 mr-xs\" />\n                Close\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <div className=\"space-y-sm\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Progress</span>\n              <span className=\"font-medium\">\n                ${campaign.raised.toLocaleString()} / ${campaign.goal.toLocaleString()}\n              </span>\n            </div>\n            <Progress value={progress} className=\"h-3\" />\n            <p className=\"text-xs text-muted-foreground text-right\">\n              {progress.toFixed(1)}% of goal reached\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid gap-lg lg:grid-cols-2\">\n        {/* Description & Media */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Campaign Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            {campaign.mediaGallery && campaign.mediaGallery.length > 0 && (\n              <div className=\"grid grid-cols-2 gap-sm\">\n                {campaign.mediaGallery.slice(0, 4).map((url, idx) => (\n                  <img\n                    key={idx}\n                    src={url}\n                    alt={`Campaign media ${idx + 1}`}\n                    className=\"w-full h-32 object-cover rounded-md border border-border\"\n                  />\n                ))}\n              </div>\n            )}\n            <div>\n              <h3 className=\"font-medium mb-sm\">Description</h3>\n              <p className=\"text-sm text-muted-foreground\">{campaign.description}</p>\n            </div>\n            <div className=\"grid grid-cols-2 gap-md pt-md border-t border-border\">\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Deadline</p>\n                <p className=\"text-sm font-medium\">\n                  {new Date(campaign.deadline).toLocaleDateString()}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-xs text-muted-foreground\">Created</p>\n                <p className=\"text-sm font-medium\">\n                  {new Date(campaign.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Donor Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Donor Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {campaign.donorBreakdown && campaign.donorBreakdown.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <PieChart>\n                  <Pie\n                    data={campaign.donorBreakdown}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={(entry) => `${entry.range}: ${entry.count}`}\n                    outerRadius={80}\n                    fill=\"hsl(var(--primary))\"\n                    dataKey=\"totalAmount\"\n                  >\n                    {campaign.donorBreakdown.map((_, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            ) : (\n              <p className=\"text-sm text-muted-foreground text-center py-lg\">\n                No donor data available\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Donations */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Recent Donations</CardTitle>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-xs\" />\n              Export\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-md\">\n            {campaign.recentDonations && campaign.recentDonations.length > 0 ? (\n              campaign.recentDonations.map((donation) => (\n                <div\n                  key={donation.id}\n                  className=\"flex items-center justify-between border-b border-border pb-md last:border-0 last:pb-0\"\n                >\n                  <div>\n                    <p className=\"font-medium\">{donation.donorName}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(donation.submittedAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">${donation.amount.toLocaleString()}</p>\n                    <Badge\n                      variant=\"outline\"\n                      className={\n                        donation.status === \"confirmed\"\n                          ? \"bg-success/10 text-success\"\n                          : donation.status === \"pending\"\n                          ? \"bg-warning/10 text-warning\"\n                          : \"bg-destructive/10 text-destructive\"\n                      }\n                    >\n                      {donation.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-sm text-muted-foreground text-center py-lg\">\n                No donations yet\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Confirmation Dialog */}\n      <AlertDialog open={actionDialogOpen} onOpenChange={setActionDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>\n              {actionType === \"pause\"\n                ? \"Pause Campaign\"\n                : actionType === \"resume\"\n                ? \"Resume Campaign\"\n                : \"Close Campaign\"}\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              {actionType === \"pause\"\n                ? \"This will temporarily stop accepting new donations.\"\n                : actionType === \"resume\"\n                ? \"This will resume accepting donations.\"\n                : \"This action will permanently close the campaign and stop all donations.\"}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleAction}>Confirm</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default CampaignDetailPage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CampaignManagement.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCampaigns'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadCampaigns]","fix":{"range":[2214,2216],"text":"[loadCampaigns]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3112,3115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3112,3115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4224,4227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4224,4227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5701,5704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5701,5704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6182,6185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6182,6185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Plus, Edit, Trash2, Eye, Calendar, Target } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { campaignService, Campaign as ApiCampaign } from \"@/services/campaigns\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface Campaign {\n  id: number;\n  title: string;\n  description: string;\n  target_amount: number;\n  current_amount: number;\n  start_date: string;\n  end_date: string;\n  status: 'draft' | 'published' | 'closed' | 'archived';\n  donation_type: 'one_time' | 'recurring';\n  cover_image_path?: string;\n  charity_id: number;\n}\n\nexport default function CampaignManagement() {\n  const { user } = useAuth();\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [selectedCampaign, setSelectedCampaign] = useState<Campaign | null>(null);\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    targetAmount: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    donationType: \"one_time\" as \"one_time\" | \"recurring\",\n    status: \"draft\" as \"draft\" | \"published\" | \"closed\" | \"archived\",\n    image: null as File | null\n  });\n\n  useEffect(() => {\n    loadCampaigns();\n  }, []);\n\n  const loadCampaigns = async () => {\n    try {\n      if (!user?.charity?.id) {\n        toast.error(\"No charity found for your account\");\n        setLoading(false);\n        return;\n      }\n\n      const response = await campaignService.getCampaigns(user.charity.id);\n      const formattedCampaigns = response.data.map((campaign: ApiCampaign) => ({\n        id: campaign.id,\n        title: campaign.title,\n        description: campaign.description || \"\",\n        target_amount: campaign.target_amount || 0,\n        current_amount: campaign.current_amount || 0,\n        start_date: campaign.start_date || \"\",\n        end_date: campaign.end_date || \"\",\n        status: campaign.status,\n        donation_type: campaign.donation_type,\n        cover_image_path: campaign.cover_image_path,\n        charity_id: campaign.charity_id\n      }));\n      setCampaigns(formattedCampaigns);\n    } catch (error: any) {\n      console.error(\"Failed to load campaigns:\", error);\n      toast.error(error.response?.data?.message || \"Failed to load campaigns\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreate = async () => {\n    try {\n      if (!user?.charity?.id) {\n        toast.error(\"No charity found for your account\");\n        return;\n      }\n\n      if (!formData.title || !formData.targetAmount) {\n        toast.error(\"Please fill in all required fields\");\n        return;\n      }\n\n      setSubmitting(true);\n\n      const data = {\n        title: formData.title,\n        description: formData.description,\n        target_amount: parseFloat(formData.targetAmount),\n        start_date: formData.startDate,\n        end_date: formData.endDate,\n        donation_type: formData.donationType,\n        status: formData.status,\n        cover_image: formData.image || undefined\n      };\n\n      await campaignService.createCampaign(user.charity.id, data);\n      toast.success(\"Campaign created successfully\");\n      setIsCreateDialogOpen(false);\n      resetForm();\n      loadCampaigns();\n    } catch (error: any) {\n      console.error(\"Failed to create campaign:\", error);\n      toast.error(error.response?.data?.message || \"Failed to create campaign\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleEdit = (campaign: Campaign) => {\n    setSelectedCampaign(campaign);\n    setFormData({\n      title: campaign.title,\n      description: campaign.description,\n      targetAmount: campaign.target_amount.toString(),\n      startDate: campaign.start_date,\n      endDate: campaign.end_date,\n      donationType: campaign.donation_type,\n      status: campaign.status,\n      image: null\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdate = async () => {\n    try {\n      if (!selectedCampaign) return;\n\n      if (!formData.title || !formData.targetAmount) {\n        toast.error(\"Please fill in all required fields\");\n        return;\n      }\n\n      setSubmitting(true);\n\n      const data = {\n        title: formData.title,\n        description: formData.description,\n        target_amount: parseFloat(formData.targetAmount),\n        start_date: formData.startDate,\n        end_date: formData.endDate,\n        donation_type: formData.donationType,\n        status: formData.status,\n        cover_image: formData.image || undefined\n      };\n\n      await campaignService.updateCampaign(selectedCampaign.id, data);\n      toast.success(\"Campaign updated successfully\");\n      setIsEditDialogOpen(false);\n      resetForm();\n      loadCampaigns();\n    } catch (error: any) {\n      console.error(\"Failed to update campaign:\", error);\n      toast.error(error.response?.data?.message || \"Failed to update campaign\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    if (!confirm(\"Are you sure you want to delete this campaign?\")) return;\n\n    try {\n      await campaignService.deleteCampaign(id);\n      toast.success(\"Campaign deleted successfully\");\n      loadCampaigns();\n    } catch (error: any) {\n      console.error(\"Failed to delete campaign:\", error);\n      toast.error(error.response?.data?.message || \"Failed to delete campaign\");\n    }\n  };\n\n  const handleView = (campaign: Campaign) => {\n    setSelectedCampaign(campaign);\n    setIsViewDialogOpen(true);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      targetAmount: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      donationType: \"one_time\",\n      status: \"draft\" as \"draft\" | \"published\" | \"closed\" | \"archived\",\n      image: null\n    });\n    setSelectedCampaign(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'published':\n        return <Badge className=\"bg-green-600\">Published</Badge>;\n      case 'closed':\n        return <Badge className=\"bg-blue-600\">Closed</Badge>;\n      case 'draft':\n        return <Badge variant=\"secondary\">Draft</Badge>;\n      case 'archived':\n        return <Badge variant=\"outline\">Archived</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const getDonationTypeBadge = (type: string) => {\n    return type === 'recurring' \n      ? <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">Recurring</Badge>\n      : <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">One-Time</Badge>;\n  };\n\n  const getProgress = (current: number, target: number) => {\n    return (current / target) * 100;\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Campaign Management</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Create and manage your fundraising campaigns\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateDialogOpen(true)}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Campaign\n        </Button>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{campaigns.length}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Published Campaigns</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {campaigns.filter(c => c.status === 'published').length}\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Raised</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ₱{campaigns.reduce((sum, c) => sum + c.current_amount, 0).toLocaleString()}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Campaigns Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Campaigns</CardTitle>\n          <CardDescription>Manage your fundraising campaigns</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"py-12 text-center text-muted-foreground\">Loading campaigns...</div>\n          ) : campaigns.length === 0 ? (\n            <div className=\"py-12 text-center text-muted-foreground\">No campaigns yet. Create your first campaign to start fundraising!</div>\n          ) : (\n            <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Campaign</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Target</TableHead>\n                <TableHead>Progress</TableHead>\n                <TableHead>Duration</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {campaigns.map((campaign) => (\n                <TableRow key={campaign.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{campaign.title}</p>\n                      <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                        {campaign.description}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>{getDonationTypeBadge(campaign.donation_type)}</TableCell>\n                  <TableCell>₱{campaign.target_amount.toLocaleString()}</TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <Progress value={getProgress(campaign.current_amount, campaign.target_amount)} />\n                      <p className=\"text-xs text-muted-foreground\">\n                        ₱{campaign.current_amount.toLocaleString()} / ₱{campaign.target_amount.toLocaleString()}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {campaign.start_date && <p>{new Date(campaign.start_date).toLocaleDateString()}</p>}\n                      {campaign.end_date && <p className=\"text-muted-foreground\">to {new Date(campaign.end_date).toLocaleDateString()}</p>}\n                    </div>\n                  </TableCell>\n                  <TableCell>{getStatusBadge(campaign.status)}</TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end gap-2\">\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleView(campaign)}>\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(campaign)}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDelete(campaign.id)}>\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Create Campaign Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create New Campaign</DialogTitle>\n            <DialogDescription>Fill in the details for your new fundraising campaign</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Campaign Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                placeholder=\"e.g., Education Fund 2024\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description *</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Describe your campaign goals and impact\"\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"donationType\">Donation Type *</Label>\n                <Select\n                  value={formData.donationType}\n                  onValueChange={(value: \"one_time\" | \"recurring\") => setFormData({ ...formData, donationType: value })}\n                >\n                  <SelectTrigger id=\"donationType\">\n                    <SelectValue placeholder=\"Select donation type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"one_time\">One-Time Donations</SelectItem>\n                    <SelectItem value=\"recurring\">Recurring Donations</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"status\">Status *</Label>\n                <Select\n                  value={formData.status}\n                  onValueChange={(value: \"draft\" | \"published\" | \"closed\" | \"archived\") => setFormData({ ...formData, status: value })}\n                >\n                  <SelectTrigger id=\"status\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"published\">Published</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"targetAmount\">Target Amount (₱) *</Label>\n                <Input\n                  id=\"targetAmount\"\n                  type=\"number\"\n                  value={formData.targetAmount}\n                  onChange={(e) => setFormData({ ...formData, targetAmount: e.target.value })}\n                  placeholder=\"100000\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image\">Campaign Image</Label>\n                <Input\n                  id=\"image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => setFormData({ ...formData, image: e.target.files?.[0] || null })}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"startDate\">Start Date</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={formData.startDate}\n                  onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"endDate\">End Date</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={formData.endDate}\n                  onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)} disabled={submitting}>Cancel</Button>\n            <Button onClick={handleCreate} disabled={submitting}>{submitting ? \"Creating...\" : \"Create Campaign\"}</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Campaign Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Campaign</DialogTitle>\n            <DialogDescription>Update your campaign details</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\">Campaign Title *</Label>\n              <Input\n                id=\"edit-title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-description\">Description *</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-donationType\">Donation Type *</Label>\n                <Select\n                  value={formData.donationType}\n                  onValueChange={(value: \"one_time\" | \"recurring\") => setFormData({ ...formData, donationType: value })}\n                >\n                  <SelectTrigger id=\"edit-donationType\">\n                    <SelectValue placeholder=\"Select donation type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"one_time\">One-Time Donations</SelectItem>\n                    <SelectItem value=\"recurring\">Recurring Donations</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-status\">Status *</Label>\n                <Select\n                  value={formData.status}\n                  onValueChange={(value: \"draft\" | \"published\" | \"closed\" | \"archived\") => setFormData({ ...formData, status: value })}\n                >\n                  <SelectTrigger id=\"edit-status\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"published\">Published</SelectItem>\n                    <SelectItem value=\"closed\">Closed</SelectItem>\n                    <SelectItem value=\"archived\">Archived</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-targetAmount\">Target Amount (₱) *</Label>\n                <Input\n                  id=\"edit-targetAmount\"\n                  type=\"number\"\n                  value={formData.targetAmount}\n                  onChange={(e) => setFormData({ ...formData, targetAmount: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-image\">Campaign Image</Label>\n                <Input\n                  id=\"edit-image\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => setFormData({ ...formData, image: e.target.files?.[0] || null })}\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-startDate\">Start Date</Label>\n                <Input\n                  id=\"edit-startDate\"\n                  type=\"date\"\n                  value={formData.startDate}\n                  onChange={(e) => setFormData({ ...formData, startDate: e.target.value })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-endDate\">End Date</Label>\n                <Input\n                  id=\"edit-endDate\"\n                  type=\"date\"\n                  value={formData.endDate}\n                  onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}\n                />\n              </div>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} disabled={submitting}>Cancel</Button>\n            <Button onClick={handleUpdate} disabled={submitting}>{submitting ? \"Updating...\" : \"Update Campaign\"}</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Campaign Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>{selectedCampaign?.title}</DialogTitle>\n            <DialogDescription>Campaign Details</DialogDescription>\n          </DialogHeader>\n          {selectedCampaign && (\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Description</Label>\n                <p className=\"text-sm text-muted-foreground mt-1\">{selectedCampaign.description}</p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Donation Type</Label>\n                  <div className=\"mt-1\">{getDonationTypeBadge(selectedCampaign.donation_type)}</div>\n                </div>\n                <div>\n                  <Label>Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedCampaign.status)}</div>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Target Amount</Label>\n                  <p className=\"text-lg font-bold\">₱{selectedCampaign.target_amount.toLocaleString()}</p>\n                </div>\n                <div>\n                  <Label>Current Amount</Label>\n                  <p className=\"text-lg font-bold text-green-600\">₱{selectedCampaign.current_amount.toLocaleString()}</p>\n                </div>\n              </div>\n              <div>\n                <Label>Progress</Label>\n                <Progress value={getProgress(selectedCampaign.current_amount, selectedCampaign.target_amount)} className=\"mt-2\" />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  {getProgress(selectedCampaign.current_amount, selectedCampaign.target_amount).toFixed(1)}% achieved\n                </p>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Start Date</Label>\n                  <p className=\"text-sm\">{selectedCampaign.start_date ? new Date(selectedCampaign.start_date).toLocaleDateString() : 'Not set'}</p>\n                </div>\n                <div>\n                  <Label>End Date</Label>\n                  <p className=\"text-sm\">{selectedCampaign.end_date ? new Date(selectedCampaign.end_date).toLocaleDateString() : 'Not set'}</p>\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>Close</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CampaignsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCampaigns'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [loadCampaigns, page, statusFilter]","fix":{"range":[1750,1770],"text":"[loadCampaigns, page, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { listCampaigns, deleteCampaign } from \"@/services/apiCharity\";\nimport type { Campaign } from \"@/types/charity\";\nimport { Search, Plus, Edit, Trash2, Eye, Download } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Campaigns List Page\n * Table with pagination, search, filters, and bulk actions\n */\nconst CampaignsPage = () => {\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [campaignToDelete, setCampaignToDelete] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadCampaigns();\n  }, [page, statusFilter]);\n\n  const loadCampaigns = async () => {\n    try {\n      setLoading(true);\n      const response = await listCampaigns({\n        page,\n        pageSize: 10,\n        status: statusFilter === \"all\" ? undefined : statusFilter,\n        search: search || undefined,\n        sortBy: \"createdAt\",\n        sortOrder: \"desc\",\n      });\n      setCampaigns(response.data);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load campaigns\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = () => {\n    setPage(1);\n    loadCampaigns();\n  };\n\n  const handleDelete = async () => {\n    if (!campaignToDelete) return;\n    try {\n      await deleteCampaign(campaignToDelete);\n      toast({ title: \"Success\", description: \"Campaign deleted successfully\" });\n      loadCampaigns();\n      setDeleteDialogOpen(false);\n      setCampaignToDelete(null);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to delete campaign\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedIds(campaigns.map((c) => c.id));\n    } else {\n      setSelectedIds([]);\n    }\n  };\n\n  const handleSelectOne = (id: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIds([...selectedIds, id]);\n    } else {\n      setSelectedIds(selectedIds.filter((selectedId) => selectedId !== id));\n    }\n  };\n\n  const getStatusBadge = (status: Campaign[\"status\"]) => {\n    const variants: Record<Campaign[\"status\"], string> = {\n      active: \"bg-success/10 text-success\",\n      paused: \"bg-warning/10 text-warning\",\n      completed: \"bg-muted text-muted-foreground\",\n      draft: \"bg-secondary text-secondary-foreground\",\n    };\n    return (\n      <Badge variant=\"outline\" className={variants[status]}>\n        {status}\n      </Badge>\n    );\n  };\n\n  if (loading && campaigns.length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Campaigns</CardTitle>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-sm\" />\n              Create Campaign\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Filters */}\n          <div className=\"flex gap-md items-center\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search campaigns...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && handleSearch()}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All statuses</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"paused\">Paused</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button onClick={handleSearch}>Search</Button>\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedIds.length > 0 && (\n            <div className=\"flex items-center gap-md p-md bg-muted rounded-md\">\n              <span className=\"text-sm font-medium\">\n                {selectedIds.length} selected\n              </span>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-xs\" />\n                Export\n              </Button>\n              <Button variant=\"destructive\" size=\"sm\">\n                <Trash2 className=\"h-4 w-4 mr-xs\" />\n                Delete\n              </Button>\n            </div>\n          )}\n\n          {/* Table */}\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-12\">\n                    <Checkbox\n                      checked={\n                        selectedIds.length === campaigns.length &&\n                        campaigns.length > 0\n                      }\n                      onCheckedChange={handleSelectAll}\n                    />\n                  </TableHead>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Goal</TableHead>\n                  <TableHead>Raised</TableHead>\n                  <TableHead>Progress</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Deadline</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {campaigns.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-lg\">\n                      <p className=\"text-muted-foreground\">No campaigns found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  campaigns.map((campaign) => {\n                    const progress = (campaign.raised / campaign.goal) * 100;\n                    return (\n                      <TableRow key={campaign.id}>\n                        <TableCell>\n                          <Checkbox\n                            checked={selectedIds.includes(campaign.id)}\n                            onCheckedChange={(checked) =>\n                              handleSelectOne(campaign.id, checked as boolean)\n                            }\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {campaign.title}\n                        </TableCell>\n                        <TableCell>${campaign.goal.toLocaleString()}</TableCell>\n                        <TableCell>${campaign.raised.toLocaleString()}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-sm\">\n                            <div className=\"flex-1 bg-muted rounded-full h-2 overflow-hidden\">\n                              <div\n                                className=\"h-full bg-primary transition-all\"\n                                style={{ width: `${Math.min(progress, 100)}%` }}\n                              />\n                            </div>\n                            <span className=\"text-xs text-muted-foreground min-w-[3rem] text-right\">\n                              {progress.toFixed(0)}%\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell>{getStatusBadge(campaign.status)}</TableCell>\n                        <TableCell>\n                          {new Date(campaign.deadline).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex justify-end gap-xs\">\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setCampaignToDelete(campaign.id);\n                                setDeleteDialogOpen(true);\n                              }}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the\n              campaign and all associated data.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDelete}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default CampaignsPage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CharityDashboard.tsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":42,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":42,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1537,1537],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { DollarSign, Megaphone, Users, TrendingUp, AlertCircle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { authService } from \"@/services/auth\";\nexport default function CharityDashboard() {\n  const navigate = useNavigate();\n  const [stats, setStats] = useState({\n    totalDonations: 0,\n    totalAmount: 0,\n    charitiesSupported: 0,\n    impactScore: 0,\n    activeCampaigns: 0,\n    pendingConfirmations: 0,\n    verificationStatus: 'pending' as 'pending' | 'approved' | 'rejected'\n  });\n\n  const [verificationStatus, setVerificationStatus] = useState<'pending'|'approved'|'rejected'>('pending');\n\n  useEffect(() => {\n    const loadStatus = async () => {\n      try {\n        const token = authService.getToken();\n        if (!token) return;\n        const res = await fetch(`${import.meta.env.VITE_API_URL}/api/me`, {\n          headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' }\n        });\n        if (!res.ok) return;\n        const me = await res.json();\n        const status = me?.charity?.verification_status as 'pending'|'approved'|'rejected' | undefined;\n        if (status) setVerificationStatus(status);\n      } catch {}\n    };\n    loadStatus();\n  }, []);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'confirmed':\n        return <Badge className=\"bg-green-600\">Confirmed</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const getVerificationBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-600\">Verified</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending Verification</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-6\">\n      {/* Page Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n        <p className=\"text-muted-foreground text-sm\">\n          Welcome back! Here's what's happening with your charity\n        </p>\n      </div>\n\n      {/* Verification Status Alert */}\n      {verificationStatus === 'pending' && (\n        <Card className=\"border-yellow-200 bg-yellow-50 dark:bg-yellow-950/20\">\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-5 w-5 text-yellow-600\" />\n              <CardTitle className=\"text-yellow-900 dark:text-yellow-100\">\n                Verification Pending\n              </CardTitle>\n            </div>\n            <CardDescription className=\"text-yellow-800 dark:text-yellow-200\">\n              Your charity is currently under review by our admin team. You can still manage your profile and prepare campaigns.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      )}\n\n      {/* Stats Grid */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Donations</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₱{stats.totalAmount.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.totalDonations} donations received\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Campaigns</CardTitle>\n            <Megaphone className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.activeCampaigns}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Running campaigns\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Confirmations</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.pendingConfirmations}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Require your action\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verification Status</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            {getVerificationBadge(verificationStatus)}\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Organization status\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Manage your charity operations</CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex gap-4\">\n          <Button onClick={() => navigate('/charity/campaigns')}>\n            <Megaphone className=\"mr-2 h-4 w-4\" />\n            Create Campaign\n          </Button>\n          <Button variant=\"outline\" onClick={() => navigate('/charity/donations')}>\n            View Donations\n          </Button>\n          <Button variant=\"outline\" onClick={() => navigate('/charity/fund-tracking')}>\n            Log Fund Usage\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Recent Donations - removed demo content */}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CharityDashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CharityPosts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CharityProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\CharitySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\Documents.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchDocumentStatus' and 'fetchDocuments'. Either include them or remove the dependency array.","line":49,"column":6,"nodeType":"ArrayExpression","endLine":49,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDocumentStatus, fetchDocuments, user]","fix":{"range":[1776,1782],"text":"[fetchDocumentStatus, fetchDocuments, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3671,3674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3671,3674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { FileText, Upload, Eye, Download, AlertTriangle, Calendar, CheckCircle, Clock } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\nimport { useAuth } from \"@/context/AuthContext\";\n\ninterface Document {\n  id: number;\n  doc_type: string;\n  file_path: string;\n  expires: boolean;\n  expiry_date?: string;\n  renewal_reminder_sent_at?: string;\n  uploaded_at: string;\n  is_expired?: boolean;\n  is_expiring_soon?: boolean;\n  days_until_expiry?: number;\n}\n\ninterface DocumentStatus {\n  documents: Document[];\n  expired_count: number;\n  expiring_soon_count: number;\n  total_expirable_documents: number;\n}\n\nexport default function CharityDocuments() {\n  const { user } = useAuth();\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [documentStatus, setDocumentStatus] = useState<DocumentStatus | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\n  const [uploadType, setUploadType] = useState(\"\");\n  const [expiryDate, setExpiryDate] = useState(\"\");\n  const [hasExpiry, setHasExpiry] = useState(false);\n\n  useEffect(() => {\n    if (user?.charity?.id) {\n      fetchDocuments();\n      fetchDocumentStatus();\n    }\n  }, [user]);\n\n  const fetchDocuments = async () => {\n    try {\n      const response = await axios.get(`/api/charities/${user?.charity?.id}/documents`);\n      // Ensure response.data is always an array to avoid runtime errors on render\n      const documentsData = Array.isArray(response.data) ? response.data : [];\n      setDocuments(documentsData);\n    } catch (error) {\n      console.error(\"Failed to fetch documents:\", error);\n      toast.error(\"Failed to fetch documents\");\n      // Keep documents as an empty array on error\n      setDocuments([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchDocumentStatus = async () => {\n    try {\n      const response = await axios.get(`/api/charities/${user?.charity?.id}/documents/expiry-status`);\n      setDocumentStatus(response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch document status:\", error);\n      // Provide a safe default to avoid undefined access in UI\n      setDocumentStatus({\n        documents: [],\n        expired_count: 0,\n        expiring_soon_count: 0,\n        total_expirable_documents: 0,\n      });\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!uploadFile || !uploadType) {\n      toast.error(\"Please select a file and document type\");\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append(\"document\", uploadFile);\n      formData.append(\"doc_type\", uploadType);\n      if (hasExpiry && expiryDate) {\n        formData.append(\"expires\", \"true\");\n        formData.append(\"expiry_date\", expiryDate);\n      }\n\n      await axios.post(`/api/charities/${user?.charity?.id}/documents`, formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      toast.success(\"Document uploaded successfully\");\n      setIsUploadOpen(false);\n      resetUploadForm();\n      fetchDocuments();\n      fetchDocumentStatus();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to upload document\");\n    }\n  };\n\n  const resetUploadForm = () => {\n    setUploadFile(null);\n    setUploadType(\"\");\n    setExpiryDate(\"\");\n    setHasExpiry(false);\n  };\n\n  const downloadDocument = async (document: Document) => {\n    try {\n      const response = await axios.get(`/storage/${document.file_path}`, {\n        responseType: 'blob'\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = window.document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `${document.doc_type}.pdf`);\n      window.document.body.appendChild(link);\n      link.click();\n      link.remove();\n    } catch (error) {\n      toast.error(\"Failed to download document\");\n    }\n  };\n\n  const viewDocument = (document: Document) => {\n    window.open(`/storage/${document.file_path}`, '_blank');\n  };\n\n  const getDocumentBadge = (document: Document) => {\n    if (document.is_expired) {\n      return <Badge className=\"bg-red-100 text-red-800\">Expired</Badge>;\n    }\n    if (document.is_expiring_soon) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Expiring Soon</Badge>;\n    }\n    if (document.expires) {\n      return <Badge className=\"bg-green-100 text-green-800\">Valid</Badge>;\n    }\n    return <Badge className=\"bg-blue-100 text-blue-800\">No Expiry</Badge>;\n  };\n\n  const formatDocType = (docType: string) => {\n    return docType.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const documentTypes = [\n    \"certificate_of_registration\",\n    \"tax_exemption_certificate\",\n    \"financial_report\",\n    \"board_resolution\",\n    \"valid_id\",\n    \"bank_certificate\",\n    \"other_legal_document\"\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Document Management</h1>\n          <p className=\"text-muted-foreground\">Manage your organization's legal documents</p>\n        </div>\n        <Dialog open={isUploadOpen} onOpenChange={setIsUploadOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Upload Document\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Upload New Document</DialogTitle>\n              <DialogDescription>\n                Upload legal documents for your organization\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Document Type</label>\n                <select \n                  className=\"w-full mt-1 p-2 border rounded-md\"\n                  value={uploadType}\n                  onChange={(e) => setUploadType(e.target.value)}\n                >\n                  <option value=\"\">Select document type</option>\n                  {documentTypes.map((type) => (\n                    <option key={type} value={type}>\n                      {formatDocType(type)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Document File</label>\n                <Input\n                  type=\"file\"\n                  accept=\".pdf,.jpg,.jpeg,.png\"\n                  onChange={(e) => setUploadFile(e.target.files?.[0] || null)}\n                  className=\"mt-1\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Accepted formats: PDF, JPG, PNG (Max 10MB)\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"hasExpiry\"\n                  checked={hasExpiry}\n                  onChange={(e) => setHasExpiry(e.target.checked)}\n                />\n                <label htmlFor=\"hasExpiry\" className=\"text-sm font-medium\">\n                  This document has an expiry date\n                </label>\n              </div>\n              {hasExpiry && (\n                <div>\n                  <label className=\"text-sm font-medium\">Expiry Date</label>\n                  <Input\n                    type=\"date\"\n                    value={expiryDate}\n                    onChange={(e) => setExpiryDate(e.target.value)}\n                    min={new Date().toISOString().split('T')[0]}\n                    className=\"mt-1\"\n                  />\n                </div>\n              )}\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setIsUploadOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleUpload}>\n                  Upload Document\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Document Status Alerts */}\n      {documentStatus && (\n        <div className=\"space-y-4\">\n          {documentStatus.expired_count > 0 && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-800\">\n                <strong>Urgent:</strong> You have {documentStatus.expired_count} expired document(s). \n                Please renew them immediately to maintain your verification status.\n              </AlertDescription>\n            </Alert>\n          )}\n          {documentStatus.expiring_soon_count > 0 && (\n            <Alert className=\"border-yellow-200 bg-yellow-50\">\n              <Clock className=\"h-4 w-4 text-yellow-600\" />\n              <AlertDescription className=\"text-yellow-800\">\n                <strong>Reminder:</strong> You have {documentStatus.expiring_soon_count} document(s) \n                expiring within 30 days. Please prepare renewals.\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      )}\n\n      {/* Documents Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {documents.map((document) => (\n          <Card key={document.id} className={document.is_expired ? \"border-red-200\" : document.is_expiring_soon ? \"border-yellow-200\" : \"\"}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5 text-blue-600\" />\n                  <div>\n                    <CardTitle className=\"text-base\">{formatDocType(document.doc_type)}</CardTitle>\n                    <CardDescription className=\"text-xs\">\n                      Uploaded {new Date(document.uploaded_at).toLocaleDateString()}\n                    </CardDescription>\n                  </div>\n                </div>\n                {getDocumentBadge(document)}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {document.expires && document.expiry_date && (\n                <div className=\"text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>Expires: {new Date(document.expiry_date).toLocaleDateString()}</span>\n                  </div>\n                  {document.days_until_expiry !== undefined && (\n                    <p className={`text-xs mt-1 ${document.is_expired ? 'text-red-600' : document.is_expiring_soon ? 'text-yellow-600' : 'text-green-600'}`}>\n                      {document.is_expired \n                        ? `Expired ${Math.abs(document.days_until_expiry)} days ago`\n                        : `${document.days_until_expiry} days remaining`\n                      }\n                    </p>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => viewDocument(document)}\n                  className=\"flex-1\"\n                >\n                  <Eye className=\"h-3 w-3 mr-1\" />\n                  View\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => downloadDocument(document)}\n                >\n                  <Download className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {documents.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No documents uploaded yet.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Upload your legal documents to maintain verification status.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Required Documents Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Required Documents</CardTitle>\n          <CardDescription>\n            These documents are typically required for charity verification\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {documentTypes.map((type) => {\n              const hasDocument = documents.some(doc => doc.doc_type === type);\n              return (\n                <div key={type} className=\"flex items-center gap-2\">\n                  {hasDocument ? (\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  ) : (\n                    <Clock className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                  <span className={`text-sm ${hasDocument ? 'text-green-800' : 'text-muted-foreground'}`}>\n                    {formatDocType(type)}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\DocumentsPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDocuments'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [loadDocuments, page, statusFilter]","fix":{"range":[1864,1884],"text":"[loadDocuments, page, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  listDocuments,\n  uploadDocument,\n  verifyDocument,\n  requestDocumentInfo,\n  computeChecksum,\n} from \"@/services/apiCharity\";\nimport type { Document } from \"@/types/charity\";\nimport { Upload, CheckCircle, AlertCircle, Download, FileText, Image as ImageIcon } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Documents Page\n * Upload, view, and verify charity documents\n */\nconst DocumentsPage = () => {\n  const [documents, setDocuments] = useState<Document[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);\n  const [viewDialogOpen, setViewDialogOpen] = useState(false);\n  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);\n  const [noteDialogOpen, setNoteDialogOpen] = useState(false);\n  const [adminNote, setAdminNote] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  useEffect(() => {\n    loadDocuments();\n  }, [page, statusFilter]);\n\n  const loadDocuments = async () => {\n    try {\n      setLoading(true);\n      const response = await listDocuments({\n        page,\n        pageSize: 20,\n        status: statusFilter === \"all\" ? undefined : statusFilter,\n      });\n      setDocuments(response.data);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load documents\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const allowedTypes = [\"application/pdf\", \"image/png\", \"image/jpeg\", \"image/jpg\"];\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Error\",\n        description: \"Only PDF, PNG, JPG, and JPEG files are allowed\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"Error\",\n        description: \"File size must be less than 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      setUploading(true);\n      const checksum = await computeChecksum(file);\n      \n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"checksum\", checksum);\n      formData.append(\"documentType\", \"verification\");\n\n      await uploadDocument(formData);\n      toast({ title: \"Success\", description: \"Document uploaded successfully\" });\n      setUploadDialogOpen(false);\n      loadDocuments();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Upload failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleVerify = async (id: string) => {\n    try {\n      await verifyDocument(id);\n      toast({ title: \"Success\", description: \"Document verified\" });\n      loadDocuments();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to verify\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRequestInfo = async () => {\n    if (!selectedDocument || !adminNote.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a message\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    try {\n      await requestDocumentInfo(selectedDocument.id, adminNote);\n      toast({ title: \"Success\", description: \"Information requested\" });\n      setNoteDialogOpen(false);\n      setAdminNote(\"\");\n      setSelectedDocument(null);\n      loadDocuments();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Request failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: Document[\"status\"]) => {\n    const variants: Record<Document[\"status\"], string> = {\n      pending: \"bg-warning/10 text-warning\",\n      verified: \"bg-success/10 text-success\",\n      rejected: \"bg-destructive/10 text-destructive\",\n      info_requested: \"bg-accent/10 text-accent-foreground\",\n    };\n    return (\n      <Badge variant=\"outline\" className={variants[status]}>\n        {status.replace(\"_\", \" \")}\n      </Badge>\n    );\n  };\n\n  if (loading && documents.length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Documents</CardTitle>\n            <Button onClick={() => setUploadDialogOpen(true)}>\n              <Upload className=\"h-4 w-4 mr-xs\" />\n              Upload Document\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Filters */}\n          <div className=\"flex gap-md items-center\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All statuses</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"verified\">Verified</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n                <SelectItem value=\"info_requested\">Info Requested</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Table */}\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Preview</TableHead>\n                  <TableHead>Filename</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Checksum</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Uploaded</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {documents.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-lg\">\n                      <p className=\"text-muted-foreground\">No documents found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  documents.map((doc) => (\n                    <TableRow key={doc.id}>\n                      <TableCell>\n                        {doc.thumbnailUrl ? (\n                          <img\n                            src={doc.thumbnailUrl}\n                            alt=\"Preview\"\n                            className=\"h-10 w-10 object-cover rounded border\"\n                          />\n                        ) : doc.mimeType.startsWith(\"image/\") ? (\n                          <ImageIcon className=\"h-10 w-10 text-muted-foreground\" />\n                        ) : (\n                          <FileText className=\"h-10 w-10 text-muted-foreground\" />\n                        )}\n                      </TableCell>\n                      <TableCell className=\"font-medium max-w-xs truncate\">\n                        {doc.filename}\n                      </TableCell>\n                      <TableCell className=\"capitalize\">{doc.documentType}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-xs\">\n                          <code className=\"text-xs font-mono\">\n                            {doc.checksum.slice(0, 8)}...\n                          </code>\n                          {doc.checksumVerified && (\n                            <CheckCircle className=\"h-3 w-3 text-success\" />\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(doc.status)}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(doc.uploadedAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex justify-end gap-xs\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedDocument(doc);\n                              setViewDialogOpen(true);\n                            }}\n                          >\n                            <FileText className=\"h-4 w-4\" />\n                          </Button>\n                          {doc.status === \"pending\" && (\n                            <>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleVerify(doc.id)}\n                              >\n                                <CheckCircle className=\"h-4 w-4 text-success\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSelectedDocument(doc);\n                                  setNoteDialogOpen(true);\n                                }}\n                              >\n                                <AlertCircle className=\"h-4 w-4 text-warning\" />\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upload Dialog */}\n      <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Upload Document</DialogTitle>\n            <DialogDescription>\n              Upload a verification document (PDF, PNG, JPG, max 10MB)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-md\">\n            <Label htmlFor=\"file-upload\" className=\"block mb-sm\">\n              Select File\n            </Label>\n            <input\n              id=\"file-upload\"\n              type=\"file\"\n              accept=\".pdf,.png,.jpg,.jpeg\"\n              onChange={handleUpload}\n              disabled={uploading}\n              className=\"block w-full text-sm file:mr-md file:py-sm file:px-md file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90\"\n            />\n            {uploading && (\n              <p className=\"text-sm text-muted-foreground mt-sm\">\n                Computing checksum and uploading...\n              </p>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* View Dialog */}\n      {selectedDocument && (\n        <Dialog open={viewDialogOpen} onOpenChange={setViewDialogOpen}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle>{selectedDocument.filename}</DialogTitle>\n              <DialogDescription>Document details and preview</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-md py-md\">\n              <div className=\"grid grid-cols-2 gap-md text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Type:</p>\n                  <p className=\"font-medium capitalize\">{selectedDocument.documentType}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Status:</p>\n                  {getStatusBadge(selectedDocument.status)}\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Uploaded:</p>\n                  <p className=\"font-medium\">\n                    {new Date(selectedDocument.uploadedAt).toLocaleString()}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Size:</p>\n                  <p className=\"font-medium\">\n                    {(selectedDocument.fileSize / 1024).toFixed(2)} KB\n                  </p>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-xs\">SHA-256 Checksum:</p>\n                <code className=\"text-xs font-mono bg-muted p-sm rounded block break-all\">\n                  {selectedDocument.checksum}\n                </code>\n              </div>\n              {selectedDocument.adminNotes && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-xs\">Admin Notes:</p>\n                  <p className=\"text-sm p-sm bg-muted rounded\">{selectedDocument.adminNotes}</p>\n                </div>\n              )}\n              <div className=\"border rounded-md p-md bg-muted/30\">\n                {selectedDocument.mimeType.startsWith(\"image/\") ? (\n                  <img\n                    src={selectedDocument.fileUrl}\n                    alt=\"Document preview\"\n                    className=\"w-full rounded-md\"\n                  />\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center py-2xl\">\n                    <FileText className=\"h-16 w-16 text-muted-foreground mb-md\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      PDF Preview (download to view)\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"mt-md\" asChild>\n                      <a href={selectedDocument.fileUrl} download target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Download className=\"h-4 w-4 mr-xs\" />\n                        Download\n                      </a>\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setViewDialogOpen(false)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Request Info Dialog */}\n      <Dialog open={noteDialogOpen} onOpenChange={setNoteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Request More Information</DialogTitle>\n            <DialogDescription>\n              Send a message requesting additional documentation or clarification\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-md\">\n            <Label htmlFor=\"admin-note\">Message</Label>\n            <Textarea\n              id=\"admin-note\"\n              value={adminNote}\n              onChange={(e) => setAdminNote(e.target.value)}\n              placeholder=\"Describe what information is needed...\"\n              className=\"mt-sm\"\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setNoteDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleRequestInfo}>Send Request</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DocumentsPage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\DonationManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1939,1942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1939,1942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2611,2614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2611,2614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDonations'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadDonations]","fix":{"range":[3497,3499],"text":"[loadDonations]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4299,4302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4299,4302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { CheckCircle, XCircle, Eye, Download, Filter } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { donationsService, Donation as ApiDonation } from \"@/services/donations\";\n\ninterface Donation {\n  id: number;\n  donor: string;\n  campaign: string;\n  amount: number;\n  date: string;\n  status: 'pending' | 'completed' | 'rejected';\n  proofUrl?: string;\n  isAnonymous: boolean;\n}\n\nexport default function DonationManagement() {\n  const { user } = useAuth();\n  const [donations, setDonations] = useState<Donation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n\n  const [selectedDonation, setSelectedDonation] = useState<Donation | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  const handleConfirm = async (id: number) => {\n    try {\n      setSubmitting(true);\n      await donationsService.confirmDonation(id, 'completed');\n      toast.success(\"Donation confirmed successfully\");\n      loadDonations();\n    } catch (error: any) {\n      console.error(\"Failed to confirm donation:\", error);\n      toast.error(error.response?.data?.message || \"Failed to confirm donation\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleReject = async () => {\n    if (!selectedDonation || !rejectReason.trim()) {\n      toast.error(\"Please provide a reason for rejection\");\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      await donationsService.confirmDonation(selectedDonation.id, 'rejected');\n      toast.success(\"Donation rejected\");\n      setIsRejectDialogOpen(false);\n      setRejectReason(\"\");\n      setSelectedDonation(null);\n      loadDonations();\n    } catch (error: any) {\n      console.error(\"Failed to reject donation:\", error);\n      toast.error(error.response?.data?.message || \"Failed to reject donation\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleView = (donation: Donation) => {\n    setSelectedDonation(donation);\n    setIsViewDialogOpen(true);\n  };\n\n  const openRejectDialog = (donation: Donation) => {\n    setSelectedDonation(donation);\n    setIsRejectDialogOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'completed':\n        return <Badge className=\"bg-green-600\">Completed</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  useEffect(() => {\n    loadDonations();\n  }, []);\n\n  const loadDonations = async () => {\n    try {\n      if (!user?.charity?.id) {\n        toast.error(\"No charity found for your account\");\n        setLoading(false);\n        return;\n      }\n\n      const response = await donationsService.getCharityDonations(user.charity.id);\n      const formattedDonations = response.data.map((donation: ApiDonation) => ({\n        id: donation.id,\n        donor: donation.donor?.name || \"Unknown Donor\",\n        campaign: donation.campaign?.title || \"General Donation\",\n        amount: donation.amount,\n        date: donation.donated_at,\n        status: donation.status as 'pending' | 'completed' | 'rejected',\n        proofUrl: donation.proof_path,\n        isAnonymous: donation.is_anonymous\n      }));\n      setDonations(formattedDonations);\n    } catch (error: any) {\n      console.error(\"Failed to load donations:\", error);\n      toast.error(error.response?.data?.message || \"Failed to load donations\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredDonations = filterStatus === \"all\" \n    ? donations \n    : donations.filter(d => d.status === filterStatus);\n\n  const stats = {\n    total: donations.filter(d => d.status === 'completed').reduce((sum, d) => sum + d.amount, 0),\n    pending: donations.filter(d => d.status === 'pending').length,\n    confirmed: donations.filter(d => d.status === 'completed').length,\n    rejected: donations.filter(d => d.status === 'rejected').length\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Donation Management</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Review and manage incoming donations\n          </p>\n        </div>\n        <Button variant=\"outline\">\n          <Download className=\"mr-2 h-4 w-4\" />\n          Export Report\n        </Button>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Confirmed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₱{stats.total.toLocaleString()}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.pending}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Confirmed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.confirmed}</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.rejected}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Donations Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>All Donations</CardTitle>\n              <CardDescription>Review and confirm donation submissions</CardDescription>\n            </div>\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className=\"w-[180px]\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"py-12 text-center text-muted-foreground\">Loading donations...</div>\n          ) : filteredDonations.length === 0 ? (\n            <div className=\"py-12 text-center text-muted-foreground\">\n              {donations.length === 0 \n                ? \"No donations yet. Donations will appear here when donors contribute to your campaigns.\"\n                : \"No donations match the selected filter.\"}\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Donor</TableHead>\n                  <TableHead>Campaign</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDonations.map((donation) => (\n                  <TableRow key={donation.id}>\n                    <TableCell className=\"font-medium\">\n                      {donation.isAnonymous ? \"Anonymous Donor\" : donation.donor}\n                    </TableCell>\n                    <TableCell>{donation.campaign}</TableCell>\n                    <TableCell className=\"font-bold\">₱{donation.amount.toLocaleString()}</TableCell>\n                    <TableCell>{new Date(donation.date).toLocaleDateString()}</TableCell>\n                    <TableCell>{getStatusBadge(donation.status)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => handleView(donation)}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {donation.status === 'pending' && (\n                          <>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleConfirm(donation.id)}\n                              className=\"text-green-600 hover:text-green-700\"\n                              disabled={submitting}\n                            >\n                              <CheckCircle className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => openRejectDialog(donation)}\n                              className=\"text-destructive hover:text-destructive\"\n                              disabled={submitting}\n                            >\n                              <XCircle className=\"h-4 w-4\" />\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Donation Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Donation Details</DialogTitle>\n            <DialogDescription>Review donation information and proof of payment</DialogDescription>\n          </DialogHeader>\n          {selectedDonation && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Donor Name</Label>\n                  <p className=\"text-sm font-medium mt-1\">\n                    {selectedDonation.isAnonymous ? \"Anonymous Donor\" : selectedDonation.donor}\n                  </p>\n                </div>\n                <div>\n                  <Label>Campaign</Label>\n                  <p className=\"text-sm font-medium mt-1\">{selectedDonation.campaign}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Amount</Label>\n                  <p className=\"text-lg font-bold text-green-600 mt-1\">\n                    ₱{selectedDonation.amount.toLocaleString()}\n                  </p>\n                </div>\n                <div>\n                  <Label>Date</Label>\n                  <p className=\"text-sm font-medium mt-1\">\n                    {new Date(selectedDonation.date).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <Label>Status</Label>\n                <div className=\"mt-1\">{getStatusBadge(selectedDonation.status)}</div>\n              </div>\n              <div>\n                <Label>Proof of Payment</Label>\n                <div className=\"mt-2 border rounded-lg p-4 bg-muted/50\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedDonation.proofUrl ? (\n                      <span>File: {selectedDonation.proofUrl}</span>\n                    ) : (\n                      \"No proof uploaded\"\n                    )}\n                  </p>\n                  {selectedDonation.proofUrl && (\n                    <Button variant=\"outline\" size=\"sm\" className=\"mt-2\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download Proof\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            {selectedDonation?.status === 'pending' && (\n              <>\n                <Button variant=\"outline\" onClick={() => openRejectDialog(selectedDonation)}>\n                  <XCircle className=\"mr-2 h-4 w-4\" />\n                  Reject\n                </Button>\n                <Button onClick={() => {\n                  handleConfirm(selectedDonation.id);\n                  setIsViewDialogOpen(false);\n                }}>\n                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                  Confirm\n                </Button>\n              </>\n            )}\n            {selectedDonation?.status !== 'pending' && (\n              <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>Close</Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Reject Donation Dialog */}\n      <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Donation</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting this donation\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reason\">Rejection Reason *</Label>\n              <Textarea\n                id=\"reason\"\n                value={rejectReason}\n                onChange={(e) => setRejectReason(e.target.value)}\n                placeholder=\"e.g., Invalid proof of payment, duplicate submission, etc.\"\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setIsRejectDialogOpen(false);\n                setRejectReason(\"\");\n              }}\n              disabled={submitting}\n            >\n              Cancel\n            </Button>\n            <Button \n              variant=\"destructive\" \n              onClick={handleReject}\n              disabled={submitting}\n            >\n              {submitting ? \"Rejecting...\" : \"Confirm Rejection\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\DonationsInboxPage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDonations'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadDonations, page]","fix":{"range":[1892,1898],"text":"[loadDonations, page]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  listDonations,\n  confirmDonation,\n  rejectDonation,\n  bulkConfirmDonations,\n  bulkRejectDonations,\n} from \"@/services/apiCharity\";\nimport type { Donation } from \"@/types/charity\";\nimport { CheckCircle, XCircle, Eye } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport DonationDetail from \"@/components/charity/DonationDetail\";\n\n/**\n * Donations Inbox Page\n * Table of donations with inline actions and bulk operations\n */\nconst DonationsInboxPage = () => {\n  const [donations, setDonations] = useState<Donation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [detailDrawerOpen, setDetailDrawerOpen] = useState(false);\n  const [selectedDonation, setSelectedDonation] = useState<Donation | null>(null);\n  const [rejectDialogOpen, setRejectDialogOpen] = useState(false);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [bulkRejectDialogOpen, setBulkRejectDialogOpen] = useState(false);\n  const [bulkRejectReason, setBulkRejectReason] = useState(\"\");\n\n  useEffect(() => {\n    loadDonations();\n  }, [page]);\n\n  const loadDonations = async () => {\n    try {\n      setLoading(true);\n      const response = await listDonations({\n        page,\n        pageSize: 20,\n        status: \"pending\",\n        sortBy: \"submittedAt\",\n        sortOrder: \"desc\",\n      });\n      setDonations(response.data);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load donations\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConfirm = async (id: string) => {\n    try {\n      await confirmDonation(id, {});\n      toast({ title: \"Success\", description: \"Donation confirmed\" });\n      loadDonations();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to confirm\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleReject = async () => {\n    if (!selectedDonation || !rejectReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a reason\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    try {\n      await rejectDonation(selectedDonation.id, { reason: rejectReason });\n      toast({ title: \"Success\", description: \"Donation rejected\" });\n      setRejectDialogOpen(false);\n      setRejectReason(\"\");\n      setSelectedDonation(null);\n      loadDonations();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to reject\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkConfirm = async () => {\n    if (selectedIds.length === 0) return;\n    try {\n      await bulkConfirmDonations(selectedIds);\n      toast({\n        title: \"Success\",\n        description: `${selectedIds.length} donations confirmed`,\n      });\n      setSelectedIds([]);\n      loadDonations();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Bulk confirm failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBulkReject = async () => {\n    if (selectedIds.length === 0 || !bulkRejectReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a reason\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    try {\n      await bulkRejectDonations(selectedIds, bulkRejectReason);\n      toast({\n        title: \"Success\",\n        description: `${selectedIds.length} donations rejected`,\n      });\n      setBulkRejectDialogOpen(false);\n      setBulkRejectReason(\"\");\n      setSelectedIds([]);\n      loadDonations();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Bulk reject failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedIds(donations.map((d) => d.id));\n    } else {\n      setSelectedIds([]);\n    }\n  };\n\n  const handleSelectOne = (id: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIds([...selectedIds, id]);\n    } else {\n      setSelectedIds(selectedIds.filter((selectedId) => selectedId !== id));\n    }\n  };\n\n  if (loading && donations.length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Donations Inbox</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Bulk Actions */}\n          {selectedIds.length > 0 && (\n            <div className=\"flex items-center gap-md p-md bg-muted rounded-md\">\n              <span className=\"text-sm font-medium\">\n                {selectedIds.length} selected\n              </span>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleBulkConfirm}>\n                <CheckCircle className=\"h-4 w-4 mr-xs\" />\n                Confirm All\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setBulkRejectDialogOpen(true)}\n              >\n                <XCircle className=\"h-4 w-4 mr-xs\" />\n                Reject All\n              </Button>\n            </div>\n          )}\n\n          {/* Table */}\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-12\">\n                    <Checkbox\n                      checked={\n                        selectedIds.length === donations.length &&\n                        donations.length > 0\n                      }\n                      onCheckedChange={handleSelectAll}\n                    />\n                  </TableHead>\n                  <TableHead>Donor</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Method</TableHead>\n                  <TableHead>Submitted</TableHead>\n                  <TableHead>Checksum</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {donations.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-lg\">\n                      <p className=\"text-muted-foreground\">No pending donations</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  donations.map((donation) => (\n                    <TableRow key={donation.id}>\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedIds.includes(donation.id)}\n                          onCheckedChange={(checked) =>\n                            handleSelectOne(donation.id, checked as boolean)\n                          }\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{donation.donorName}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {donation.donorEmail}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        ${donation.amount.toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{donation.method}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(donation.submittedAt).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        {donation.proofChecksum ? (\n                          <div className=\"flex items-center gap-xs\">\n                            <span className=\"text-xs font-mono\">\n                              {donation.proofChecksum.slice(0, 8)}...\n                            </span>\n                            {donation.checksumVerified && (\n                              <CheckCircle className=\"h-3 w-3 text-success\" />\n                            )}\n                          </div>\n                        ) : (\n                          <span className=\"text-xs text-muted-foreground\">N/A</span>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex justify-end gap-xs\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedDonation(donation);\n                              setDetailDrawerOpen(true);\n                            }}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleConfirm(donation.id)}\n                          >\n                            <CheckCircle className=\"h-4 w-4 text-success\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSelectedDonation(donation);\n                              setRejectDialogOpen(true);\n                            }}\n                          >\n                            <XCircle className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detail Drawer */}\n      {selectedDonation && (\n        <DonationDetail\n          donationId={selectedDonation.id}\n          open={detailDrawerOpen}\n          onOpenChange={setDetailDrawerOpen}\n          onUpdate={loadDonations}\n        />\n      )}\n\n      {/* Reject Dialog */}\n      <Dialog open={rejectDialogOpen} onOpenChange={setRejectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Donation</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting this donation.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-md py-md\">\n            <div>\n              <Label htmlFor=\"reject-reason\">Reason</Label>\n              <Textarea\n                id=\"reject-reason\"\n                value={rejectReason}\n                onChange={(e) => setRejectReason(e.target.value)}\n                placeholder=\"Enter rejection reason...\"\n                className=\"mt-sm\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setRejectDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleReject}>Reject</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Reject Dialog */}\n      <Dialog open={bulkRejectDialogOpen} onOpenChange={setBulkRejectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject {selectedIds.length} Donations</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejecting these donations.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-md py-md\">\n            <div>\n              <Label htmlFor=\"bulk-reject-reason\">Reason</Label>\n              <Textarea\n                id=\"bulk-reject-reason\"\n                value={bulkRejectReason}\n                onChange={(e) => setBulkRejectReason(e.target.value)}\n                placeholder=\"Enter rejection reason...\"\n                className=\"mt-sm\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setBulkRejectDialogOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button onClick={handleBulkReject}>Reject All</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default DonationsInboxPage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\FundTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\FundUsagePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEntries'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [page, categoryFilter, loadEntries]","fix":{"range":[1678,1700],"text":"[page, categoryFilter, loadEntries]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { listFundUsage, createFundUsage } from \"@/services/apiCharity\";\nimport type { FundUsageEntry } from \"@/types/charity\";\nimport { Plus, Download, Receipt } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Fund Usage Page\n * Form to add fund usage entries and table to view entries\n */\nconst FundUsagePage = () => {\n  const [entries, setEntries] = useState<FundUsageEntry[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    campaignId: \"\",\n    amount: \"\",\n    category: \"\",\n    description: \"\",\n    date: new Date().toISOString().split(\"T\")[0],\n  });\n  const [files, setFiles] = useState<File[]>([]);\n\n  useEffect(() => {\n    loadEntries();\n  }, [page, categoryFilter]);\n\n  const loadEntries = async () => {\n    try {\n      setLoading(true);\n      const response = await listFundUsage({\n        page,\n        pageSize: 20,\n        category: categoryFilter === \"all\" ? undefined : categoryFilter,\n      });\n      setEntries(response.data || []);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load entries\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!formData.campaignId || !formData.amount || !formData.category || !formData.description) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = new FormData();\n    data.append(\"campaignId\", formData.campaignId);\n    data.append(\"amount\", formData.amount);\n    data.append(\"category\", formData.category);\n    data.append(\"description\", formData.description);\n    data.append(\"date\", formData.date);\n    files.forEach((file) => data.append(\"receipts\", file));\n\n    try {\n      await createFundUsage(data);\n      toast({ title: \"Success\", description: \"Fund usage entry added\" });\n      setDialogOpen(false);\n      setFormData({\n        campaignId: \"\",\n        amount: \"\",\n        category: \"\",\n        description: \"\",\n        date: new Date().toISOString().split(\"T\")[0],\n      });\n      setFiles([]);\n      loadEntries();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to add entry\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const totalAmount = (entries || []).reduce((sum, entry) => sum + entry.amount, 0);\n\n  if (loading && (entries || []).length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Fund Usage</CardTitle>\n            <div className=\"flex gap-sm\">\n              <Button variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-xs\" />\n                Export\n              </Button>\n              <Button onClick={() => setDialogOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-xs\" />\n                Add Entry\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Summary */}\n          <div className=\"flex items-center justify-between p-md bg-muted rounded-md\">\n            <span className=\"text-sm font-medium\">Total Expenditure:</span>\n            <span className=\"text-2xl font-bold\">\n              ${totalAmount.toLocaleString()}\n            </span>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-md items-center\">\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All categories</SelectItem>\n                <SelectItem value=\"medical\">Medical</SelectItem>\n                <SelectItem value=\"education\">Education</SelectItem>\n                <SelectItem value=\"food\">Food</SelectItem>\n                <SelectItem value=\"utilities\">Utilities</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Table */}\n          <div className=\"border rounded-md\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Campaign</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Receipts</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {(entries || []).length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-lg\">\n                      <p className=\"text-muted-foreground\">No fund usage entries</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  (entries || []).map((entry) => (\n                    <TableRow key={entry.id}>\n                      <TableCell className=\"font-medium\">\n                        {entry.campaignTitle || entry.campaignId}\n                      </TableCell>\n                      <TableCell>${entry.amount.toLocaleString()}</TableCell>\n                      <TableCell className=\"capitalize\">{entry.category}</TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {entry.description}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(entry.date).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        {entry.receiptUrls.length > 0 ? (\n                          <div className=\"flex gap-xs\">\n                            <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm\">\n                              {entry.receiptUrls.length}\n                            </span>\n                          </div>\n                        ) : (\n                          <span className=\"text-xs text-muted-foreground\">None</span>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Add Entry Dialog */}\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add Fund Usage Entry</DialogTitle>\n            <DialogDescription>\n              Record how campaign funds were used\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-md py-md\">\n            <div>\n              <Label htmlFor=\"campaign\">Campaign ID *</Label>\n              <Input\n                id=\"campaign\"\n                value={formData.campaignId}\n                onChange={(e) =>\n                  setFormData({ ...formData, campaignId: e.target.value })\n                }\n                placeholder=\"Enter campaign ID\"\n                className=\"mt-sm\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"amount\">Amount *</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  value={formData.amount}\n                  onChange={(e) =>\n                    setFormData({ ...formData, amount: e.target.value })\n                  }\n                  placeholder=\"0.00\"\n                  className=\"mt-sm\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select\n                  value={formData.category}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, category: value })\n                  }\n                >\n                  <SelectTrigger id=\"category\" className=\"mt-sm\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"medical\">Medical</SelectItem>\n                    <SelectItem value=\"education\">Education</SelectItem>\n                    <SelectItem value=\"food\">Food</SelectItem>\n                    <SelectItem value=\"utilities\">Utilities</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"date\">Date *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) =>\n                  setFormData({ ...formData, date: e.target.value })\n                }\n                className=\"mt-sm\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Description *</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) =>\n                  setFormData({ ...formData, description: e.target.value })\n                }\n                placeholder=\"Describe how funds were used...\"\n                className=\"mt-sm\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"receipts\">Receipts</Label>\n              <Input\n                id=\"receipts\"\n                type=\"file\"\n                multiple\n                accept=\"image/*,application/pdf\"\n                onChange={(e) =>\n                  setFiles(e.target.files ? Array.from(e.target.files) : [])\n                }\n                className=\"mt-sm\"\n              />\n              {files.length > 0 && (\n                <p className=\"text-xs text-muted-foreground mt-xs\">\n                  {files.length} file(s) selected\n                </p>\n              )}\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit}>Add Entry</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default FundUsagePage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\Notifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[678,681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[678,681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchNotifications'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNotifications]","fix":{"range":[954,956],"text":"[fetchNotifications]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Bell, Check, CheckCheck, Trash2, TrendingUp, Users, FileText, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface NotificationItem {\n  id: number;\n  title?: string;\n  message: string;\n  type?: string;\n  is_read: boolean;\n  created_at: string;\n  data?: any;\n}\n\nexport default function CharityNotifications() {\n  const [items, setItems] = useState<NotificationItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/me/notifications`, {\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' }\n      });\n      if (!res.ok) throw new Error('Failed to load notifications');\n      const payload = await res.json();\n      const list: NotificationItem[] = payload.data ?? payload;\n      setItems(list);\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to load notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (id: number) => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/${id}/read`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to mark as read');\n      setItems((prev) => prev.map(n => n.id === id ? { ...n, is_read: true } : n));\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to mark as read');\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/mark-all-read`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to mark all as read');\n      setItems((prev) => prev.map(n => ({ ...n, is_read: true })));\n      toast.success('All notifications marked as read');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to mark all as read');\n    }\n  };\n\n  const deleteNotification = async (id: number) => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to delete notification');\n      setItems((prev) => prev.filter(n => n.id !== id));\n      toast.success('Notification deleted');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to delete notification');\n    }\n  };\n\n  const getNotificationIcon = (type?: string) => {\n    switch (type) {\n      case 'donation_received':\n        return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n      case 'new_volunteer':\n        return <Users className=\"h-4 w-4 text-blue-600\" />;\n      case 'document_expiring':\n        return <FileText className=\"h-4 w-4 text-orange-600\" />;\n      case 'report_submitted':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-2\">\n          <Bell className=\"h-6 w-6\" /> Notifications\n        </h1>\n        <p className=\"text-muted-foreground\">Stay updated with your charity's activity and updates.</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Inbox</CardTitle>\n              <CardDescription>Your latest notifications</CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={fetchNotifications} disabled={loading}>\n                Refresh\n              </Button>\n              <Button variant=\"default\" size=\"sm\" onClick={markAllAsRead} disabled={loading || items.every(n => n.is_read)}>\n                <CheckCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"py-12 text-center text-muted-foreground\">Loading notifications...</div>\n          ) : items.length === 0 ? (\n            <div className=\"py-12 text-center text-muted-foreground\">No notifications yet.</div>\n          ) : (\n            <div className=\"space-y-4\">\n              {items.map((n) => (\n                <div key={n.id} className={`p-4 border rounded-lg ${!n.is_read ? 'bg-primary/5' : ''}`}>\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"mt-1\">\n                      {getNotificationIcon(n.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-medium\">\n                          {n.title || (n.type ? n.type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) : 'Notification')}\n                        </h3>\n                        <div className=\"flex items-center gap-2\">\n                          {n.is_read ? (\n                            <Badge variant=\"secondary\">Read</Badge>\n                          ) : (\n                            <Badge>Unread</Badge>\n                          )}\n                          <div className=\"flex gap-1\">\n                            {!n.is_read && (\n                              <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => markAsRead(n.id)}>\n                                <Check className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => deleteNotification(n.id)}>\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{n.message}</p>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        {new Date(n.created_at).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\OrganizationProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[792,795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[792,795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Building2, Upload, Save, X } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"sonner\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { authService } from \"@/services/auth\";\n\ninterface CharityData {\n  name: string;\n  acronym?: string;\n  mission: string;\n  vision?: string;\n  goals?: string;\n  contact_email: string;\n  contact_phone?: string;\n  website?: string;\n  address?: string;\n  logo_path?: string;\n  cover_image?: string;\n  documents?: any[];\n  services?: string;\n}\n\nexport default function OrganizationProfile() {\n  const [isEditing, setIsEditing] = useState(false);\n  const [logoPreview, setLogoPreview] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [charityData, setCharityData] = useState<CharityData | null>(null);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    acronym: \"\",\n    mission: \"\",\n    vision: \"\",\n    goals: \"\",\n    contact_email: \"\",\n    contact_phone: \"\",\n    website: \"\",\n    address: \"\",\n    services: \"\",\n  });\n\n  useEffect(() => {\n    loadCharityData();\n  }, []);\n\n  const loadCharityData = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/me`, {\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        const charity = userData?.charity;\n\n        if (charity) {\n          setCharityData(charity);\n          setFormData({\n            name: charity.name || \"\",\n            acronym: charity.acronym || \"\",\n            mission: charity.mission || \"\",\n            vision: charity.vision || \"\",\n            goals: charity.goals || \"\",\n            contact_email: charity.contact_email || \"\",\n            contact_phone: charity.contact_phone || \"\",\n            website: charity.website || \"\",\n            address: charity.address || \"\",\n            services: charity.services || \"\",\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error loading charity data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setLogoPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n      toast.success(\"Logo uploaded successfully\");\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      // Check both localStorage and sessionStorage for token\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!token) {\n        toast.error('Please login first');\n        return;\n      }\n\n      const updateFormData = new FormData();\n      updateFormData.append('name', formData.name);\n      updateFormData.append('acronym', formData.acronym);\n      updateFormData.append('mission', formData.mission);\n      updateFormData.append('vision', formData.vision);\n      updateFormData.append('goals', formData.goals);\n      updateFormData.append('contact_email', formData.contact_email);\n      updateFormData.append('contact_phone', formData.contact_phone);\n      updateFormData.append('website', formData.website);\n      updateFormData.append('address', formData.address);\n      updateFormData.append('services', formData.services);\n\n      if (logoPreview) {\n        // Convert base64 to file if needed\n        const response = await fetch(logoPreview);\n        const blob = await response.blob();\n        updateFormData.append('logo', blob, 'logo.jpg');\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/me`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: updateFormData\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update organization profile');\n      }\n\n      const updatedUser = await response.json();\n      toast.success(\"Organization profile updated successfully\");\n      setIsEditing(false);\n\n      // Note: The UI will automatically reflect changes through React state updates\n\n    } catch (error) {\n      console.error('Error updating organization profile:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update organization profile');\n    }\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    // Reset form data to original charity data\n    if (charityData) {\n      setFormData({\n        name: charityData.name || \"\",\n        acronym: charityData.acronym || \"\",\n        mission: charityData.mission || \"\",\n        vision: charityData.vision || \"\",\n        goals: charityData.goals || \"\",\n        contact_email: charityData.contact_email || \"\",\n        contact_phone: charityData.contact_phone || \"\",\n        website: charityData.website || \"\",\n        address: charityData.address || \"\",\n        services: charityData.services || \"\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-4 py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Organization Profile</h1>\n          <p className=\"text-muted-foreground text-sm\">\n            Manage your charity organization information\n          </p>\n        </div>\n        {!isEditing ? (\n          <Button onClick={() => setIsEditing(true)}>\n            Edit Profile\n          </Button>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Button onClick={handleSave}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              Save Changes\n            </Button>\n            <Button variant=\"outline\" onClick={handleCancel}>\n              <X className=\"mr-2 h-4 w-4\" />\n              Cancel\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Logo Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Organization Logo</CardTitle>\n          <CardDescription>Upload your charity's logo</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-6\">\n            <div className=\"h-32 w-32 rounded-lg border-2 border-dashed flex items-center justify-center bg-muted\">\n              {logoPreview ? (\n                <img src={logoPreview} alt=\"Logo\" className=\"h-full w-full object-cover rounded-lg\" />\n              ) : charityData?.logo_path ? (\n                <img\n                  src={`${import.meta.env.VITE_API_URL}/storage/${charityData.logo_path}`}\n                  alt=\"Organization Logo\"\n                  className=\"h-full w-full object-cover rounded-lg\"\n                />\n              ) : (\n                <Building2 className=\"h-16 w-16 text-muted-foreground\" />\n              )}\n            </div>\n            {isEditing && (\n              <div>\n                <Label htmlFor=\"logo\" className=\"cursor-pointer\">\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90\">\n                    <Upload className=\"h-4 w-4\" />\n                    Upload Logo\n                  </div>\n                  <Input\n                    id=\"logo\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"hidden\"\n                    onChange={handleLogoUpload}\n                  />\n                </Label>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  PNG, JPG up to 2MB\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Basic Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic Information</CardTitle>\n          <CardDescription>Organization details and registration</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Organization Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                disabled={!isEditing}\n                className={!isEditing ? \"bg-muted\" : \"\"}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"acronym\">Acronym</Label>\n              <Input\n                id=\"acronym\"\n                value={formData.acronym}\n                onChange={(e) => handleInputChange('acronym', e.target.value)}\n                disabled={!isEditing}\n                className={!isEditing ? \"bg-muted\" : \"\"}\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mission & Vision */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Mission, Vision & Goals</CardTitle>\n          <CardDescription>Your organization's purpose and objectives</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"mission\">Mission Statement *</Label>\n            <Textarea\n              id=\"mission\"\n              value={formData.mission}\n              onChange={(e) => handleInputChange('mission', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"vision\">Vision Statement</Label>\n            <Textarea\n              id=\"vision\"\n              value={formData.vision}\n              onChange={(e) => handleInputChange('vision', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goals\">Goals</Label>\n            <Textarea\n              id=\"goals\"\n              value={formData.goals}\n              onChange={(e) => handleInputChange('goals', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n              rows={2}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"services\">Services Provided</Label>\n            <Textarea\n              id=\"services\"\n              value={formData.services}\n              onChange={(e) => handleInputChange('services', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n              rows={2}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Contact Information</CardTitle>\n          <CardDescription>How people can reach your organization</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"website\">Website</Label>\n            <Input\n              id=\"website\"\n              type=\"url\"\n              value={formData.website}\n              onChange={(e) => handleInputChange('website', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"contactEmail\">Contact Email *</Label>\n              <Input\n                id=\"contactEmail\"\n                type=\"email\"\n                value={formData.contact_email}\n                onChange={(e) => handleInputChange('contact_email', e.target.value)}\n                disabled={!isEditing}\n                className={!isEditing ? \"bg-muted\" : \"\"}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"contactPhone\">Contact Phone</Label>\n              <Input\n                id=\"contactPhone\"\n                type=\"tel\"\n                value={formData.contact_phone}\n                onChange={(e) => handleInputChange('contact_phone', e.target.value)}\n                disabled={!isEditing}\n                className={!isEditing ? \"bg-muted\" : \"\"}\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"address\">Address</Label>\n            <Textarea\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              disabled={!isEditing}\n              className={!isEditing ? \"bg-muted\" : \"\"}\n              rows={2}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Verification Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Verification Status</CardTitle>\n          <CardDescription>Your organization's verification details</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Current Status</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Your organization verification status\n              </p>\n            </div>\n            <Badge className=\"bg-green-600\">Verified</Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\ReportsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\RolesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\TemplatesPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\VerificationQueuePage.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTasks'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [loadTasks, page, statusFilter]","fix":{"range":[1549,1569],"text":"[loadTasks, page, statusFilter]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  listVerificationTasks,\n  updateVerificationTask,\n  addTaskComment,\n} from \"@/services/apiCharity\";\nimport type { VerificationTask } from \"@/types/charity\";\nimport { MessageSquare, User, Calendar, AlertCircle } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\n\n/**\n * Verification Queue / Tasks Page\n * Kanban-style or list view of verification tasks\n */\nconst VerificationQueuePage = () => {\n  const [tasks, setTasks] = useState<VerificationTask[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedTask, setSelectedTask] = useState<VerificationTask | null>(null);\n  const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n  const [newComment, setNewComment] = useState(\"\");\n\n  useEffect(() => {\n    loadTasks();\n  }, [page, statusFilter]);\n\n  const loadTasks = async () => {\n    try {\n      setLoading(true);\n      const response = await listVerificationTasks({\n        page,\n        pageSize: 20,\n        status: statusFilter === \"all\" ? undefined : statusFilter,\n        sortBy: \"createdAt\",\n        sortOrder: \"desc\",\n      });\n      setTasks(response.data);\n      setTotalPages(response.pagination.totalPages);\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to load tasks\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAssign = async (taskId: string, assignedTo: string) => {\n    try {\n      await updateVerificationTask(taskId, { assignedTo });\n      toast({ title: \"Success\", description: \"Task assigned\" });\n      loadTasks();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Assignment failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleStatusChange = async (taskId: string, status: VerificationTask[\"status\"]) => {\n    try {\n      await updateVerificationTask(taskId, { status });\n      toast({ title: \"Success\", description: \"Status updated\" });\n      loadTasks();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Update failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleAddComment = async () => {\n    if (!selectedTask || !newComment.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a comment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    try {\n      const updated = await addTaskComment(selectedTask.id, newComment);\n      setSelectedTask(updated);\n      setNewComment(\"\");\n      toast({ title: \"Success\", description: \"Comment added\" });\n      loadTasks();\n    } catch (err) {\n      toast({\n        title: \"Error\",\n        description: err instanceof Error ? err.message : \"Failed to add comment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: VerificationTask[\"status\"]) => {\n    const variants: Record<VerificationTask[\"status\"], string> = {\n      pending: \"bg-warning/10 text-warning\",\n      in_progress: \"bg-accent/10 text-accent-foreground\",\n      completed: \"bg-success/10 text-success\",\n      blocked: \"bg-destructive/10 text-destructive\",\n    };\n    return (\n      <Badge variant=\"outline\" className={variants[status]}>\n        {status.replace(\"_\", \" \")}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: VerificationTask[\"priority\"]) => {\n    const variants: Record<VerificationTask[\"priority\"], string> = {\n      low: \"bg-muted text-muted-foreground\",\n      medium: \"bg-accent/10 text-accent-foreground\",\n      high: \"bg-destructive/10 text-destructive\",\n    };\n    return (\n      <Badge variant=\"outline\" className={variants[priority]}>\n        {priority}\n      </Badge>\n    );\n  };\n\n  if (loading && tasks.length === 0) {\n    return (\n      <div className=\"p-lg\">\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-8 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg space-y-lg\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Verification Queue</CardTitle>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All statuses</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"blocked\">Blocked</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Task Cards */}\n          <div className=\"grid gap-md md:grid-cols-2 lg:grid-cols-3\">\n            {tasks.length === 0 ? (\n              <div className=\"col-span-full text-center py-2xl\">\n                <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-md\" />\n                <p className=\"text-muted-foreground\">No verification tasks</p>\n              </div>\n            ) : (\n              tasks.map((task) => (\n                <Card\n                  key={task.id}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => {\n                    setSelectedTask(task);\n                    setDetailDialogOpen(true);\n                  }}\n                >\n                  <CardHeader className=\"pb-sm\">\n                    <div className=\"flex items-start justify-between gap-sm\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-base mb-xs\">{task.title}</CardTitle>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {task.charityName}\n                        </p>\n                      </div>\n                      {getPriorityBadge(task.priority)}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-sm\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Status:</span>\n                      {getStatusBadge(task.status)}\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Document:</span>\n                      <span className=\"font-medium capitalize\">{task.documentType}</span>\n                    </div>\n                    {task.assignedToName && (\n                      <div className=\"flex items-center gap-xs text-xs\">\n                        <User className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{task.assignedToName}</span>\n                      </div>\n                    )}\n                    {task.dueDate && (\n                      <div className=\"flex items-center gap-xs text-xs\">\n                        <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                        <span>{new Date(task.dueDate).toLocaleDateString()}</span>\n                      </div>\n                    )}\n                    {task.comments.length > 0 && (\n                      <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                        <MessageSquare className=\"h-3 w-3\" />\n                        <span>{task.comments.length} comments</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between pt-md\">\n            <p className=\"text-sm text-muted-foreground\">\n              Page {page} of {totalPages}\n            </p>\n            <div className=\"flex gap-sm\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === 1}\n                onClick={() => setPage(page - 1)}\n              >\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={page === totalPages}\n                onClick={() => setPage(page + 1)}\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Task Detail Dialog */}\n      {selectedTask && (\n        <Dialog open={detailDialogOpen} onOpenChange={setDetailDialogOpen}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{selectedTask.title}</DialogTitle>\n              <DialogDescription>{selectedTask.charityName}</DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-md py-md\">\n              {/* Task Info */}\n              <div className=\"grid grid-cols-2 gap-md text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Status:</p>\n                  {getStatusBadge(selectedTask.status)}\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Priority:</p>\n                  {getPriorityBadge(selectedTask.priority)}\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Document Type:</p>\n                  <p className=\"font-medium capitalize\">{selectedTask.documentType}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Created:</p>\n                  <p className=\"font-medium\">\n                    {new Date(selectedTask.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"assign-to\">Assign To</Label>\n                  <Select\n                    value={selectedTask.assignedTo || \"\"}\n                    onValueChange={(value) =>\n                      handleAssign(selectedTask.id, value)\n                    }\n                  >\n                    <SelectTrigger id=\"assign-to\" className=\"mt-sm\">\n                      <SelectValue placeholder=\"Unassigned\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"admin1\">Admin User 1</SelectItem>\n                      <SelectItem value=\"admin2\">Admin User 2</SelectItem>\n                      <SelectItem value=\"reviewer1\">Reviewer 1</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"change-status\">Change Status</Label>\n                  <Select\n                    value={selectedTask.status}\n                    onValueChange={(value) =>\n                      handleStatusChange(\n                        selectedTask.id,\n                        value as VerificationTask[\"status\"]\n                      )\n                    }\n                  >\n                    <SelectTrigger id=\"change-status\" className=\"mt-sm\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"blocked\">Blocked</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Comments */}\n              <div className=\"space-y-sm\">\n                <h3 className=\"font-medium\">Internal Comments</h3>\n                <div className=\"space-y-md max-h-48 overflow-y-auto\">\n                  {selectedTask.comments.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground text-center py-md\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    selectedTask.comments.map((comment) => (\n                      <div\n                        key={comment.id}\n                        className=\"border-l-2 border-border pl-md space-y-xs\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">\n                            {comment.userName}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(comment.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {comment.comment}\n                        </p>\n                      </div>\n                    ))\n                  )}\n                </div>\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"new-comment\">Add Comment</Label>\n                  <Textarea\n                    id=\"new-comment\"\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    placeholder=\"Add an internal note...\"\n                    className=\"mt-sm\"\n                  />\n                  <Button size=\"sm\" onClick={handleAddComment}>\n                    Add Comment\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setDetailDialogOpen(false)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n};\n\nexport default VerificationQueuePage;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\charity\\Volunteers.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[982,985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[982,985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCampaigns' and 'fetchVolunteers'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [user, statusFilter, roleFilter, searchTerm, fetchVolunteers, fetchCampaigns]","fix":{"range":[2196,2240],"text":"[user, statusFilter, roleFilter, searchTerm, fetchVolunteers, fetchCampaigns]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3503,3506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3503,3506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3935,3938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3935,3938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Users, Phone, Mail, MapPin, Calendar, Search, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\nimport { useAuth } from \"@/context/AuthContext\";\n\ninterface Volunteer {\n  id: number;\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  role: string;\n  skills?: string;\n  experience?: string;\n  status: string;\n  availability?: any;\n  joined_at: string;\n  emergency_contact_name?: string;\n  emergency_contact_phone?: string;\n  campaign?: {\n    id: number;\n    title: string;\n  };\n}\n\ninterface Campaign {\n  id: number;\n  title: string;\n}\n\nexport default function CharityVolunteers() {\n  const { user } = useAuth();\n  const [volunteers, setVolunteers] = useState<Volunteer[]>([]);\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [selectedVolunteer, setSelectedVolunteer] = useState<Volunteer | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    role: \"field_worker\",\n    skills: \"\",\n    experience: \"\",\n    campaign_id: \"\",\n    emergency_contact_name: \"\",\n    emergency_contact_phone: \"\",\n  });\n\n  useEffect(() => {\n    if (user?.charity?.id) {\n      fetchVolunteers();\n      fetchCampaigns();\n    }\n  }, [user, statusFilter, roleFilter, searchTerm]);\n\n  const fetchVolunteers = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      if (roleFilter !== \"all\") params.append(\"role\", roleFilter);\n      if (searchTerm) params.append(\"search\", searchTerm);\n\n      const response = await axios.get(`/api/charities/${user?.charity?.id}/volunteers?${params.toString()}`);\n      setVolunteers(response.data.data);\n    } catch (error) {\n      toast.error(\"Failed to fetch volunteers\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCampaigns = async () => {\n    try {\n      const response = await axios.get(`/api/charities/${user?.charity?.id}/campaigns`);\n      setCampaigns(response.data.data);\n    } catch (error) {\n      console.error(\"Failed to fetch campaigns:\", error);\n    }\n  };\n\n  const handleCreate = async () => {\n    if (!formData.name || !formData.email || !formData.role) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    try {\n      await axios.post(`/api/charities/${user?.charity?.id}/volunteers`, formData);\n      toast.success(\"Volunteer added successfully\");\n      setIsCreateOpen(false);\n      resetForm();\n      fetchVolunteers();\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || \"Failed to add volunteer\");\n    }\n  };\n\n  const handleEdit = async () => {\n    if (!selectedVolunteer) return;\n\n    try {\n      await axios.put(`/api/charities/${user?.charity?.id}/volunteers/${selectedVolunteer.id}`, formData);\n      toast.success(\"Volunteer updated successfully\");\n      setIsEditOpen(false);\n      resetForm();\n      fetchVolunteers();\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || \"Failed to update volunteer\");\n    }\n  };\n\n  const handleDelete = async (volunteer: Volunteer) => {\n    if (!confirm(`Are you sure you want to remove ${volunteer.name}?`)) return;\n\n    try {\n      await axios.delete(`/api/charities/${user?.charity?.id}/volunteers/${volunteer.id}`);\n      toast.success(\"Volunteer removed successfully\");\n      fetchVolunteers();\n    } catch (error) {\n      toast.error(\"Failed to remove volunteer\");\n    }\n  };\n\n  const openCreateDialog = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const openEditDialog = (volunteer: Volunteer) => {\n    setSelectedVolunteer(volunteer);\n    setFormData({\n      name: volunteer.name,\n      email: volunteer.email,\n      phone: volunteer.phone || \"\",\n      address: volunteer.address || \"\",\n      role: volunteer.role,\n      skills: volunteer.skills || \"\",\n      experience: volunteer.experience || \"\",\n      campaign_id: volunteer.campaign?.id?.toString() || \"\",\n      emergency_contact_name: volunteer.emergency_contact_name || \"\",\n      emergency_contact_phone: volunteer.emergency_contact_phone || \"\",\n    });\n    setIsEditOpen(true);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      role: \"field_worker\",\n      skills: \"\",\n      experience: \"\",\n      campaign_id: \"\",\n      emergency_contact_name: \"\",\n      emergency_contact_phone: \"\",\n    });\n    setSelectedVolunteer(null);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const colors = {\n      active: \"bg-green-100 text-green-800\",\n      inactive: \"bg-gray-100 text-gray-800\",\n      on_leave: \"bg-yellow-100 text-yellow-800\",\n    };\n\n    return (\n      <Badge className={colors[status as keyof typeof colors]}>\n        {status.replace(\"_\", \" \").toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatRole = (role: string) => {\n    return role.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Volunteer Management</h1>\n          <p className=\"text-muted-foreground\">Manage your organization's volunteers</p>\n        </div>\n        <Button onClick={openCreateDialog}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Volunteer\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search volunteers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n                <SelectItem value=\"on_leave\">On Leave</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"field_worker\">Field Worker</SelectItem>\n                <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                <SelectItem value=\"driver\">Driver</SelectItem>\n                <SelectItem value=\"medical_staff\">Medical Staff</SelectItem>\n                <SelectItem value=\"teacher\">Teacher</SelectItem>\n                <SelectItem value=\"fundraiser\">Fundraiser</SelectItem>\n                <SelectItem value=\"social_media\">Social Media</SelectItem>\n                <SelectItem value=\"photographer\">Photographer</SelectItem>\n                <SelectItem value=\"translator\">Translator</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Volunteers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {volunteers.map((volunteer) => (\n          <Card key={volunteer.id}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-lg\">{volunteer.name}</CardTitle>\n                  <CardDescription>{formatRole(volunteer.role)}</CardDescription>\n                </div>\n                {getStatusBadge(volunteer.status)}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>{volunteer.email}</span>\n                </div>\n                {volunteer.phone && (\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                    <span>{volunteer.phone}</span>\n                  </div>\n                )}\n                {volunteer.address && (\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"truncate\">{volunteer.address}</span>\n                  </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span>Joined {new Date(volunteer.joined_at).toLocaleDateString()}</span>\n                </div>\n              </div>\n              \n              {volunteer.campaign && (\n                <div className=\"text-sm\">\n                  <span className=\"font-medium\">Campaign:</span> {volunteer.campaign.title}\n                </div>\n              )}\n\n              {volunteer.skills && (\n                <div className=\"text-sm\">\n                  <span className=\"font-medium\">Skills:</span>\n                  <p className=\"text-muted-foreground mt-1\">{volunteer.skills}</p>\n                </div>\n              )}\n\n              <div className=\"flex gap-2 pt-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => openEditDialog(volunteer)}\n                  className=\"flex-1\"\n                >\n                  <Edit className=\"h-3 w-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleDelete(volunteer)}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {volunteers.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No volunteers found.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">\n              Add your first volunteer to get started with team management.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Volunteer Dialog */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add New Volunteer</DialogTitle>\n            <DialogDescription>\n              Register a new volunteer for your organization\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Name *</label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"Full name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Email *</label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  placeholder=\"Email address\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Phone</label>\n                <Input\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  placeholder=\"Phone number\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Role *</label>\n                <Select value={formData.role} onValueChange={(value) => setFormData({ ...formData, role: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"field_worker\">Field Worker</SelectItem>\n                    <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                    <SelectItem value=\"driver\">Driver</SelectItem>\n                    <SelectItem value=\"medical_staff\">Medical Staff</SelectItem>\n                    <SelectItem value=\"teacher\">Teacher</SelectItem>\n                    <SelectItem value=\"fundraiser\">Fundraiser</SelectItem>\n                    <SelectItem value=\"social_media\">Social Media</SelectItem>\n                    <SelectItem value=\"photographer\">Photographer</SelectItem>\n                    <SelectItem value=\"translator\">Translator</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Address</label>\n              <Textarea\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                placeholder=\"Full address\"\n                rows={2}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Campaign (Optional)</label>\n              <Select value={formData.campaign_id} onValueChange={(value) => setFormData({ ...formData, campaign_id: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Assign to campaign\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">No specific campaign</SelectItem>\n                  {campaigns.map((campaign) => (\n                    <SelectItem key={campaign.id} value={campaign.id.toString()}>\n                      {campaign.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Skills</label>\n              <Textarea\n                value={formData.skills}\n                onChange={(e) => setFormData({ ...formData, skills: e.target.value })}\n                placeholder=\"List relevant skills and expertise\"\n                rows={2}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Experience</label>\n              <Textarea\n                value={formData.experience}\n                onChange={(e) => setFormData({ ...formData, experience: e.target.value })}\n                placeholder=\"Previous volunteer or relevant experience\"\n                rows={2}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Emergency Contact Name</label>\n                <Input\n                  value={formData.emergency_contact_name}\n                  onChange={(e) => setFormData({ ...formData, emergency_contact_name: e.target.value })}\n                  placeholder=\"Emergency contact name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Emergency Contact Phone</label>\n                <Input\n                  value={formData.emergency_contact_phone}\n                  onChange={(e) => setFormData({ ...formData, emergency_contact_phone: e.target.value })}\n                  placeholder=\"Emergency contact phone\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreate}>\n                Add Volunteer\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Volunteer Dialog */}\n      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Volunteer</DialogTitle>\n            <DialogDescription>\n              Update volunteer information\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Name *</label>\n                <Input\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  placeholder=\"Full name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Email *</label>\n                <Input\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  placeholder=\"Email address\"\n                />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Phone</label>\n                <Input\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  placeholder=\"Phone number\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Role *</label>\n                <Select value={formData.role} onValueChange={(value) => setFormData({ ...formData, role: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"field_worker\">Field Worker</SelectItem>\n                    <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                    <SelectItem value=\"driver\">Driver</SelectItem>\n                    <SelectItem value=\"medical_staff\">Medical Staff</SelectItem>\n                    <SelectItem value=\"teacher\">Teacher</SelectItem>\n                    <SelectItem value=\"fundraiser\">Fundraiser</SelectItem>\n                    <SelectItem value=\"social_media\">Social Media</SelectItem>\n                    <SelectItem value=\"photographer\">Photographer</SelectItem>\n                    <SelectItem value=\"translator\">Translator</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Address</label>\n              <Textarea\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                placeholder=\"Full address\"\n                rows={2}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Campaign (Optional)</label>\n              <Select value={formData.campaign_id} onValueChange={(value) => setFormData({ ...formData, campaign_id: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Assign to campaign\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">No specific campaign</SelectItem>\n                  {campaigns.map((campaign) => (\n                    <SelectItem key={campaign.id} value={campaign.id.toString()}>\n                      {campaign.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Skills</label>\n              <Textarea\n                value={formData.skills}\n                onChange={(e) => setFormData({ ...formData, skills: e.target.value })}\n                placeholder=\"List relevant skills and expertise\"\n                rows={2}\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Experience</label>\n              <Textarea\n                value={formData.experience}\n                onChange={(e) => setFormData({ ...formData, experience: e.target.value })}\n                placeholder=\"Previous volunteer or relevant experience\"\n                rows={2}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Emergency Contact Name</label>\n                <Input\n                  value={formData.emergency_contact_name}\n                  onChange={(e) => setFormData({ ...formData, emergency_contact_name: e.target.value })}\n                  placeholder=\"Emergency contact name\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Emergency Contact Phone</label>\n                <Input\n                  value={formData.emergency_contact_phone}\n                  onChange={(e) => setFormData({ ...formData, emergency_contact_phone: e.target.value })}\n                  placeholder=\"Emergency contact phone\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsEditOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleEdit}>\n                Update Volunteer\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\BrowseCharities.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCharities'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [searchTerm, categoryFilter, regionFilter, sortBy, currentPage, fetchCharities]","fix":{"range":[2413,2476],"text":"[searchTerm, categoryFilter, regionFilter, sortBy, currentPage, fetchCharities]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchFollowStatuses'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [charities, fetchFollowStatuses]","fix":{"range":[3874,3885],"text":"[charities, fetchFollowStatuses]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Search, Heart, MapPin, CheckCircle, Eye, Filter, SortAsc, UserPlus, UserMinus } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface Charity {\n  id: number;\n  name: string;\n  mission?: string;\n  vision?: string;\n  category?: string;\n  region?: string;\n  municipality?: string;\n  logo_path?: string;\n  verification_status: string;\n  created_at: string;\n}\n\ninterface ApiResponse {\n  charities: {\n    data: Charity[];\n    current_page: number;\n    last_page: number;\n    per_page: number;\n    total: number;\n  };\n  filters: {\n    categories: string[];\n    regions: string[];\n  };\n}\n\nexport default function BrowseCharities() {\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [regionFilter, setRegionFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [selectedCharity, setSelectedCharity] = useState<Charity | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [charities, setCharities] = useState<Charity[]>([]);\n  const [filters, setFilters] = useState({ categories: [], regions: [] });\n\n  // Handle donation navigation\n  const handleDonate = (charityId: number) => {\n    navigate(`/donor/donate/${charityId}`);\n  };\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  \n  // Add missing reset function to avoid runtime ReferenceError\n  const resetFilters = () => {\n    setSearchTerm(\"\");\n    setCategoryFilter(\"all\");\n    setRegionFilter(\"all\");\n    setSortBy(\"name\");\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    fetchCharities();\n  }, [searchTerm, categoryFilter, regionFilter, sortBy, currentPage]);\n\n  const fetchCharities = async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        ...(searchTerm && { q: searchTerm }),\n        ...(categoryFilter !== 'all' && { category: categoryFilter }),\n        ...(regionFilter !== 'all' && { region: regionFilter }),\n        ...(sortBy && { sort: sortBy }),\n      });\n\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch charities');\n\n      const data: ApiResponse = await response.json();\n      setCharities(data.charities.data || []);\n      setFilters(data.filters || { categories: [], regions: [] });\n      setTotalPages(data.charities.last_page);\n    } catch (error) {\n      console.error('Error fetching charities:', error);\n      toast.error('Failed to load charities');\n      setCharities([]);\n      setFilters({ categories: [], regions: [] });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewDetails = (charity: Charity) => {\n    setSelectedCharity(charity);\n    setIsDetailsOpen(true);\n  };\n\n  const [followStatus, setFollowStatus] = useState<{[key: number]: boolean}>({});\n  const [followedCharities, setFollowedCharities] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (charities.length > 0) {\n      fetchFollowStatuses();\n    }\n  }, [charities]);\n\n  const fetchFollowStatuses = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n\n      const statusPromises = charities.map(async (charity) => {\n        try {\n          const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities/${charity.id}/follow-status`, {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          });\n          if (response.ok) {\n            const data = await response.json();\n            return { charityId: charity.id, isFollowing: data.is_following };\n          }\n        } catch (error) {\n          console.error(`Error fetching follow status for charity ${charity.id}:`, error);\n        }\n        return { charityId: charity.id, isFollowing: false };\n      });\n\n      const statuses = await Promise.all(statusPromises);\n      const statusMap: {[key: number]: boolean} = {};\n      statuses.forEach(status => {\n        statusMap[status.charityId] = status.isFollowing;\n      });\n      setFollowStatus(statusMap);\n    } catch (error) {\n      console.error('Error fetching follow statuses:', error);\n    }\n  };\n\n  const handleToggleFollow = async (charityId: number) => {\n    try {\n      const token = authService.getToken();\n      if (!token) {\n        toast.error('Please login to follow charities');\n        return;\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities/${charityId}/follow`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update follow status');\n      }\n\n      const data = await response.json();\n      setFollowStatus(prev => ({\n        ...prev,\n        [charityId]: data.is_following\n      }));\n\n      toast.success(data.message);\n\n    } catch (error) {\n      console.error('Error toggling follow:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update follow status');\n    }\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-primary/10 via-primary/5 to-background border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Browse Charities</h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Discover verified organizations making a difference\n          </p>\n\n          {/* Search and Filter */}\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search charities...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                />\n              </div>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {filters.categories && filters.categories.map(cat => (\n                    <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={regionFilter} onValueChange={setRegionFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"Region\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Regions</SelectItem>\n                  {filters.regions && filters.regions.map(region => (\n                    <SelectItem key={region} value={region}>{region}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name</SelectItem>\n                  <SelectItem value=\"newest\">Newest</SelectItem>\n                  <SelectItem value=\"total_received\">Most Raised</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <Button variant=\"outline\" onClick={resetFilters}>\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Reset Filters\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-12\">\n        {/* Results Count and Loading */}\n        <div className=\"mb-6 flex justify-between items-center\">\n          <p className=\"text-muted-foreground\">\n            {loading ? 'Loading...' : `Showing ${charities.length} of ${filters.categories.length > 0 ? 'many' : '0'} charities`}\n          </p>\n          {charities.length > 0 && (\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                disabled={currentPage === 1}\n              >\n                Previous\n              </Button>\n              <span className=\"px-3 py-2 text-sm\">\n                Page {currentPage} of {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                disabled={currentPage === totalPages}\n              >\n                Next\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {/* Charities Grid */}\n        {loading ? (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <div className=\"h-48 bg-muted rounded-t-lg\"></div>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-8 bg-muted rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {charities.map((charity) => (\n              <Card key={charity.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                <div className=\"h-48 overflow-hidden relative\">\n                  <img\n                    src={charity.logo_path ? `${import.meta.env.VITE_API_URL}/storage/${charity.logo_path}` : \"https://images.unsplash.com/photo-1488521787991-ed7bbaae773c?w=600\"}\n                    alt={charity.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  {charity.verification_status === 'approved' && (\n                    <Badge className=\"absolute top-2 right-2 bg-green-600\">\n                      <CheckCircle className=\"mr-1 h-3 w-3\" />\n                      Verified\n                    </Badge>\n                  )}\n                </div>\n                <CardHeader>\n                  <CardTitle className=\"text-xl\">{charity.name}</CardTitle>\n                  <CardDescription className=\"line-clamp-2\">\n                    {charity.mission || 'Making a difference in our community'}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MapPin className=\"h-4 w-4\" />\n                    {charity.region && charity.municipality ? `${charity.municipality}, ${charity.region}` : charity.region || 'Location not specified'}\n                  </div>\n                  {charity.category && (\n                    <Badge variant=\"outline\">{charity.category}</Badge>\n                  )}\n                  <div className=\"text-sm\">\n                    <p className=\"text-muted-foreground\">Verified</p>\n                    <p className=\"text-lg font-bold text-green-600\">\n                      {charity.verification_status === 'approved' ? '✓ Approved' : '⏳ Pending'}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      className=\"flex-1\"\n                      onClick={() => handleDonate(charity.id)}\n                    >\n                      <Heart className=\"mr-2 h-4 w-4\" />\n                      Donate\n                    </Button>\n                    <Button\n                      variant={followStatus[charity.id] ? \"default\" : \"outline\"}\n                      onClick={() => handleToggleFollow(charity.id)}\n                    >\n                      {followStatus[charity.id] ? (\n                        <>\n                          <UserMinus className=\"mr-2 h-4 w-4\" />\n                          Unfollow\n                        </>\n                      ) : (\n                        <>\n                          <UserPlus className=\"mr-2 h-4 w-4\" />\n                          Follow\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => navigate(`/donor/charities/${charity.id}`)}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Empty State */}\n        {!loading && charities.length === 0 && (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No charities found matching your criteria. Try adjusting your search or filters.\n            </p>\n          </Card>\n        )}\n      </div>\n\n      {/* Charity Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">{selectedCharity?.name}</DialogTitle>\n            <DialogDescription>\n              {selectedCharity?.verification_status === 'approved' && (\n                <Badge className=\"bg-green-600 mt-2\">\n                  <CheckCircle className=\"mr-1 h-3 w-3\" />\n                  Verified Organization\n                </Badge>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedCharity && (\n            <div className=\"space-y-6\">\n              <img\n                src={selectedCharity.logo_path ? `${import.meta.env.VITE_API_URL}/storage/${selectedCharity.logo_path}` : \"https://images.unsplash.com/photo-1488521787991-ed7bbaae773c?w=600\"}\n                alt={selectedCharity.name}\n                className=\"w-full h-64 object-cover rounded-lg\"\n              />\n\n              <Tabs defaultValue=\"about\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"about\">About</TabsTrigger>\n                  <TabsTrigger value=\"impact\">Impact</TabsTrigger>\n                  <TabsTrigger value=\"contact\">Contact</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"about\" className=\"space-y-4 mt-4\">\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Mission</h3>\n                    <p className=\"text-muted-foreground\">{selectedCharity.mission || 'Mission statement not available'}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Vision</h3>\n                    <p className=\"text-muted-foreground\">{selectedCharity.vision || 'Vision statement not available'}</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {selectedCharity.category && (\n                      <div>\n                        <h3 className=\"font-semibold mb-2\">Category</h3>\n                        <Badge variant=\"outline\">{selectedCharity.category}</Badge>\n                      </div>\n                    )}\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">Location</h3>\n                      <p className=\"text-muted-foreground flex items-center gap-1\">\n                        <MapPin className=\"h-4 w-4\" />\n                        {selectedCharity.region && selectedCharity.municipality ? `${selectedCharity.municipality}, ${selectedCharity.region}` : selectedCharity.region || 'Location not specified'}\n                      </p>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"impact\" className=\"space-y-4 mt-4\">\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Verification Status</h3>\n                    <p className=\"text-muted-foreground\">\n                      {selectedCharity.verification_status === 'approved'\n                        ? 'This charity has been verified and approved by our administrators.'\n                        : 'This charity is pending verification.'}\n                    </p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Member Since</h3>\n                    <p className=\"text-muted-foreground\">\n                      {new Date(selectedCharity.created_at).toLocaleDateString()}\n                    </p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"contact\" className=\"space-y-4 mt-4\">\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Contact Information</h3>\n                    <p className=\"text-muted-foreground\">\n                      Contact details are available to verified donors.\n                    </p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex gap-2 pt-4 border-t\">\n                <Button className=\"flex-1\" onClick={() => {\n                  handleDonate(selectedCharity.id);\n                  setIsDetailsOpen(false);\n                }}>\n                  <Heart className=\"mr-2 h-4 w-4\" />\n                  Donate Now\n                </Button>\n                <Button\n                  variant={followStatus[selectedCharity.id] ? \"default\" : \"outline\"}\n                  onClick={() => {\n                    handleToggleFollow(selectedCharity.id);\n                    setIsDetailsOpen(false);\n                  }}\n                >\n                  {followStatus[selectedCharity.id] ? (\n                    <>\n                      <UserMinus className=\"mr-2 h-4 w-4\" />\n                      Unfollow\n                    </>\n                  ) : (\n                    <>\n                      <UserPlus className=\"mr-2 h-4 w-4\" />\n                      Follow\n                    </>\n                  )}\n                </Button>\n                <Button variant=\"outline\" onClick={() => setIsDetailsOpen(false)}>\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\CharityProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCharityPosts' and 'loadCharityProfile'. Either include them or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [id, loadCharityPosts, loadCharityProfile]","fix":{"range":[1813,1817],"text":"[id, loadCharityPosts, loadCharityProfile]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11102,11105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11102,11105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { Heart, MessageCircle, Share2, MapPin, Globe, Phone, Mail, Calendar, Award, Users, TrendingUp, FileText } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface CharityProfile {\n  id: number;\n  name: string;\n  acronym?: string;\n  mission: string;\n  vision?: string;\n  goals?: string;\n  category?: string;\n  region?: string;\n  municipality?: string;\n  logo_path?: string;\n  cover_image?: string;\n  website?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  address?: string;\n  verification_status: string;\n  verified_at?: string;\n  total_received?: number;\n  documents?: any[];\n}\n\ninterface Post {\n  id: number;\n  title: string;\n  content: string;\n  image_path?: string;\n  status: 'draft' | 'published';\n  published_at?: string;\n  created_at: string;\n  charity?: {\n    id: number;\n    name: string;\n    logo_path?: string;\n  };\n}\n\nexport default function CharityProfile() {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [charity, setCharity] = useState<CharityProfile | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isFollowing, setIsFollowing] = useState(false);\n\n  useEffect(() => {\n    if (id) {\n      loadCharityProfile();\n      loadCharityPosts();\n    }\n  }, [id]);\n\n  const loadCharityProfile = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities/${id}`);\n      if (response.ok) {\n        const data = await response.json();\n        setCharity(data);\n      }\n    } catch (error) {\n      console.error('Error loading charity profile:', error);\n      toast.error('Failed to load charity profile');\n    }\n  };\n\n  const loadCharityPosts = async () => {\n    try {\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities/${id}/posts`);\n      if (response.ok) {\n        const data = await response.json();\n        setPosts(data.data || []);\n      }\n    } catch (error) {\n      console.error('Error loading charity posts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFollowToggle = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) {\n        toast.error('Please login to follow charities');\n        return;\n      }\n\n      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/charities/${id}/follow`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setIsFollowing(data.is_following);\n        toast.success(data.message);\n      }\n    } catch (error) {\n      console.error('Error toggling follow:', error);\n      toast.error('Failed to update follow status');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading charity profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!charity) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-muted-foreground mb-2\">Charity Not Found</h1>\n          <p className=\"text-muted-foreground\">The charity you're looking for doesn't exist or isn't available.</p>\n          <Button className=\"mt-4\" onClick={() => navigate('/donor/charities')}>\n            Back to Charities\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Cover Image */}\n      <div className=\"relative h-64 md:h-80 bg-gradient-to-r from-primary/20 to-secondary/20\">\n        {charity.cover_image && (\n          <img\n            src={`${import.meta.env.VITE_API_URL}/storage/${charity.cover_image}`}\n            alt=\"Cover\"\n            className=\"w-full h-full object-cover\"\n          />\n        )}\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n      </div>\n\n      {/* Profile Header */}\n      <div className=\"relative px-4 pb-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row gap-6 -mt-16 md:-mt-20\">\n            {/* Avatar */}\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-32 h-32 md:w-40 md:h-40 rounded-full border-4 border-background bg-background p-2\">\n                {charity.logo_path ? (\n                  <img\n                    src={`${import.meta.env.VITE_API_URL}/storage/${charity.logo_path}`}\n                    alt={charity.name}\n                    className=\"w-full h-full rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full rounded-full bg-muted flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold text-muted-foreground\">\n                      {charity.acronym || charity.name.charAt(0)}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Charity Info */}\n            <div className=\"flex-1 pt-4 md:pt-8\">\n              <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                <div>\n                  <h1 className=\"text-2xl md:text-3xl font-bold\">{charity.name}</h1>\n                  {charity.acronym && (\n                    <p className=\"text-lg text-muted-foreground\">{charity.acronym}</p>\n                  )}\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    {charity.verification_status === 'approved' && (\n                      <Badge className=\"bg-green-600\">\n                        <Award className=\"w-3 h-3 mr-1\" />\n                        Verified\n                      </Badge>\n                    )}\n                    {charity.category && (\n                      <Badge variant=\"outline\">{charity.category}</Badge>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" onClick={handleFollowToggle}>\n                    <Heart className={`w-4 h-4 mr-2 ${isFollowing ? 'fill-current text-red-500' : ''}`} />\n                    {isFollowing ? 'Following' : 'Follow'}\n                  </Button>\n                  <Button variant=\"outline\">\n                    <Share2 className=\"w-4 h-4 mr-2\" />\n                    Share\n                  </Button>\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-3 gap-4 mt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    ₱{charity.total_received?.toLocaleString() || '0'}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Raised</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">0</div>\n                  <div className=\"text-sm text-muted-foreground\">Active Campaigns</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">0</div>\n                  <div className=\"text-sm text-muted-foreground\">Followers</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Mission & Vision */}\n          <div className=\"mt-8 grid md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"w-5 h-5\" />\n                  Mission\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">{charity.mission}</p>\n              </CardContent>\n            </Card>\n\n            {charity.vision && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    Vision\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{charity.vision}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Contact Info */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {charity.contact_email && (\n                  <div className=\"flex items-center gap-2\">\n                    <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>{charity.contact_email}</span>\n                  </div>\n                )}\n                {charity.contact_phone && (\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>{charity.contact_phone}</span>\n                  </div>\n                )}\n                {charity.website && (\n                  <div className=\"flex items-center gap-2\">\n                    <Globe className=\"w-4 h-4 text-muted-foreground\" />\n                    <a href={charity.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline\">\n                      {charity.website}\n                    </a>\n                  </div>\n                )}\n                {charity.address && (\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                    <span>{charity.address}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Documents */}\n          {charity.documents && charity.documents.length > 0 && (\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"w-5 h-5\" />\n                  Documents & Certificates\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-3\">\n                  {charity.documents.map((doc: any) => (\n                    <div key={doc.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{doc.doc_type}</p>\n                        <p className=\"text-sm text-muted-foreground\">Uploaded {new Date(doc.created_at).toLocaleDateString()}</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <FileText className=\"w-4 h-4 mr-2\" />\n                        View\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Posts Tab */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Recent Posts</CardTitle>\n              <CardDescription>Latest updates and campaigns from {charity.name}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {posts.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>No posts yet. Check back later for updates!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {posts.slice(0, 5).map((post) => (\n                    <Card key={post.id}>\n                      <CardHeader>\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"w-8 h-8\">\n                            <AvatarImage src={charity.logo_path ? `${import.meta.env.VITE_API_URL}/storage/${charity.logo_path}` : undefined} />\n                            <AvatarFallback>{charity.acronym || charity.name.charAt(0)}</AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-semibold\">{charity.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {post.published_at ? new Date(post.published_at).toLocaleDateString() : new Date(post.created_at).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <h3 className=\"font-semibold mb-2\">{post.title}</h3>\n                        <p className=\"text-muted-foreground line-clamp-3\">{post.content}</p>\n                        {post.image_path && (\n                          <img\n                            src={`${import.meta.env.VITE_API_URL}/storage/${post.image_path}`}\n                            alt={post.title}\n                            className=\"mt-3 rounded-lg max-h-64 w-full object-cover\"\n                          />\n                        )}\n                        <div className=\"flex items-center gap-4 mt-3 pt-3 border-t\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Heart className=\"w-4 h-4 mr-2\" />\n                            Like\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MessageCircle className=\"w-4 h-4 mr-2\" />\n                            Comment\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Share2 className=\"w-4 h-4 mr-2\" />\n                            Share\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\DonationHistory.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDonations'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDonations]","fix":{"range":[1802,1804],"text":"[fetchDonations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Download, Eye, Filter, Calendar } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface APIDonation {\n  id: number;\n  amount: number;\n  status: 'pending' | 'scheduled' | 'completed' | 'rejected';\n  is_recurring: boolean;\n  purpose: 'general' | 'project' | 'emergency';\n  donated_at: string;\n  receipt_no?: string | null;\n  charity: { id: number; name: string };\n  campaign?: { id: number; title: string } | null;\n}\n\ninterface DonationRow {\n  id: number;\n  charity: string;\n  campaign: string;\n  amount: number;\n  date: string;\n  status: 'pending' | 'scheduled' | 'completed' | 'rejected';\n  type: 'one-time' | 'recurring';\n  hasReceipt: boolean;\n}\n\nexport default function DonationHistory() {\n  const [donations, setDonations] = useState<DonationRow[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [selectedDonation, setSelectedDonation] = useState<DonationRow | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchDonations();\n  }, []);\n\n  const fetchDonations = async () => {\n    try {\n      setLoading(true);\n      const token = authService.getToken();\n      const res = await fetch(`${API_URL}/api/me/donations`, {\n        headers: {\n          Accept: 'application/json',\n          Authorization: token ? `Bearer ${token}` : ''\n        }\n      });\n      if (!res.ok) throw new Error('Failed to load donations');\n      const payload = await res.json();\n      const items: APIDonation[] = payload.data ?? payload; // handle paginate or array\n      const rows: DonationRow[] = items.map((d) => ({\n        id: d.id,\n        charity: d.charity?.name ?? 'Unknown Charity',\n        campaign: d.campaign?.title ?? 'General Fund',\n        amount: d.amount,\n        date: d.donated_at ?? new Date().toISOString(),\n        status: d.status,\n        type: d.is_recurring ? 'recurring' : 'one-time',\n        hasReceipt: !!d.receipt_no && d.status === 'completed',\n      }));\n      setDonations(rows);\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to fetch donations');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const downloadReceipt = async (donationId: number) => {\n    try {\n      const token = authService.getToken();\n      const res = await fetch(`${API_URL}/api/donations/${donationId}/receipt`, {\n        headers: {\n          Authorization: token ? `Bearer ${token}` : ''\n        }\n      });\n      if (res.status === 422) {\n        const data = await res.json();\n        throw new Error(data.message || 'Receipt not available');\n      }\n      if (!res.ok) throw new Error('Failed to download receipt');\n\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `donation-receipt-${donationId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      window.URL.revokeObjectURL(url);\n      toast.success('Receipt download started');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to download receipt');\n    }\n  };\n\n  const filteredDonations = filterStatus === \"all\"\n    ? donations\n    : donations.filter(d => d.status === filterStatus);\n\n  const totalDonated = donations\n    .filter(d => d.status === 'completed')\n    .reduce((sum, d) => sum + d.amount, 0);\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      case 'completed':\n        return <Badge className=\"bg-green-600\">Completed</Badge>;\n      case 'scheduled':\n        return <Badge variant=\"outline\">Scheduled</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const handleViewDetails = (donation: DonationRow) => {\n    setSelectedDonation(donation);\n    setIsDetailsOpen(true);\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-primary/10 via-primary/5 to-background border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Donation History</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Track all your contributions and their impact\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-12 space-y-6\">\n        {/* Stats */}\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Donated</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">\n                ₱{totalDonated.toLocaleString()}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Donations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{donations.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Charities Supported</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {new Set(donations.map(d => d.charity)).size}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Recurring Donations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {donations.filter(d => d.type === 'recurring').length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Donations Table */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>All Donations</CardTitle>\n                <CardDescription>Your complete donation history</CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <Filter className=\"mr-2 h-4 w-4\" />\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\">\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Charity</TableHead>\n                  <TableHead>Campaign</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDonations.map((donation) => (\n                  <TableRow key={donation.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        {new Date(donation.date).toLocaleDateString()}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{donation.charity}</TableCell>\n                    <TableCell>{donation.campaign}</TableCell>\n                    <TableCell className=\"font-bold text-green-600\">\n                      ₱{donation.amount.toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {donation.type === 'recurring' ? 'Recurring' : 'One-time'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{getStatusBadge(donation.status)}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleViewDetails(donation)}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {donation.hasReceipt && (\n                          <Button variant=\"ghost\" size=\"icon\" onClick={() => downloadReceipt(donation.id)}>\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Empty State */}\n        {filteredDonations.length === 0 && (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">\n              No donations found matching your criteria.\n            </p>\n          </Card>\n        )}\n      </div>\n\n      {/* Donation Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Donation Details</DialogTitle>\n            <DialogDescription>Complete information about your donation</DialogDescription>\n          </DialogHeader>\n          {selectedDonation && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Charity</Label>\n                  <p className=\"text-sm font-medium mt-1\">{selectedDonation.charity}</p>\n                </div>\n                <div>\n                  <Label>Campaign</Label>\n                  <p className=\"text-sm font-medium mt-1\">{selectedDonation.campaign}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Amount</Label>\n                  <p className=\"text-lg font-bold text-green-600 mt-1\">\n                    ₱{selectedDonation.amount.toLocaleString()}\n                  </p>\n                </div>\n                <div>\n                  <Label>Date</Label>\n                  <p className=\"text-sm font-medium mt-1\">\n                    {new Date(selectedDonation.date).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label>Type</Label>\n                  <Badge variant=\"outline\" className=\"capitalize mt-1\">\n                    {selectedDonation.type}\n                  </Badge>\n                </div>\n                <div>\n                  <Label>Status</Label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedDonation.status)}</div>\n                </div>\n              </div>\n              {selectedDonation.hasReceipt && (\n                <div>\n                  <Label>Receipt</Label>\n                  <div className=\"mt-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => downloadReceipt(selectedDonation.id)}>\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download Receipt\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsDetailsOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\DonorDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\DonorProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\FundTransparency.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchTransparency'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchTransparency]","fix":{"range":[1526,1528],"text":"[fetchTransparency]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2099,2102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2099,2102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { TrendingUp, Download, Eye } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface FundUsage {\n  id: number;\n  charity: string;\n  campaign: string;\n  category: string;\n  amount: number;\n  description: string;\n  date: string;\n  receiptUrl?: string;\n}\n\ninterface Campaign {\n  id: number;\n  title: string;\n  charity: string;\n  target_amount: number;\n  current_amount: number;\n  spent_amount: number;\n}\n\nexport default function FundTransparency() {\n  const [selectedCharity, setSelectedCharity] = useState(\"all\");\n  const [selectedUsage, setSelectedUsage] = useState<FundUsage | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [campaigns, setCampaigns] = useState<Campaign[]>([]);\n  const [fundUsages, setFundUsages] = useState<FundUsage[]>([]);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchTransparency();\n  }, []);\n\n  const fetchTransparency = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) {\n        toast.info('Please log in to view your transparency dashboard');\n        return;\n      }\n      const res = await fetch(`${API_URL}/api/me/transparency`, {\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' }\n      });\n      if (!res.ok) throw new Error('Failed to load transparency data');\n      const payload = await res.json();\n\n      const apiCampaigns = (payload.campaigns ?? payload.data?.campaigns ?? []) as any[];\n      const apiUsages = (payload.fund_usages ?? payload.data?.fund_usages ?? []) as any[];\n\n      setCampaigns(apiCampaigns.map((c) => ({\n        id: c.id,\n        title: c.title ?? c.name ?? 'Campaign',\n        charity: c.charity?.name ?? c.charity_name ?? 'Charity',\n        target_amount: c.target_amount ?? c.target ?? 0,\n        current_amount: c.current_amount ?? c.raised ?? 0,\n        spent_amount: c.spent_amount ?? c.spent ?? 0,\n      })));\n\n      setFundUsages(apiUsages.map((u) => ({\n        id: u.id,\n        charity: u.charity?.name ?? u.charity_name ?? 'Charity',\n        campaign: u.campaign?.title ?? u.campaign_name ?? 'General',\n        category: u.category ?? 'General',\n        amount: u.amount ?? 0,\n        description: u.description ?? '',\n        date: u.date ?? u.created_at ?? new Date().toISOString(),\n        receiptUrl: u.receipt_url ?? u.receiptUrl ?? null,\n      })));\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to load transparency data');\n    }\n  };\n\n  const charities = [\"all\", ...new Set(fundUsages.map(f => f.charity))];\n\n  const filteredUsages = selectedCharity === \"all\"\n    ? fundUsages\n    : fundUsages.filter(f => f.charity === selectedCharity);\n\n  const getProgress = (raised: number, target: number) => {\n    return (raised / target) * 100;\n  };\n\n  const getUtilization = (spent: number, raised: number) => {\n    return raised > 0 ? (spent / raised) * 100 : 0;\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-primary/10 via-primary/5 to-background border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 py-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Fund Transparency</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            See exactly how your donations are being used\n          </p>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 py-12 space-y-8\">\n        {/* Campaign Progress */}\n        <div>\n          <h2 className=\"text-2xl font-bold mb-4\">Campaign Progress</h2>\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {campaigns.map((campaign) => (\n              <Card key={campaign.id}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{campaign.title}</CardTitle>\n                  <CardDescription>{campaign.charity}</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Fundraising Progress</span>\n                      <span className=\"font-medium\">\n                        {getProgress(campaign.current_amount, campaign.target_amount).toFixed(1)}%\n                      </span>\n                    </div>\n                    <Progress value={getProgress(campaign.current_amount, campaign.target_amount)} />\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                      <span>₱{campaign.current_amount.toLocaleString()} raised</span>\n                      <span>₱{campaign.target_amount.toLocaleString()} goal</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Fund Utilization</span>\n                      <span className=\"font-medium\">\n                        {getUtilization(campaign.spent_amount, campaign.current_amount).toFixed(1)}%\n                      </span>\n                    </div>\n                    <Progress value={getUtilization(campaign.spent_amount, campaign.current_amount)} className=\"bg-green-100\" />\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                      <span>₱{campaign.spent_amount.toLocaleString()} spent</span>\n                      <span>₱{campaign.current_amount.toLocaleString()} available</span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-2 pt-2 border-t\">\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Target</p>\n                      <p className=\"font-bold text-sm\">₱{campaign.target_amount.toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Raised</p>\n                      <p className=\"font-bold text-sm text-green-600\">₱{campaign.current_amount.toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-xs text-muted-foreground\">Spent</p>\n                      <p className=\"font-bold text-sm text-blue-600\">₱{campaign.spent_amount.toLocaleString()}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Fund Usage Details */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Fund Usage Details</CardTitle>\n                <CardDescription>Detailed breakdown of how funds are being used</CardDescription>\n              </div>\n              <div className=\"flex gap-2\">\n                <Tabs value={selectedCharity} onValueChange={setSelectedCharity}>\n                  <TabsList>\n                    {charities.map(charity => (\n                      <TabsTrigger key={charity} value={charity}>\n                        {charity === \"all\" ? \"All Charities\" : charity}\n                      </TabsTrigger>\n                    ))}\n                  </TabsList>\n                </Tabs>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Charity</TableHead>\n                  <TableHead>Campaign</TableHead>\n                  <TableHead>Category</TableHead>\n                  <TableHead>Description</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead className=\"text-right\">Receipt</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsages.map((usage) => (\n                  <TableRow key={usage.id}>\n                    <TableCell>{new Date(usage.date).toLocaleDateString()}</TableCell>\n                    <TableCell className=\"font-medium\">{usage.charity}</TableCell>\n                    <TableCell>{usage.campaign}</TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{usage.category}</Badge>\n                    </TableCell>\n                    <TableCell className=\"max-w-xs\">\n                      <p className=\"text-sm line-clamp-2\">{usage.description}</p>\n                    </TableCell>\n                    <TableCell className=\"font-bold\">₱{usage.amount.toLocaleString()}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => {\n                            setSelectedUsage(usage);\n                            setIsDetailsOpen(true);\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        {usage.receiptUrl && (\n                          <Button variant=\"ghost\" size=\"icon\">\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Transparency Score removed until real data is available */}\n      </div>\n\n      {/* Usage Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Fund Usage Details</DialogTitle>\n            <DialogDescription>Complete information about this expense</DialogDescription>\n          </DialogHeader>\n          {selectedUsage && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Charity</p>\n                  <p className=\"font-medium\">{selectedUsage.charity}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Campaign</p>\n                  <p className=\"font-medium\">{selectedUsage.campaign}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Category</p>\n                  <Badge variant=\"outline\">{selectedUsage.category}</Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Date</p>\n                  <p className=\"font-medium\">{new Date(selectedUsage.date).toLocaleDateString()}</p>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Amount</p>\n                <p className=\"text-2xl font-bold text-green-600\">₱{selectedUsage.amount.toLocaleString()}</p>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Description</p>\n                <p className=\"text-sm\">{selectedUsage.description}</p>\n              </div>\n              {selectedUsage.receiptUrl && (\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground mb-2\">Receipt</p>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Download Receipt\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\Leaderboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLeaderboardData'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [fetchLeaderboardData, period, type]","fix":{"range":[1513,1527],"text":"[fetchLeaderboardData, period, type]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Trophy, Medal, Award, Crown, TrendingUp, Users, Heart, Building } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface LeaderboardEntry {\n  id: number;\n  name: string;\n  profile_image?: string;\n  logo_path?: string;\n  total_donated?: number;\n  total_received?: number;\n  donation_count: number;\n}\n\ninterface LeaderboardStats {\n  summary: {\n    total_donations: number;\n    total_donation_count: number;\n    total_donors: number;\n    average_donation: number;\n  };\n  monthly_trends: Array<{\n    year: number;\n    month: number;\n    total_amount: number;\n    donation_count: number;\n  }>;\n}\n\nexport default function Leaderboard() {\n  const [topDonors, setTopDonors] = useState<LeaderboardEntry[]>([]);\n  const [topCharities, setTopCharities] = useState<LeaderboardEntry[]>([]);\n  const [stats, setStats] = useState<LeaderboardStats | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [period, setPeriod] = useState(\"all_time\");\n  const [type, setType] = useState(\"donors\");\n\n  useEffect(() => {\n    fetchLeaderboardData();\n  }, [period, type]);\n\n  const fetchLeaderboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Fetch period-based leaderboard\n      const leaderboardResponse = await axios.get(\"/api/leaderboard/period\", {\n        params: { period, type, limit: 20 }\n      });\n\n      if (type === \"donors\") {\n        setTopDonors(leaderboardResponse.data.results);\n      } else {\n        setTopCharities(leaderboardResponse.data.results);\n      }\n\n      // Fetch overall stats\n      const statsResponse = await axios.get(\"/api/leaderboard/stats\");\n      setStats(statsResponse.data);\n\n    } catch (error) {\n      toast.error(\"Failed to fetch leaderboard data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"h-6 w-6 text-yellow-500\" />;\n      case 2:\n        return <Trophy className=\"h-6 w-6 text-gray-400\" />;\n      case 3:\n        return <Medal className=\"h-6 w-6 text-amber-600\" />;\n      default:\n        return <Award className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getRankBadge = (rank: number) => {\n    const colors = {\n      1: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n      2: \"bg-gray-100 text-gray-800 border-gray-200\",\n      3: \"bg-amber-100 text-amber-800 border-amber-200\",\n    };\n\n    const color = colors[rank as keyof typeof colors] || \"bg-blue-100 text-blue-800 border-blue-200\";\n\n    return (\n      <Badge className={`${color} border`}>\n        #{rank}\n      </Badge>\n    );\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const currentData = type === \"donors\" ? topDonors : topCharities;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Leaderboard</h1>\n          <p className=\"text-muted-foreground\">Recognizing our top contributors and performers</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {stats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <Heart className=\"h-4 w-4\" />\n                Total Donations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(stats.summary.total_donations)}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                Total Transactions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.summary.total_donation_count.toLocaleString()}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                Active Donors\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.summary.total_donors.toLocaleString()}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n                <Building className=\"h-4 w-4\" />\n                Average Donation\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{formatCurrency(stats.summary.average_donation)}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Time Period</label>\n              <Select value={period} onValueChange={setPeriod}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all_time\">All Time</SelectItem>\n                  <SelectItem value=\"this_year\">This Year</SelectItem>\n                  <SelectItem value=\"this_month\">This Month</SelectItem>\n                  <SelectItem value=\"this_week\">This Week</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Category</label>\n              <Select value={type} onValueChange={setType}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"donors\">Top Donors</SelectItem>\n                  <SelectItem value=\"charities\">Top Charities</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Leaderboard */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5\" />\n            {type === \"donors\" ? \"Top Donors\" : \"Top Performing Charities\"}\n          </CardTitle>\n          <CardDescription>\n            {period.replace(\"_\", \" \").replace(/\\b\\w/g, l => l.toUpperCase())} rankings\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {currentData.map((entry, index) => {\n              const rank = index + 1;\n              return (\n                <div key={entry.id} className={`flex items-center gap-4 p-4 rounded-lg border ${rank <= 3 ? 'bg-gradient-to-r from-yellow-50 to-transparent' : 'bg-gray-50'}`}>\n                  <div className=\"flex items-center gap-3\">\n                    {getRankIcon(rank)}\n                    {getRankBadge(rank)}\n                  </div>\n                  \n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={entry.profile_image || entry.logo_path} />\n                    <AvatarFallback>\n                      {entry.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{entry.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {entry.donation_count} {type === \"donors\" ? \"donations\" : \"donations received\"}\n                    </p>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold\">\n                      {formatCurrency(entry.total_donated || entry.total_received || 0)}\n                    </div>\n                    {rank <= 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {rank === 1 ? \"Champion\" : rank === 2 ? \"Runner-up\" : \"3rd Place\"}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n            {currentData.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Trophy className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No data available for the selected period.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recognition Message */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center\">\n            <Heart className=\"h-8 w-8 mx-auto mb-2 text-red-500\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Thank You to All Our Contributors!</h3>\n            <p className=\"text-muted-foreground\">\n              Every donation, no matter the size, makes a difference in someone's life. \n              Together, we're building a better world through generosity and compassion.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\MakeDonation.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCharities'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCharities]","fix":{"range":[1494,1496],"text":"[fetchCharities]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCampaigns'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCampaigns, formData.charityId]","fix":{"range":[1630,1650],"text":"[fetchCampaigns, formData.charityId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Heart, Upload, CheckCircle, CreditCard } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"react-router-dom\";\nimport { authService } from \"@/services/auth\";\n\nexport default function MakeDonation() {\n  const navigate = useNavigate();\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    charityId: \"\",\n    campaignId: \"\",\n    amount: \"\",\n    customAmount: \"\",\n    donationType: \"one-time\",\n    frequency: \"monthly\",\n    paymentMethod: \"gcash\",\n    message: \"\",\n    isAnonymous: false,\n    proofOfPayment: null as File | null\n  });\n  const [charities, setCharities] = useState<Array<{ id: number; name: string }>>([]);\n  const [campaigns, setCampaigns] = useState<Array<{ id: number; title: string }>>([]);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchCharities();\n  }, []);\n\n  useEffect(() => {\n    if (formData.charityId) fetchCampaigns(parseInt(formData.charityId, 10));\n    else setCampaigns([]);\n  }, [formData.charityId]);\n\n  const fetchCharities = async () => {\n    try {\n      const res = await fetch(`${API_URL}/api/charities`);\n      if (!res.ok) throw new Error('Failed to load charities');\n      const data = await res.json();\n      // backend returns { charities: { data: [...] } }\n      const charitiesArray = data.charities?.data ?? data.charities ?? data.data ?? data;\n      setCharities(Array.isArray(charitiesArray) ? charitiesArray : []);\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to load charities');\n    }\n  };\n\n  const fetchCampaigns = async (charityId: number) => {\n    try {\n      const res = await fetch(`${API_URL}/api/charities/${charityId}/campaigns`);\n      if (!res.ok) throw new Error('Failed to load campaigns');\n      const data = await res.json();\n      // backend returns paginated data\n      const campaignsArray = data.data ?? data;\n      setCampaigns(Array.isArray(campaignsArray) ? campaignsArray : []);\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to load campaigns');\n    }\n  };\n\n  const suggestedAmounts = [500, 1000, 2500, 5000, 10000];\n\n  const handleSubmit = async () => {\n    if (!formData.charityId || !formData.amount) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    try {\n      const token = authService.getToken();\n      if (!token) {\n        toast.info('Please log in to donate');\n        navigate('/auth/login');\n        return;\n      }\n\n      const isRecurring = formData.donationType === 'recurring';\n      const body = {\n        charity_id: parseInt(formData.charityId, 10),\n        campaign_id: (formData.campaignId && formData.campaignId !== 'general') ? parseInt(formData.campaignId, 10) : undefined,\n        amount: parseFloat(formData.amount),\n        purpose: 'general',\n        is_anonymous: formData.isAnonymous,\n        is_recurring: isRecurring,\n        recurring_type: isRecurring ? (formData.frequency as 'weekly'|'monthly'|'quarterly') : undefined,\n      } as any;\n\n      const res = await fetch(`${API_URL}/api/donations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      if (!res.ok) throw new Error('Failed to submit donation');\n      const donation = await res.json();\n\n      if (!formData.proofOfPayment) {\n        toast.success(\"Donation submitted successfully! Awaiting confirmation.\");\n        navigate('/donor/history');\n        return;\n      }\n\n      const fd = new FormData();\n      fd.append('file', formData.proofOfPayment);\n      fd.append('proof_type', formData.paymentMethod);\n      const proofRes = await fetch(`${API_URL}/api/donations/${donation.id}/proof`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        body: fd\n      });\n      if (!proofRes.ok) throw new Error('Donation saved but uploading proof failed');\n\n      toast.success(\"Donation submitted successfully! Proof uploaded.\");\n      navigate('/donor/history');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to submit donation');\n    }\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setFormData({ ...formData, proofOfPayment: file });\n      toast.success(\"Proof of payment uploaded\");\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 py-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Make a Donation</h1>\n        <p className=\"text-muted-foreground\">\n          Your contribution makes a real difference\n        </p>\n      </div>\n\n      {/* Progress Steps */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between max-w-2xl mx-auto\">\n          <div className=\"flex flex-col items-center\">\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${step >= 1 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n              1\n            </div>\n            <span className=\"text-sm mt-2\">Select</span>\n          </div>\n          <div className={`flex-1 h-1 mx-4 ${step >= 2 ? 'bg-primary' : 'bg-muted'}`} />\n          <div className=\"flex flex-col items-center\">\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${step >= 2 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n              2\n            </div>\n            <span className=\"text-sm mt-2\">Amount</span>\n          </div>\n          <div className={`flex-1 h-1 mx-4 ${step >= 3 ? 'bg-primary' : 'bg-muted'}`} />\n          <div className=\"flex flex-col items-center\">\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center ${step >= 3 ? 'bg-primary text-primary-foreground' : 'bg-muted'}`}>\n              3\n            </div>\n            <span className=\"text-sm mt-2\">Payment</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Step 1: Select Charity & Campaign */}\n      {step === 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Select Charity & Campaign</CardTitle>\n            <CardDescription>Choose where you want to donate</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"charity\">Charity *</Label>\n              <Select value={formData.charityId} onValueChange={(value) => setFormData({ ...formData, charityId: value, campaignId: \"\" })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a charity\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {charities.map(c => (\n                    <SelectItem key={c.id} value={String(c.id)}>\n                      {c.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"campaign\">Campaign (Optional)</Label>\n              <Select value={formData.campaignId} onValueChange={(value) => setFormData({ ...formData, campaignId: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"General donation or select campaign\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"general\">General Donation</SelectItem>\n                  {campaigns.map(c => (\n                    <SelectItem key={c.id} value={String(c.id)}>\n                      {c.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button onClick={() => setStep(2)} disabled={!formData.charityId} className=\"w-full\">\n              Continue\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Amount & Type */}\n      {step === 2 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Donation Amount</CardTitle>\n            <CardDescription>Choose your donation amount and type</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Donation Type */}\n            <div className=\"space-y-3\">\n              <Label>Donation Type</Label>\n              <RadioGroup value={formData.donationType} onValueChange={(value) => setFormData({ ...formData, donationType: value })}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"one-time\" id=\"one-time\" />\n                  <Label htmlFor=\"one-time\" className=\"cursor-pointer\">One-time Donation</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"recurring\" id=\"recurring\" />\n                  <Label htmlFor=\"recurring\" className=\"cursor-pointer\">Recurring Donation</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Frequency (if recurring) */}\n            {formData.donationType === 'recurring' && (\n              <div className=\"space-y-2\">\n                <Label>Frequency</Label>\n                <Select value={formData.frequency} onValueChange={(value) => setFormData({ ...formData, frequency: value })}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"weekly\">Weekly</SelectItem>\n                    <SelectItem value=\"monthly\">Monthly</SelectItem>\n                    <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Suggested Amounts */}\n            <div className=\"space-y-3\">\n              <Label>Select Amount (₱)</Label>\n              <div className=\"grid grid-cols-3 gap-3\">\n                {suggestedAmounts.map(amount => (\n                  <Button\n                    key={amount}\n                    variant={formData.amount === amount.toString() ? \"default\" : \"outline\"}\n                    onClick={() => setFormData({ ...formData, amount: amount.toString(), customAmount: \"\" })}\n                  >\n                    ₱{amount.toLocaleString()}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Custom Amount */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customAmount\">Or Enter Custom Amount</Label>\n              <Input\n                id=\"customAmount\"\n                type=\"number\"\n                placeholder=\"Enter amount\"\n                value={formData.customAmount}\n                onChange={(e) => setFormData({ ...formData, customAmount: e.target.value, amount: e.target.value })}\n              />\n            </div>\n\n            {/* Message */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"message\">Message (Optional)</Label>\n              <Textarea\n                id=\"message\"\n                placeholder=\"Add a message of support...\"\n                value={formData.message}\n                onChange={(e) => setFormData({ ...formData, message: e.target.value })}\n                rows={3}\n              />\n            </div>\n\n            {/* Anonymous */}\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"anonymous\"\n                checked={formData.isAnonymous}\n                onCheckedChange={(checked) => setFormData({ ...formData, isAnonymous: checked as boolean })}\n              />\n              <Label htmlFor=\"anonymous\" className=\"cursor-pointer\">\n                Make this donation anonymous\n              </Label>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setStep(1)} className=\"flex-1\">\n                Back\n              </Button>\n              <Button onClick={() => setStep(3)} disabled={!formData.amount} className=\"flex-1\">\n                Continue to Payment\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 3: Payment */}\n      {step === 3 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Method</CardTitle>\n            <CardDescription>Complete your donation</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Summary */}\n            <div className=\"bg-muted p-4 rounded-lg space-y-2\">\n              <h3 className=\"font-semibold\">Donation Summary</h3>\n              <div className=\"flex justify-between text-sm\">\n                <span>Charity:</span>\n                <span className=\"font-medium\">{charities.find(c => c.id === parseInt(formData.charityId))?.name || 'N/A'}</span>\n              </div>\n              {formData.campaignId && formData.campaignId !== 'general' && (\n                <div className=\"flex justify-between text-sm\">\n                  <span>Campaign:</span>\n                  <span className=\"font-medium\">{campaigns.find(c => c.id === parseInt(formData.campaignId))?.title || 'N/A'}</span>\n                </div>\n              )}\n              <div className=\"flex justify-between text-sm\">\n                <span>Type:</span>\n                <span className=\"font-medium capitalize\">{formData.donationType}</span>\n              </div>\n              <div className=\"flex justify-between text-lg font-bold border-t pt-2\">\n                <span>Amount:</span>\n                <span className=\"text-green-600\">₱{parseFloat(formData.amount).toLocaleString()}</span>\n              </div>\n            </div>\n\n            {/* Payment Method */}\n            <div className=\"space-y-3\">\n              <Label>Payment Method</Label>\n              <RadioGroup value={formData.paymentMethod} onValueChange={(value) => setFormData({ ...formData, paymentMethod: value })}>\n                <div className=\"flex items-center space-x-2 border p-3 rounded-lg\">\n                  <RadioGroupItem value=\"gcash\" id=\"gcash\" />\n                  <Label htmlFor=\"gcash\" className=\"cursor-pointer flex-1\">GCash</Label>\n                  <Badge variant=\"secondary\">Recommended</Badge>\n                </div>\n                <div className=\"flex items-center space-x-2 border p-3 rounded-lg\">\n                  <RadioGroupItem value=\"paymaya\" id=\"paymaya\" />\n                  <Label htmlFor=\"paymaya\" className=\"cursor-pointer flex-1\">PayMaya</Label>\n                </div>\n                <div className=\"flex items-center space-x-2 border p-3 rounded-lg\">\n                  <RadioGroupItem value=\"bank\" id=\"bank\" />\n                  <Label htmlFor=\"bank\" className=\"cursor-pointer flex-1\">Bank Transfer</Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Upload Proof */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"proof\">Upload Proof of Payment *</Label>\n              <div className=\"border-2 border-dashed rounded-lg p-6 text-center\">\n                <input\n                  id=\"proof\"\n                  type=\"file\"\n                  accept=\"image/*,.pdf\"\n                  className=\"hidden\"\n                  onChange={handleFileUpload}\n                />\n                <label htmlFor=\"proof\" className=\"cursor-pointer\">\n                  <Upload className=\"mx-auto h-12 w-12 text-muted-foreground mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    {formData.proofOfPayment ? formData.proofOfPayment.name : \"Click to upload proof of payment\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    PNG, JPG, PDF up to 5MB\n                  </p>\n                </label>\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setStep(2)} className=\"flex-1\">\n                Back\n              </Button>\n              <Button onClick={handleSubmit} disabled={!formData.proofOfPayment} className=\"flex-1\">\n                <Heart className=\"mr-2 h-4 w-4\" />\n                Submit Donation\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\NewsFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\Notifications.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchNotifications'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNotifications]","fix":{"range":[937,939],"text":"[fetchNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { Bell, Check, CheckCheck, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { toast } from \"sonner\";\nimport { authService } from \"@/services/auth\";\n\ninterface NotificationItem {\n  id: number;\n  title?: string;\n  message: string;\n  type?: string; // e.g., donation_confirmed, new_post, reminder\n  is_read: boolean;\n  created_at: string;\n}\n\nexport default function Notifications() {\n  const [items, setItems] = useState<NotificationItem[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/me/notifications`, {\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' }\n      });\n      if (!res.ok) throw new Error('Failed to load notifications');\n      const payload = await res.json();\n      const list: NotificationItem[] = payload.data ?? payload;\n      setItems(list);\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to load notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (id: number) => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/${id}/read`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to mark as read');\n      setItems((prev) => prev.map(n => n.id === id ? { ...n, is_read: true } : n));\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to mark as read');\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/mark-all-read`, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to mark all as read');\n      setItems((prev) => prev.map(n => ({ ...n, is_read: true })));\n      toast.success('All notifications marked as read');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to mark all as read');\n    }\n  };\n\n  const deleteNotification = async (id: number) => {\n    try {\n      const token = authService.getToken();\n      if (!token) return;\n      const res = await fetch(`${API_URL}/api/notifications/${id}`, {\n        method: 'DELETE',\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (!res.ok) throw new Error('Failed to delete notification');\n      setItems((prev) => prev.filter(n => n.id !== id));\n      toast.success('Notification deleted');\n    } catch (e) {\n      toast.error(e instanceof Error ? e.message : 'Unable to delete notification');\n    }\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-4 py-8\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-2\">\n          <Bell className=\"h-6 w-6\" /> Notifications\n        </h1>\n        <p className=\"text-muted-foreground\">Stay updated with confirmations and updates from charities you follow.</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Inbox</CardTitle>\n              <CardDescription>Your latest notifications</CardDescription>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={fetchNotifications} disabled={loading}>\n                Refresh\n              </Button>\n              <Button variant=\"default\" size=\"sm\" onClick={markAllAsRead} disabled={loading || items.every(n => n.is_read)}>\n                <CheckCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"py-12 text-center text-muted-foreground\">Loading notifications...</div>\n          ) : items.length === 0 ? (\n            <div className=\"py-12 text-center text-muted-foreground\">No notifications yet.</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Message</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {items.map((n) => (\n                  <TableRow key={n.id} className={!n.is_read ? 'bg-primary/5' : ''}>\n                    <TableCell>\n                      {n.is_read ? (\n                        <Badge variant=\"secondary\">Read</Badge>\n                      ) : (\n                        <Badge>Unread</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{n.title || (n.type ? n.type.replace(/_/g, ' ') : 'Notification')}</TableCell>\n                    <TableCell className=\"max-w-xl\">\n                      <p className=\"text-sm line-clamp-2\">{n.message}</p>\n                    </TableCell>\n                    <TableCell>{new Date(n.created_at).toLocaleString()}</TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        {!n.is_read && (\n                          <Button variant=\"ghost\" size=\"icon\" onClick={() => markAsRead(n.id)}>\n                            <Check className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => deleteNotification(n.id)}>\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\donor\\Reports.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":80,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2667,2670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2667,2670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Plus, Eye, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface Report {\n  id: number;\n  reported_entity_type: string;\n  reported_entity_id: number;\n  reason: string;\n  description: string;\n  evidence_path?: string;\n  status: string;\n  admin_notes?: string;\n  reviewed_at?: string;\n  action_taken?: string;\n  created_at: string;\n}\n\nexport default function DonorReports() {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    reported_entity_type: \"\",\n    reported_entity_id: \"\",\n    reason: \"\",\n    description: \"\",\n    evidence: null as File | null,\n  });\n\n  useEffect(() => {\n    fetchMyReports();\n  }, []);\n\n  const fetchMyReports = async () => {\n    try {\n      const response = await axios.get(\"/api/me/reports\");\n      setReports(response.data.data);\n    } catch (error) {\n      toast.error(\"Failed to fetch reports\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const submitReport = async () => {\n    if (!formData.reported_entity_type || !formData.reported_entity_id || !formData.reason || !formData.description) {\n      toast.error(\"Please fill in all required fields\");\n      return;\n    }\n\n    try {\n      const formDataToSend = new FormData();\n      formDataToSend.append(\"reported_entity_type\", formData.reported_entity_type);\n      formDataToSend.append(\"reported_entity_id\", formData.reported_entity_id);\n      formDataToSend.append(\"reason\", formData.reason);\n      formDataToSend.append(\"description\", formData.description);\n      if (formData.evidence) {\n        formDataToSend.append(\"evidence\", formData.evidence);\n      }\n\n      await axios.post(\"/api/reports\", formDataToSend, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n\n      toast.success(\"Report submitted successfully\");\n      setIsCreateOpen(false);\n      resetForm();\n      fetchMyReports();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to submit report\");\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      reported_entity_type: \"\",\n      reported_entity_id: \"\",\n      reason: \"\",\n      description: \"\",\n      evidence: null,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const colors = {\n      pending: \"bg-red-100 text-red-800\",\n      under_review: \"bg-yellow-100 text-yellow-800\",\n      resolved: \"bg-green-100 text-green-800\",\n      dismissed: \"bg-gray-100 text-gray-800\",\n    };\n\n    const icons = {\n      pending: Clock,\n      under_review: Eye,\n      resolved: CheckCircle,\n      dismissed: XCircle,\n    };\n\n    const Icon = icons[status as keyof typeof icons] || Clock;\n    const color = colors[status as keyof typeof colors] || colors.pending;\n\n    return (\n      <Badge className={color}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {status.replace(\"_\", \" \").toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatReason = (reason: string) => {\n    return reason.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">My Reports</h1>\n          <p className=\"text-muted-foreground\">Track your submitted reports and their status</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Submit Report\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Submit a Report</DialogTitle>\n              <DialogDescription>\n                Report suspicious activities, fraud, or inappropriate content\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Entity Type</label>\n                  <Select value={formData.reported_entity_type} onValueChange={(value) => setFormData({ ...formData, reported_entity_type: value })}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"What are you reporting?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"charity\">Charity</SelectItem>\n                      <SelectItem value=\"campaign\">Campaign</SelectItem>\n                      <SelectItem value=\"user\">User</SelectItem>\n                      <SelectItem value=\"donation\">Donation</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Entity ID</label>\n                  <Input\n                    type=\"number\"\n                    value={formData.reported_entity_id}\n                    onChange={(e) => setFormData({ ...formData, reported_entity_id: e.target.value })}\n                    placeholder=\"ID of the item being reported\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Reason</label>\n                <Select value={formData.reason} onValueChange={(value) => setFormData({ ...formData, reason: value })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select reason\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fraud\">Fraud</SelectItem>\n                    <SelectItem value=\"fake_proof\">Fake Proof</SelectItem>\n                    <SelectItem value=\"inappropriate_content\">Inappropriate Content</SelectItem>\n                    <SelectItem value=\"scam\">Scam</SelectItem>\n                    <SelectItem value=\"fake_charity\">Fake Charity</SelectItem>\n                    <SelectItem value=\"misuse_of_funds\">Misuse of Funds</SelectItem>\n                    <SelectItem value=\"spam\">Spam</SelectItem>\n                    <SelectItem value=\"harassment\">Harassment</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Description</label>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Provide detailed information about the issue...\"\n                  rows={4}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Evidence (Optional)</label>\n                <Input\n                  type=\"file\"\n                  accept=\".jpg,.jpeg,.png,.pdf\"\n                  onChange={(e) => setFormData({ ...formData, evidence: e.target.files?.[0] || null })}\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Upload screenshots or documents as evidence (JPG, PNG, PDF - Max 5MB)\n                </p>\n              </div>\n              <div className=\"flex gap-2 justify-end\">\n                <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={submitReport}>\n                  Submit Report\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Reports List */}\n      <div className=\"space-y-4\">\n        {reports.map((report) => (\n          <Card key={report.id}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                    <CardTitle className=\"text-lg\">Report #{report.id}</CardTitle>\n                    {getStatusBadge(report.status)}\n                  </div>\n                  <CardDescription>\n                    {formatReason(report.reason)} • {report.reported_entity_type} #{report.reported_entity_id}\n                  </CardDescription>\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {new Date(report.created_at).toLocaleDateString()}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <p className=\"text-sm bg-gray-50 p-3 rounded\">\n                {report.description}\n              </p>\n              {report.evidence_path && (\n                <div>\n                  <p className=\"text-sm font-medium\">Evidence:</p>\n                  <a \n                    href={`/storage/${report.evidence_path}`} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:underline text-sm\"\n                  >\n                    View Evidence File\n                  </a>\n                </div>\n              )}\n              {report.admin_notes && (\n                <div>\n                  <p className=\"text-sm font-medium\">Admin Response:</p>\n                  <p className=\"text-sm bg-blue-50 p-3 rounded\">\n                    {report.admin_notes}\n                  </p>\n                  {report.action_taken && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Action taken: {report.action_taken.replace(\"_\", \" \")}\n                    </p>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n        {reports.length === 0 && (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <AlertTriangle className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">You haven't submitted any reports yet.</p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Help keep our platform safe by reporting suspicious activities.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\apiCharity.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[879,882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[879,882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1487,1490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1487,1490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1526,1529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1526,1529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Charity API Service\n *\n * Handles charity-related API calls including campaigns, fund usage, etc.\n */\nimport axios from 'axios';\nimport { campaignService } from './campaigns';\n\nconst API_URL = import.meta.env.VITE_API_URL;\n\nif (!API_URL) {\n  console.error('VITE_API_URL is not defined in your .env.local file');\n}\n\n// Types for charity operations\nexport interface PaginatedResponse<T> {\n  data: T[];\n  current_page: number;\n  last_page: number;\n  per_page: number;\n  total: number;\n}\n\nexport interface ListCampaignsParams {\n  page?: number;\n  pageSize?: number;\n  status?: string;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface ListFundUsageParams {\n  page?: number;\n  pageSize?: number;\n  category?: string;\n}\n\n// Campaign functions\nexport async function listCampaigns(params: ListCampaignsParams = {}): Promise<PaginatedResponse<any>> {\n  // For now, return mock data since we need backend implementation\n  // In a real implementation, this would call the charity campaigns API\n  return {\n    data: [],\n    current_page: 1,\n    last_page: 1,\n    per_page: 10,\n    total: 0,\n  };\n}\n\nexport async function deleteCampaign(campaignId: string): Promise<void> {\n  // For now, this is a mock implementation\n  // In a real implementation, this would call the delete campaign API\n  console.log(`Deleting campaign ${campaignId}`);\n}\n\n// Fund usage functions\nexport async function listFundUsage(params: ListFundUsageParams = {}): Promise<{\n  data: any[];\n  pagination: PaginatedResponse<any>;\n}> {\n  // For now, return mock data since we need backend implementation\n  return {\n    data: [],\n    pagination: {\n      data: [],\n      current_page: 1,\n      last_page: 1,\n      per_page: 20,\n      total: 0,\n    }\n  };\n}\n\nexport async function createFundUsage(data: FormData): Promise<void> {\n  // For now, this is a mock implementation\n  // In a real implementation, this would call the create fund usage API\n  console.log('Creating fund usage entry:', data);\n}\n\nexport { campaignService };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\auth.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[715,718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[715,718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3195,3198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3195,3198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3942,3945],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3942,3945],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Authentication Service\n *\n * Handles all authentication-related API calls.\n * This service is adapted to use token-based authentication.\n */\nimport axios, { AxiosInstance } from 'axios';\n\n// Get the base URL from environment variables.\n// Note: We are using VITE_API_URL to match the .env.local file we created earlier.\nconst API_URL = import.meta.env.VITE_API_URL;\n\nif (!API_URL) {\n  console.error('VITE_API_URL is not defined in your .env.local file');\n}\n\n// --- Define Types for our data ---\ninterface ApiError {\n  message: string;\n  errors?: Record<string, string[]>;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'donor' | 'charity_admin' | 'admin';\n  [key: string]: any;\n}\n\nexport interface AuthResponse {\n  token?: string;\n  user: User;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n  remember_me?: boolean;\n}\n\nexport interface DonorRegistrationData {\n  full_name: string;\n  email: string;\n  password: string;\n  password_confirmation: string;\n  phone?: string;\n  address?: string;\n  preferred_contact_method?: 'email' | 'sms';\n  anonymous_giving?: boolean;\n  accept_terms: boolean;\n}\n\nexport interface CharityRegistrationData {\n  organization_name: string;\n  legal_trading_name?: string;\n  registration_number: string;\n  tax_id: string;\n  website?: string;\n  contact_person_name: string;\n  contact_email: string;\n  contact_phone: string;\n  password: string;\n  password_confirmation: string;\n  address: string;\n  region: string;\n  municipality: string;\n  nonprofit_category: string;\n  mission_statement: string;\n  description: string;\n  accept_terms: boolean;\n  confirm_truthfulness: boolean;\n}\n\n// --- Create a reusable AuthService class ---\nclass AuthService {\n  private apiClient: AxiosInstance;\n\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: API_URL,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor to automatically add the auth token to requests\n    this.apiClient.interceptors.request.use((config) => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n  }\n\n  // --- Core API Methods ---\n\n  /**\n   * Login with email and password.\n   * Your backend should return a token and user object.\n   */\n  async login(credentials: LoginCredentials): Promise<User> {\n    const response = await this.apiClient.post<AuthResponse>('/api/auth/login', credentials);\n    \n    if (response.data.token) {\n      this.setToken(response.data.token, credentials.remember_me);\n    }\n\n    return response.data.user;\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  async getCurrentUser(): Promise<User> {\n    const response = await this.apiClient.get<User>('/api/me');\n    return response.data;\n  }\n\n  /**\n   * Logout the current user.\n   */\n  async logout(): Promise<void> {\n    try {\n      await this.apiClient.post('/api/auth/logout');\n    } catch (error) {\n      console.error('Logout API call failed:', error);\n    }\n    this.clearToken();\n  }\n\n  /**\n   * Register a new donor.\n   */\n  async registerDonor(data: any): Promise<AuthResponse> {\n    const formData = new FormData();\n    formData.append('name', data.full_name);\n    formData.append('email', data.email);\n    formData.append('password', data.password);\n    formData.append('password_confirmation', data.password_confirmation);\n    if (data.phone) formData.append('phone', data.phone);\n    if (data.address) formData.append('address', data.address);\n    if (data.profile_image) formData.append('profile_image', data.profile_image);\n    \n    const response = await this.apiClient.post<AuthResponse>('/api/auth/register', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n    return response.data;\n  }\n\n  /**\n   * Register a new charity.\n   */\n  async registerCharity(data: any): Promise<{ success: boolean, message: string }> {\n    // If data is already FormData, use it directly\n    if (data instanceof FormData) {\n      const response = await this.apiClient.post('/api/auth/register-charity', data, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      return { success: true, message: response.data.message };\n    }\n    \n    // Otherwise, create FormData from object\n    const formData = new FormData();\n    \n    // Representative details\n    formData.append('name', data.contact_person_name);\n    formData.append('email', data.contact_email);\n    formData.append('password', data.password || 'TempPassword123!');\n    formData.append('password_confirmation', data.password_confirmation || 'TempPassword123!');\n    if (data.contact_phone) formData.append('phone', data.contact_phone);\n    \n    // Organization details\n    formData.append('charity_name', data.organization_name);\n    if (data.registration_number) formData.append('reg_no', data.registration_number);\n    if (data.tax_id) formData.append('tax_id', data.tax_id);\n    if (data.mission_statement) formData.append('mission', data.mission_statement);\n    if (data.description) formData.append('vision', data.description);\n    if (data.website) formData.append('website', data.website);\n    formData.append('contact_email', data.contact_email);\n    if (data.contact_phone) formData.append('contact_phone', data.contact_phone);\n    if (data.address) formData.append('address', data.address);\n    \n    const response = await this.apiClient.post('/api/auth/register-charity', formData, {\n      headers: { 'Content-Type': 'multipart/form-data' }\n    });\n    \n    return { success: true, message: response.data.message };\n  }\n\n  // --- Token Management ---\n  private tokenKey = 'auth_token';\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey) || sessionStorage.getItem(this.tokenKey);\n  }\n\n  setToken(token: string, remember: boolean = false): void {\n    if (remember) {\n      localStorage.setItem(this.tokenKey, token);\n    } else {\n      sessionStorage.setItem(this.tokenKey, token);\n    }\n  }\n\n  clearToken(): void {\n    localStorage.removeItem(this.tokenKey);\n    sessionStorage.removeItem(this.tokenKey);\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n}\n\n// Export a single instance of the service\nexport const authService = new AuthService();\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\campaigns.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\donations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\services\\uploads.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\types\\charity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]