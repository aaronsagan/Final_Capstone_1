[{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\ActionLogs.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[691,694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[691,694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchLogs'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm, fetchLogs]","fix":{"range":[1237,1305],"text":"[actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm, fetchLogs]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Search, Filter, Calendar } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface AdminActionLog {\n  id: number;\n  admin: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  action_type: string;\n  target_type?: string;\n  target_id?: number;\n  details?: any;\n  notes?: string;\n  ip_address?: string;\n  created_at: string;\n}\n\nexport default function AdminActionLogs() {\n  const [logs, setLogs] = useState<AdminActionLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [actionTypeFilter, setActionTypeFilter] = useState(\"all\");\n  const [targetTypeFilter, setTargetTypeFilter] = useState(\"all\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  useEffect(() => {\n    fetchLogs();\n  }, [actionTypeFilter, targetTypeFilter, startDate, endDate, searchTerm]);\n\n  const fetchLogs = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (actionTypeFilter !== \"all\") params.append(\"action_type\", actionTypeFilter);\n      if (targetTypeFilter !== \"all\") params.append(\"target_type\", targetTypeFilter);\n      if (startDate) params.append(\"start_date\", startDate);\n      if (endDate) params.append(\"end_date\", endDate);\n      if (searchTerm) params.append(\"search\", searchTerm);\n\n      const response = await axios.get(`/api/admin/action-logs?${params.toString()}`);\n      setLogs(response.data.data || []);\n    } catch (error) {\n      console.error(\"Failed to fetch action logs:\", error);\n      toast.error(\"Failed to fetch action logs\");\n      setLogs([]); // Ensure logs is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportLogs = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (actionTypeFilter !== \"all\") params.append(\"action_type\", actionTypeFilter);\n      if (targetTypeFilter !== \"all\") params.append(\"target_type\", targetTypeFilter);\n      if (startDate) params.append(\"start_date\", startDate);\n      if (endDate) params.append(\"end_date\", endDate);\n\n      const response = await axios.get(`/api/admin/action-logs/export?${params.toString()}`, {\n        responseType: 'blob'\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `admin_logs_${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success(\"Logs exported successfully\");\n    } catch (error) {\n      toast.error(\"Failed to export logs\");\n    }\n  };\n\n  const formatActionType = (actionType: string) => {\n    return actionType.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getActionBadge = (actionType: string) => {\n    const colors = {\n      approve_charity: \"bg-green-100 text-green-800\",\n      reject_charity: \"bg-red-100 text-red-800\",\n      suspend_user: \"bg-yellow-100 text-yellow-800\",\n      activate_user: \"bg-blue-100 text-blue-800\",\n      review_report: \"bg-purple-100 text-purple-800\",\n      delete_user: \"bg-red-100 text-red-800\",\n      other: \"bg-gray-100 text-gray-800\",\n    };\n\n    const color = colors[actionType as keyof typeof colors] || colors.other;\n    \n    return (\n      <Badge className={color}>\n        {formatActionType(actionType)}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Admin Action Logs</h1>\n          <p className=\"text-muted-foreground\">Audit trail of all administrative actions</p>\n        </div>\n        <Button onClick={exportLogs} className=\"flex items-center gap-2\">\n          <Download className=\"h-4 w-4\" />\n          Export CSV\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search logs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={actionTypeFilter} onValueChange={setActionTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Action Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Actions</SelectItem>\n                <SelectItem value=\"approve_charity\">Approve Charity</SelectItem>\n                <SelectItem value=\"reject_charity\">Reject Charity</SelectItem>\n                <SelectItem value=\"suspend_user\">Suspend User</SelectItem>\n                <SelectItem value=\"activate_user\">Activate User</SelectItem>\n                <SelectItem value=\"review_report\">Review Report</SelectItem>\n                <SelectItem value=\"delete_user\">Delete User</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={targetTypeFilter} onValueChange={setTargetTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Target Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"User\">User</SelectItem>\n                <SelectItem value=\"Charity\">Charity</SelectItem>\n                <SelectItem value=\"Report\">Report</SelectItem>\n                <SelectItem value=\"Campaign\">Campaign</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"date\"\n              placeholder=\"Start Date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n            <Input\n              type=\"date\"\n              placeholder=\"End Date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Logs List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Action Logs ({(logs || []).length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {(logs || []).map((log) => (\n              <div key={log.id} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      {getActionBadge(log.action_type)}\n                      <span className=\"text-sm text-muted-foreground\">\n                        by {log.admin.name}\n                      </span>\n                    </div>\n                    {log.target_type && (\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">Target:</span> {log.target_type} #{log.target_id}\n                      </p>\n                    )}\n                    {log.notes && (\n                      <p className=\"text-sm bg-gray-50 p-2 rounded\">\n                        {log.notes}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"text-right text-xs text-muted-foreground\">\n                    <p>{new Date(log.created_at).toLocaleString()}</p>\n                    {log.ip_address && <p>IP: {log.ip_address}</p>}\n                  </div>\n                </div>\n                {log.details && (\n                  <details className=\"text-sm\">\n                    <summary className=\"cursor-pointer text-blue-600 hover:underline\">\n                      View Details\n                    </summary>\n                    <pre className=\"mt-2 p-2 bg-gray-50 rounded text-xs overflow-auto\">\n                      {JSON.stringify(log.details, null, 2)}\n                    </pre>\n                  </details>\n                )}\n              </div>\n            ))}\n            {(logs || []).length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No action logs found matching your filters.\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\AuditLogs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Categories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2161,2164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2161,2164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2638,2641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2638,2641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3450,3453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3450,3453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Folder, Eye, EyeOff } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface Category {\n  id: number;\n  name: string;\n  slug: string;\n  description?: string;\n  icon: string;\n  color: string;\n  is_active: boolean;\n  sort_order: number;\n  campaigns_count: number;\n  created_at: string;\n}\n\nexport default function AdminCategories() {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"folder\",\n    color: \"#3B82F6\",\n    sort_order: 0,\n  });\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  const fetchCategories = async () => {\n    try {\n      const response = await axios.get(\"/api/admin/categories\");\n      const payload = response.data;\n      const items = Array.isArray(payload)\n        ? payload\n        : (Array.isArray(payload?.data) ? payload.data : []);\n      setCategories(items);\n    } catch (error) {\n      console.error(\"Failed to fetch categories:\", error);\n      toast.error(\"Failed to fetch categories\");\n      setCategories([]); // Ensure categories is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreate = async () => {\n    try {\n      await axios.post(\"/api/admin/categories\", formData);\n      toast.success(\"Category created successfully\");\n      setIsCreateOpen(false);\n      resetForm();\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to create category\");\n    }\n  };\n\n  const handleEdit = async () => {\n    if (!selectedCategory) return;\n\n    try {\n      await axios.put(`/api/admin/categories/${selectedCategory.id}`, {\n        ...formData,\n        is_active: selectedCategory.is_active,\n      });\n      toast.success(\"Category updated successfully\");\n      setIsEditOpen(false);\n      resetForm();\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to update category\");\n    }\n  };\n\n  const toggleActive = async (category: Category) => {\n    try {\n      await axios.put(`/api/admin/categories/${category.id}`, {\n        ...category,\n        is_active: !category.is_active,\n      });\n      toast.success(`Category ${!category.is_active ? 'activated' : 'deactivated'}`);\n      fetchCategories();\n    } catch (error) {\n      toast.error(\"Failed to update category status\");\n    }\n  };\n\n  const handleDelete = async (category: Category) => {\n    if (!confirm(`Are you sure you want to delete \"${category.name}\"?`)) return;\n\n    try {\n      await axios.delete(`/api/admin/categories/${category.id}`);\n      toast.success(\"Category deleted successfully\");\n      fetchCategories();\n    } catch (error: any) {\n      toast.error(error.response?.data?.error || \"Failed to delete category\");\n    }\n  };\n\n  const openCreateDialog = () => {\n    resetForm();\n    setIsCreateOpen(true);\n  };\n\n  const openEditDialog = (category: Category) => {\n    setSelectedCategory(category);\n    setFormData({\n      name: category.name,\n      description: category.description || \"\",\n      icon: category.icon,\n      color: category.color,\n      sort_order: category.sort_order,\n    });\n    setIsEditOpen(true);\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      icon: \"folder\",\n      color: \"#3B82F6\",\n      sort_order: 0,\n    });\n    setSelectedCategory(null);\n  };\n\n  const iconOptions = [\n    \"folder\", \"heart\", \"users\", \"shield\", \"leaf\", \"graduationcap\", \n    \"baby\", \"usercheck\", \"dog\", \"building\", \"palette\"\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Category Management</h1>\n          <p className=\"text-muted-foreground\">Manage campaign categories</p>\n        </div>\n        <Button onClick={openCreateDialog}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Category\n        </Button>\n      </div>\n\n      {/* Categories Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {(Array.isArray(categories) ? categories : []).map((category) => (\n          <Card key={category.id} className={!category.is_active ? \"opacity-60\" : \"\"}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-8 h-8 rounded-full flex items-center justify-center text-white text-sm\"\n                    style={{ backgroundColor: category.color }}\n                  >\n                    <Folder className=\"h-4 w-4\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {category.campaigns_count} campaigns\n                    </p>\n                  </div>\n                </div>\n                <Badge variant={category.is_active ? \"default\" : \"secondary\"}>\n                  {category.is_active ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {category.description && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {category.description}\n                </p>\n              )}\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                <span>Sort: {category.sort_order}</span>\n                <span>Slug: {category.slug}</span>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => toggleActive(category)}\n                  className=\"flex-1\"\n                >\n                  {category.is_active ? (\n                    <>\n                      <EyeOff className=\"h-3 w-3 mr-1\" />\n                      Deactivate\n                    </>\n                  ) : (\n                    <>\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Activate\n                    </>\n                  )}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => openEditDialog(category)}\n                >\n                  <Edit className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleDelete(category)}\n                  disabled={category.campaigns_count > 0}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {Array.isArray(categories) && categories.length === 0 && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Folder className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No categories found. Create your first category!</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Category Dialog */}\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create New Category</DialogTitle>\n            <DialogDescription>\n              Add a new category for organizing campaigns\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Name</label>\n              <Input\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Category name\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Category description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Color</label>\n                <Input\n                  type=\"color\"\n                  value={formData.color}\n                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Sort Order</label>\n                <Input\n                  type=\"number\"\n                  value={formData.sort_order}\n                  onChange={(e) => setFormData({ ...formData, sort_order: parseInt(e.target.value) || 0 })}\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreate}>\n                Create Category\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Category Dialog */}\n      <Dialog open={isEditOpen} onOpenChange={setIsEditOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Category</DialogTitle>\n            <DialogDescription>\n              Update category information\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Name</label>\n              <Input\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Category name\"\n              />\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Description</label>\n              <Textarea\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                placeholder=\"Category description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Color</label>\n                <Input\n                  type=\"color\"\n                  value={formData.color}\n                  onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Sort Order</label>\n                <Input\n                  type=\"number\"\n                  value={formData.sort_order}\n                  onChange={(e) => setFormData({ ...formData, sort_order: parseInt(e.target.value) || 0 })}\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsEditOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleEdit}>\n                Update Category\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Charities.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchCharities'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchCharities, filterStatus]","fix":{"range":[1550,1577],"text":"[currentPage, fetchCharities, filterStatus]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1858,1861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1858,1861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2588,2591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2588,2591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3152,3155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3152,3155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Search, Eye, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"sonner\";\nimport { useNavigate } from \"react-router-dom\";\nimport { adminService, Charity } from \"@/services/admin\";\n\n\nexport default function Charities() {\n  const navigate = useNavigate();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [selectedCharity, setSelectedCharity] = useState<Charity | null>(null);\n  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);\n  const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false);\n  const [rejectReason, setRejectReason] = useState(\"\");\n  const [charities, setCharities] = useState<Charity[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    fetchCharities();\n  }, [currentPage, filterStatus]);\n\n  const fetchCharities = async () => {\n    setIsLoading(true);\n    try {\n      const response = await adminService.getAllCharities(currentPage, {\n        status: filterStatus !== 'all' ? filterStatus : undefined\n      });\n      setCharities(response.data);\n    } catch (error: any) {\n      console.error('Failed to fetch charities:', error);\n      toast.error('Failed to load charities');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleViewDetail = async (charity: Charity) => {\n    try {\n      const details = await adminService.getCharityDetails(charity.id);\n      setSelectedCharity(details);\n      setIsDetailDialogOpen(true);\n    } catch (error) {\n      toast.error('Failed to load charity details');\n    }\n  };\n\n  const handleApprove = async (charityId: number) => {\n    try {\n      await adminService.approveCharity(charityId);\n      toast.success(\"Charity approved successfully\");\n      setIsDetailDialogOpen(false);\n      fetchCharities(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to approve charity');\n    }\n  };\n\n  const handleReject = async () => {\n    if (!rejectReason.trim()) {\n      toast.error(\"Please provide a rejection reason\");\n      return;\n    }\n    if (!selectedCharity) return;\n\n    try {\n      await adminService.rejectCharity(selectedCharity.id, rejectReason);\n      toast.success(\"Charity rejected\");\n      setIsRejectDialogOpen(false);\n      setIsDetailDialogOpen(false);\n      setRejectReason(\"\");\n      fetchCharities(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to reject charity');\n    }\n  };\n\n  const handleRequestInfo = (charityId: number) => {\n    toast.info(\"Information request sent to charity\");\n    setIsDetailDialogOpen(false);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"approved\":\n        return <Badge className=\"bg-green-600\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      case \"pending\":\n        return <Badge variant=\"secondary\">Pending</Badge>;\n      default:\n        return <Badge>{status}</Badge>;\n    }\n  };\n\n  const filteredCharities = charities.filter(charity => {\n    const matchesSearch = charity.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         charity.contact_email.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading charities...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Charity Registrations</h1>\n        <p className=\"text-muted-foreground\">\n          Review and manage charity applications\n        </p>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search charities...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"pending\">Pending</SelectItem>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"rejected\">Rejected</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>ID</TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Organization Email</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Submitted</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredCharities.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center text-muted-foreground\">\n                  No charities found\n                </TableCell>\n              </TableRow>\n            ) : filteredCharities.map((charity) => (\n              <TableRow key={charity.id}>\n                <TableCell className=\"font-medium\">{charity.id}</TableCell>\n                <TableCell>{charity.name}</TableCell>\n                <TableCell>{charity.contact_email}</TableCell>\n                <TableCell>{getStatusBadge(charity.verification_status)}</TableCell>\n                <TableCell>{new Date(charity.created_at).toLocaleDateString()}</TableCell>\n                <TableCell className=\"text-right\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => handleViewDetail(charity)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Charity Application Details</DialogTitle>\n            <DialogDescription>\n              Review the charity registration information\n            </DialogDescription>\n          </DialogHeader>\n          {selectedCharity && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Organization Name</Label>\n                <p>{selectedCharity.name}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Email</Label>\n                <p>{selectedCharity.contact_email}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Registration Number</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedCharity.reg_no || 'N/A'}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Mission</Label>\n                <p className=\"text-sm text-muted-foreground\">{selectedCharity.mission || 'N/A'}</p>\n              </div>\n              <div className=\"grid gap-2\">\n                <Label className=\"font-semibold\">Status</Label>\n                {getStatusBadge(selectedCharity.verification_status)}\n              </div>\n              {selectedCharity.verification_notes && (\n                <div className=\"grid gap-2\">\n                  <Label className=\"font-semibold\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCharity.verification_notes}</p>\n                </div>\n              )}\n              {selectedCharity.documents && selectedCharity.documents.length > 0 && (\n                <div className=\"grid gap-2\">\n                  <Label className=\"font-semibold\">Submitted Documents</Label>\n                  <div className=\"space-y-2\">\n                    {selectedCharity.documents.map((doc, index) => (\n                      <div key={index} className=\"flex items-center justify-between rounded-md border p-2\">\n                        <span className=\"text-sm\">{doc.document_type}</span>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter className=\"flex gap-2\">\n            {selectedCharity?.verification_status === \"pending\" && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleRequestInfo(selectedCharity.id)}\n                >\n                  <AlertCircle className=\"h-4 w-4 mr-2\" />\n                  Request Info\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => setIsRejectDialogOpen(true)}\n                >\n                  <XCircle className=\"h-4 w-4 mr-2\" />\n                  Reject\n                </Button>\n                <Button onClick={() => handleApprove(selectedCharity.id)}>\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Approve\n                </Button>\n              </>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Reject Charity Application</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for rejection\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <Textarea\n              placeholder=\"Enter rejection reason...\"\n              value={rejectReason}\n              onChange={(e) => setRejectReason(e.target.value)}\n              rows={4}\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsRejectDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleReject}>\n              Confirm Rejection\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\DocumentExpiry.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":18,"suggestions":[{"desc":"Update the dependencies array to be: [daysFilter, fetchData]","fix":{"range":[1786,1798],"text":"[daysFilter, fetchData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertTriangle, Calendar, Clock, FileText, Eye, Edit, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface ExpiringDocument {\n  id: number;\n  doc_type: string;\n  expiry_date: string;\n  days_until_expiry: number;\n  charity: {\n    id: number;\n    name: string;\n    contact_email: string;\n  };\n}\n\ninterface ExpiredDocument {\n  id: number;\n  doc_type: string;\n  expiry_date: string;\n  days_overdue: number;\n  charity: {\n    id: number;\n    name: string;\n    contact_email: string;\n    verification_status: string;\n  };\n}\n\ninterface ExpiryStatistics {\n  expiring_in_7_days: number;\n  expiring_in_30_days: number;\n  expired: number;\n  charities_with_expired_docs: number;\n}\n\nexport default function AdminDocumentExpiry() {\n  const [expiringDocuments, setExpiringDocuments] = useState<ExpiringDocument[]>([]);\n  const [expiredDocuments, setExpiredDocuments] = useState<ExpiredDocument[]>([]);\n  const [statistics, setStatistics] = useState<ExpiryStatistics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState(\"expiring\");\n  const [daysFilter, setDaysFilter] = useState(\"30\");\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  useEffect(() => {\n    fetchData();\n  }, [daysFilter]);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n\n      const authHeaders = token\n        ? { headers: { Authorization: `Bearer ${token}` } }\n        : {};\n\n      // Fetch expiring documents\n      const expiringResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expiring?days=${daysFilter}`,\n        authHeaders\n      );\n      setExpiringDocuments(expiringResponse.data?.expiring_documents ?? []);\n\n      // Fetch expired documents\n      const expiredResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expired`,\n        authHeaders\n      );\n      setExpiredDocuments(expiredResponse.data?.expired_documents ?? []);\n\n      // Fetch statistics\n      const statsResponse = await axios.get(\n        `${API_URL}/api/admin/documents/expiry-statistics`,\n        authHeaders\n      );\n      setStatistics(statsResponse.data ?? null);\n\n    } catch (error) {\n      toast.error(\"Failed to fetch document expiry data\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateDocumentExpiry = async (documentId: number, expires: boolean, expiryDate?: string) => {\n    try {\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      const authHeaders = token ? { headers: { Authorization: `Bearer ${token}` } } : {};\n      await axios.patch(\n        `${API_URL}/api/admin/documents/${documentId}/expiry`,\n        {\n          expires,\n          expiry_date: expiryDate,\n        },\n        authHeaders\n      );\n      toast.success(\"Document expiry updated successfully\");\n      fetchData();\n    } catch (error) {\n      toast.error(\"Failed to update document expiry\");\n    }\n  };\n\n  const formatDocType = (docType: string) => {\n    return docType.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const getUrgencyBadge = (days: number, isExpired: boolean = false) => {\n    if (isExpired) {\n      return <Badge className=\"bg-red-100 text-red-800\">Expired</Badge>;\n    }\n    if (days <= 7) {\n      return <Badge className=\"bg-red-100 text-red-800\">Critical</Badge>;\n    }\n    if (days <= 14) {\n      return <Badge className=\"bg-orange-100 text-orange-800\">Urgent</Badge>;\n    }\n    if (days <= 30) {\n      return <Badge className=\"bg-yellow-100 text-yellow-800\">Warning</Badge>;\n    }\n    return <Badge className=\"bg-blue-100 text-blue-800\">Notice</Badge>;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Document Expiry Management</h1>\n          <p className=\"text-muted-foreground\">Monitor and manage charity document expirations</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expiring in 7 Days</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.expiring_in_7_days}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expiring in 30 Days</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{statistics.expiring_in_30_days}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Already Expired</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.expired}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Affected Charities</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-600\">{statistics.charities_with_expired_docs}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Tabs */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4 items-center\">\n            <div className=\"flex gap-2\">\n              <Button\n                variant={activeTab === \"expiring\" ? \"default\" : \"outline\"}\n                onClick={() => setActiveTab(\"expiring\")}\n              >\n                <Clock className=\"h-4 w-4 mr-2\" />\n                Expiring Documents\n              </Button>\n              <Button\n                variant={activeTab === \"expired\" ? \"default\" : \"outline\"}\n                onClick={() => setActiveTab(\"expired\")}\n              >\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                Expired Documents\n              </Button>\n            </div>\n            {activeTab === \"expiring\" && (\n              <Select value={daysFilter} onValueChange={setDaysFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Next 7 days</SelectItem>\n                  <SelectItem value=\"14\">Next 14 days</SelectItem>\n                  <SelectItem value=\"30\">Next 30 days</SelectItem>\n                  <SelectItem value=\"60\">Next 60 days</SelectItem>\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Documents List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>\n            {activeTab === \"expiring\" ? \"Expiring Documents\" : \"Expired Documents\"} \n            ({activeTab === \"expiring\" ? (expiringDocuments?.length ?? 0) : (expiredDocuments?.length ?? 0)})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {activeTab === \"expiring\" ? (\n              (expiringDocuments ?? []).map((document) => (\n                <div key={document.id} className=\"border rounded-lg p-4 space-y-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4 text-blue-500\" />\n                        <span className=\"font-medium\">{formatDocType(document.doc_type)}</span>\n                        {getUrgencyBadge(document.days_until_expiry)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Charity:</strong> {document.charity.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Contact:</strong> {document.charity.contact_email}\n                      </p>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>Expires: {new Date(document.expiry_date).toLocaleDateString()}</span>\n                        <span className=\"text-yellow-600 font-medium\">\n                          ({document.days_until_expiry} days remaining)\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/admin/charities/${document.charity.id}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Charity\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              (expiredDocuments ?? []).map((document) => (\n                <div key={document.id} className=\"border border-red-200 rounded-lg p-4 space-y-3 bg-red-50\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <FileText className=\"h-4 w-4 text-red-500\" />\n                        <span className=\"font-medium\">{formatDocType(document.doc_type)}</span>\n                        {getUrgencyBadge(0, true)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Charity:</strong> {document.charity.name}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Contact:</strong> {document.charity.contact_email}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        <strong>Status:</strong> \n                        <Badge className={document.charity.verification_status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {document.charity.verification_status}\n                        </Badge>\n                      </p>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"h-4 w-4 text-red-500\" />\n                        <span>Expired: {new Date(document.expiry_date).toLocaleDateString()}</span>\n                        <span className=\"text-red-600 font-medium\">\n                          ({document.days_overdue} days overdue)\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => window.open(`/admin/charities/${document.charity.id}`, '_blank')}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View Charity\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n            \n            {((activeTab === \"expiring\" && (expiringDocuments?.length ?? 0) === 0) || \n              (activeTab === \"expired\" && (expiredDocuments?.length ?? 0) === 0)) && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No {activeTab} documents found.</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Recommendations */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-800\">Recommended Actions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-blue-700\">\n          <ul className=\"space-y-2 text-sm\">\n            <li>• Contact charities with documents expiring in 7 days immediately</li>\n            <li>• Send renewal reminders to charities with documents expiring in 30 days</li>\n            <li>• Review verification status of charities with expired documents</li>\n            <li>• Consider suspending charities with critical expired documents</li>\n            <li>• Set up automated email reminders for document renewals</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Notifications.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchNotifications'. Either include it or remove the dependency array.","line":48,"column":6,"nodeType":"ArrayExpression","endLine":48,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchNotifications]","fix":{"range":[1600,1602],"text":"[fetchNotifications]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2 } from 'lucide-react';\n\ninterface NotificationItem {\n  id: number;\n  type: string;\n  title?: string;\n  message?: string;\n  read: boolean;\n  created_at: string;\n}\n\nexport default function AdminNotifications() {\n  const [items, setItems] = useState<NotificationItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const API_URL = import.meta.env.VITE_API_URL;\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      const res = await fetch(`${API_URL}/api/me/notifications?unread=false`, {\n        headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n      });\n      if (!res.ok) throw new Error('Failed');\n      const data = await res.json();\n      const list = Array.isArray(data?.data) ? data.data : (Array.isArray(data) ? data : []);\n      setItems(list as NotificationItem[]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAllRead = async () => {\n    const token = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n    await fetch(`${API_URL}/api/notifications/mark-all-read`, {\n      method: 'POST',\n      headers: token ? { Authorization: `Bearer ${token}` } : undefined,\n    });\n    fetchNotifications();\n  };\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const unreadCount = items.filter(i => !i.read).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Notifications</h1>\n          <p className=\"text-muted-foreground\">Review recent system updates and alerts</p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Badge variant=\"secondary\">Unread: {unreadCount}</Badge>\n          <Button variant=\"outline\" onClick={markAllRead} disabled={unreadCount === 0}>Mark all read</Button>\n          <Button variant=\"outline\" onClick={fetchNotifications}>Refresh</Button>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>All Notifications ({items.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"flex items-center justify-center py-16 text-muted-foreground\">\n              <Loader2 className=\"h-5 w-5 mr-2 animate-spin\" /> Loading...\n            </div>\n          ) : items.length === 0 ? (\n            <div className=\"text-center py-16 text-muted-foreground\">No notifications</div>\n          ) : (\n            <div className=\"space-y-3\">\n              {items.map(n => (\n                <div key={n.id} className={`border rounded-md p-4 ${n.read ? '' : 'bg-muted/40'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"font-medium\">\n                      {n.title || n.type}\n                    </div>\n                    {!n.read && <Badge className=\"bg-blue-100 text-blue-800\">New</Badge>}\n                  </div>\n                  {n.message && <div className=\"mt-1 text-sm text-muted-foreground\">{n.message}</div>}\n                  <div className=\"mt-2 text-xs text-muted-foreground\">{new Date(n.created_at).toLocaleString()}</div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Profile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[985,988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[985,988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { User, Mail, Phone, Shield, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/context/AuthContext\";\nimport { toast } from \"sonner\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    phone: user?.phone || '',\n  });\n\n  const handleSave = async () => {\n    try {\n      // TODO: Implement profile update API call\n      // await authService.updateProfile(formData);\n      toast.success(\"Profile updated successfully\");\n      setIsEditing(false);\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || \"Failed to update profile\");\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      name: user?.name || '',\n      email: user?.email || '',\n      phone: user?.phone || '',\n    });\n    setIsEditing(false);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Profile</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account information\n        </p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Profile Information Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Personal Information</CardTitle>\n            <CardDescription>\n              Update your personal details\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Full Name</Label>\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  disabled={!isEditing}\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <div className=\"flex items-center gap-2\">\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  disabled={!isEditing}\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone Number</Label>\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <Input\n                  id=\"phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  disabled={!isEditing}\n                  placeholder=\"Not set\"\n                  className={!isEditing ? \"bg-muted\" : \"\"}\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex gap-2\">\n              {!isEditing ? (\n                <Button onClick={() => setIsEditing(true)}>\n                  Edit Profile\n                </Button>\n              ) : (\n                <>\n                  <Button onClick={handleSave}>\n                    Save Changes\n                  </Button>\n                  <Button variant=\"outline\" onClick={handleCancel}>\n                    Cancel\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Account Details Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Account Details</CardTitle>\n            <CardDescription>\n              Your account information\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Role</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground capitalize\">\n                {user?.role?.replace('_', ' ')}\n              </span>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">Member Since</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {user?.created_at ? new Date(user.created_at).toLocaleDateString() : 'N/A'}\n              </span>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between py-2\">\n              <div className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                <span className=\"text-sm font-medium\">User ID</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                #{user?.id}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Card */}\n        <Card className=\"md:col-span-2\">\n          <CardHeader>\n            <CardTitle>Security</CardTitle>\n            <CardDescription>\n              Manage your password and security settings\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Password</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Last changed: Never\n                </p>\n              </div>\n              <Button variant=\"outline\">\n                Change Password\n              </Button>\n            </div>\n\n            <Separator />\n\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Two-Factor Authentication</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Add an extra layer of security to your account\n                </p>\n              </div>\n              <Button variant=\"outline\" disabled>\n                Enable 2FA\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Reports.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchReports'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [statusFilter, entityTypeFilter, reasonFilter, searchTerm, fetchReports]","fix":{"range":[2244,2302],"text":"[statusFilter, entityTypeFilter, reasonFilter, searchTerm, fetchReports]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { AlertTriangle, Eye, CheckCircle, XCircle, Clock, Search, Filter } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport axios from \"axios\";\n\ninterface Report {\n  id: number;\n  reporter: {\n    id: number;\n    name: string;\n    email: string;\n  };\n  reporter_role: string;\n  reported_entity_type: string;\n  reported_entity_id: number;\n  reason: string;\n  description: string;\n  evidence_path?: string;\n  status: string;\n  admin_notes?: string;\n  reviewed_by?: number;\n  reviewed_at?: string;\n  action_taken?: string;\n  created_at: string;\n}\n\ninterface ReportStatistics {\n  total: number;\n  pending: number;\n  under_review: number;\n  resolved: number;\n  dismissed: number;\n  by_reason: Array<{ reason: string; count: number }>;\n  recent: Report[];\n}\n\nexport default function AdminReports() {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [statistics, setStatistics] = useState<ReportStatistics | null>(null);\n  const [selectedReport, setSelectedReport] = useState<Report | null>(null);\n  const [isDetailsOpen, setIsDetailsOpen] = useState(false);\n  const [isReviewOpen, setIsReviewOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [entityTypeFilter, setEntityTypeFilter] = useState(\"all\");\n  const [reasonFilter, setReasonFilter] = useState(\"all\");\n\n  // Review form state\n  const [reviewStatus, setReviewStatus] = useState(\"\");\n  const [actionTaken, setActionTaken] = useState(\"\");\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  useEffect(() => {\n    fetchReports();\n    fetchStatistics();\n  }, [statusFilter, entityTypeFilter, reasonFilter, searchTerm]);\n\n  const fetchReports = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (statusFilter !== \"all\") params.append(\"status\", statusFilter);\n      if (entityTypeFilter !== \"all\") params.append(\"entity_type\", entityTypeFilter);\n      if (reasonFilter !== \"all\") params.append(\"reason\", reasonFilter);\n      if (searchTerm) params.append(\"search\", searchTerm);\n\n      const response = await axios.get(`/api/admin/reports?${params.toString()}`);\n      setReports(response.data.data || []);\n    } catch (error) {\n      console.error(\"Failed to fetch reports:\", error);\n      toast.error(\"Failed to fetch reports\");\n      setReports([]); // Ensure reports is always an array\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchStatistics = async () => {\n    try {\n      const response = await axios.get(\"/api/admin/reports/statistics\");\n      setStatistics(response.data);\n    } catch (error) {\n      console.error(\"Failed to fetch statistics:\", error);\n    }\n  };\n\n  const handleViewDetails = async (report: Report) => {\n    try {\n      const response = await axios.get(`/api/admin/reports/${report.id}`);\n      setSelectedReport(response.data.report);\n      setIsDetailsOpen(true);\n    } catch (error) {\n      toast.error(\"Failed to fetch report details\");\n    }\n  };\n\n  const handleReviewReport = (report: Report) => {\n    setSelectedReport(report);\n    setReviewStatus(\"\");\n    setActionTaken(\"\");\n    setAdminNotes(\"\");\n    setIsReviewOpen(true);\n  };\n\n  const submitReview = async () => {\n    if (!selectedReport || !reviewStatus) {\n      toast.error(\"Please select a status\");\n      return;\n    }\n\n    try {\n      await axios.patch(`/api/admin/reports/${selectedReport.id}/review`, {\n        status: reviewStatus,\n        action_taken: actionTaken,\n        admin_notes: adminNotes,\n      });\n\n      toast.success(\"Report reviewed successfully\");\n      setIsReviewOpen(false);\n      fetchReports();\n      fetchStatistics();\n    } catch (error) {\n      toast.error(\"Failed to review report\");\n    }\n  };\n\n  const deleteReport = async (reportId: number) => {\n    if (!confirm(\"Are you sure you want to delete this report?\")) return;\n\n    try {\n      await axios.delete(`/api/admin/reports/${reportId}`);\n      toast.success(\"Report deleted successfully\");\n      fetchReports();\n      fetchStatistics();\n    } catch (error) {\n      toast.error(\"Failed to delete report\");\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"destructive\",\n      under_review: \"default\",\n      resolved: \"default\",\n      dismissed: \"secondary\",\n    } as const;\n\n    const colors = {\n      pending: \"bg-red-100 text-red-800\",\n      under_review: \"bg-yellow-100 text-yellow-800\",\n      resolved: \"bg-green-100 text-green-800\",\n      dismissed: \"bg-gray-100 text-gray-800\",\n    };\n\n    return (\n      <Badge className={colors[status as keyof typeof colors]}>\n        {status.replace(\"_\", \" \").toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const formatReason = (reason: string) => {\n    return reason.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reports Management</h1>\n          <p className=\"text-muted-foreground\">Review and manage user reports</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{statistics.total}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{statistics.pending}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Under Review</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{statistics.under_review}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Resolved</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{statistics.resolved}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Dismissed</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-gray-600\">{statistics.dismissed}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"h-5 w-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search reports...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"under_review\">Under Review</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n                <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={entityTypeFilter} onValueChange={setEntityTypeFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by entity type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"user\">User</SelectItem>\n                <SelectItem value=\"charity\">Charity</SelectItem>\n                <SelectItem value=\"campaign\">Campaign</SelectItem>\n                <SelectItem value=\"donation\">Donation</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={reasonFilter} onValueChange={setReasonFilter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Filter by reason\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Reasons</SelectItem>\n                <SelectItem value=\"fraud\">Fraud</SelectItem>\n                <SelectItem value=\"fake_proof\">Fake Proof</SelectItem>\n                <SelectItem value=\"inappropriate_content\">Inappropriate Content</SelectItem>\n                <SelectItem value=\"scam\">Scam</SelectItem>\n                <SelectItem value=\"fake_charity\">Fake Charity</SelectItem>\n                <SelectItem value=\"misuse_of_funds\">Misuse of Funds</SelectItem>\n                <SelectItem value=\"spam\">Spam</SelectItem>\n                <SelectItem value=\"harassment\">Harassment</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reports List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Reports ({(reports || []).length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {(reports || []).map((report) => (\n              <div key={report.id} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                      <span className=\"font-medium\">Report #{report.id}</span>\n                      {getStatusBadge(report.status)}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Reported by: {report.reporter.name} ({report.reporter_role})\n                    </p>\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Reason:</span> {formatReason(report.reason)}\n                    </p>\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">Entity:</span> {report.reported_entity_type} #{report.reported_entity_id}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleViewDetails(report)}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      View\n                    </Button>\n                    {report.status === \"pending\" && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleReviewReport(report)}\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-1\" />\n                        Review\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => deleteReport(report.id)}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n                <p className=\"text-sm bg-gray-50 p-2 rounded\">\n                  {report.description}\n                </p>\n                <div className=\"text-xs text-muted-foreground\">\n                  Submitted: {new Date(report.created_at).toLocaleString()}\n                </div>\n              </div>\n            ))}\n            {(reports || []).length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No reports found matching your filters.\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Report Details Dialog */}\n      <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Report Details</DialogTitle>\n            <DialogDescription>\n              Full details of report #{selectedReport?.id}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedReport && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Reporter</label>\n                  <p className=\"text-sm\">{selectedReport.reporter.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{selectedReport.reporter.email}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Status</label>\n                  <div className=\"mt-1\">{getStatusBadge(selectedReport.status)}</div>\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Description</label>\n                <p className=\"text-sm mt-1 p-2 bg-gray-50 rounded\">{selectedReport.description}</p>\n              </div>\n              {selectedReport.evidence_path && (\n                <div>\n                  <label className=\"text-sm font-medium\">Evidence</label>\n                  <p className=\"text-sm mt-1\">\n                    <a \n                      href={`/storage/${selectedReport.evidence_path}`} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-blue-600 hover:underline\"\n                    >\n                      View Evidence File\n                    </a>\n                  </p>\n                </div>\n              )}\n              {selectedReport.admin_notes && (\n                <div>\n                  <label className=\"text-sm font-medium\">Admin Notes</label>\n                  <p className=\"text-sm mt-1 p-2 bg-blue-50 rounded\">{selectedReport.admin_notes}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Review Report Dialog */}\n      <Dialog open={isReviewOpen} onOpenChange={setIsReviewOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Review Report</DialogTitle>\n            <DialogDescription>\n              Take action on report #{selectedReport?.id}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Status</label>\n              <Select value={reviewStatus} onValueChange={setReviewStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"under_review\">Under Review</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"dismissed\">Dismissed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Action Taken</label>\n              <Select value={actionTaken} onValueChange={setActionTaken}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select action\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No Action</SelectItem>\n                  <SelectItem value=\"warned\">Warned User</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended Account</SelectItem>\n                  <SelectItem value=\"deleted\">Deleted Content</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted User</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Admin Notes</label>\n              <Textarea\n                value={adminNotes}\n                onChange={(e) => setAdminNotes(e.target.value)}\n                placeholder=\"Add notes about your review and action taken...\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"outline\" onClick={() => setIsReviewOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={submitReview}>\n                Submit Review\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\ycel_\\New_Capstone-main\\capstone_frontend\\src\\pages\\admin\\Users.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [currentPage, fetchUsers, filterRole]","fix":{"range":[1378,1403],"text":"[currentPage, fetchUsers, filterRole]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1663,1666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1663,1666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2360,2363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2360,2363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2666,2669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2666,2669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9575,9578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9575,9578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9784,9787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9784,9787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Search, UserCog, Trash2, CheckCircle, Eye } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { adminService, User } from \"@/services/admin\";\n\n\nexport default function Users() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRole, setFilterRole] = useState(\"all\");\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [viewingUser, setViewingUser] = useState<User | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [currentPage, filterRole]);\n\n  const fetchUsers = async () => {\n    setIsLoading(true);\n    try {\n      const response = await adminService.getUsers(currentPage, {\n        role: filterRole !== 'all' ? filterRole : undefined\n      });\n      setUsers(response.data);\n    } catch (error: any) {\n      console.error('Failed to fetch users:', error);\n      toast.error('Failed to load users');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleViewUser = (user: User) => {\n    setViewingUser(user);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveUser = () => {\n    toast.success(\"User updated successfully\");\n    setIsEditDialogOpen(false);\n  };\n\n  const handleSuspendUser = async (userId: number) => {\n    try {\n      await adminService.suspendUser(userId);\n      toast.success(\"User suspended\");\n      fetchUsers(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to suspend user');\n    }\n  };\n\n  const handleActivateUser = async (userId: number) => {\n    try {\n      await adminService.activateUser(userId);\n      toast.success(\"User activated\");\n      fetchUsers(); // Refresh list\n    } catch (error: any) {\n      toast.error(error.response?.data?.message || 'Failed to activate user');\n    }\n  };\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Loading users...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Users Management</h1>\n        <p className=\"text-muted-foreground\">\n          Manage user accounts and permissions\n        </p>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search users...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n        <Select value={filterRole} onValueChange={setFilterRole}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by role\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Roles</SelectItem>\n            <SelectItem value=\"admin\">Admin</SelectItem>\n            <SelectItem value=\"donor\">Donor</SelectItem>\n            <SelectItem value=\"charity_admin\">Charity Admin</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"rounded-md border bg-card\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>ID</TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Created</TableHead>\n              <TableHead className=\"text-right\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredUsers.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"text-center text-muted-foreground\">\n                  No users found\n                </TableCell>\n              </TableRow>\n            ) : filteredUsers.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell className=\"font-medium\">{user.id}</TableCell>\n                <TableCell>{user.name}</TableCell>\n                <TableCell>{user.email}</TableCell>\n                <TableCell>\n                  <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                    {user.role}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <Badge variant={user.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {user.status}\n                  </Badge>\n                </TableCell>\n                <TableCell>{new Date(user.created_at).toLocaleDateString()}</TableCell>\n                <TableCell className=\"text-right\">\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleViewUser(user)}\n                      title=\"View details\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEditUser(user)}\n                      title=\"Edit user\"\n                    >\n                      <UserCog className=\"h-4 w-4\" />\n                    </Button>\n                    {user.status === 'active' ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleSuspendUser(user.id)}\n                        title=\"Suspend user\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleActivateUser(user.id)}\n                        title=\"Activate user\"\n                      >\n                        <CheckCircle className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* View User Details Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>User Details</DialogTitle>\n            <DialogDescription>\n              Complete information about the user\n            </DialogDescription>\n          </DialogHeader>\n          {viewingUser && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Name</Label>\n                  <p>{viewingUser.name}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Email</Label>\n                  <p>{viewingUser.email}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Phone</Label>\n                  <p>{viewingUser.phone || 'Not provided'}</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Role</Label>\n                  <Badge variant={viewingUser.role === \"admin\" ? \"default\" : \"secondary\"}>\n                    {viewingUser.role}\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Status</Label>\n                  <Badge variant={viewingUser.status === \"active\" ? \"default\" : \"secondary\"}>\n                    {viewingUser.status}\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Registered</Label>\n                  <p>{new Date(viewingUser.created_at).toLocaleDateString()}</p>\n                </div>\n              </div>\n              {(viewingUser as any).address && (\n                <div className=\"space-y-2\">\n                  <Label className=\"font-semibold\">Address</Label>\n                  <p className=\"text-sm text-muted-foreground\">{(viewingUser as any).address}</p>\n                </div>\n              )}\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)}>\n              Close\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Update user information and permissions\n            </DialogDescription>\n          </DialogHeader>\n          {editingUser && (\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input id=\"name\" defaultValue={editingUser.name} />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input id=\"email\" defaultValue={editingUser.email} />\n              </div>\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"role\">Role</Label>\n                <Select defaultValue={editingUser.role.toLowerCase()}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                    <SelectItem value=\"user\">User</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          )}\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleSaveUser}>Save Changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]