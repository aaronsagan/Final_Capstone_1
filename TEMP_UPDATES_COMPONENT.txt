<?php

namespace App\Http\Controllers;

use App\Models\Update;
use App\Models\UpdateLike;
use App\Models\UpdateComment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;

class UpdateController extends Controller
{
    /**
     * Get all updates for a charity
     */
    public function index(Request $request)
    {
        try {
            $user = auth()->user();
            
            // If charity_id is provided in query, use it (for public view)
            // Otherwise, use authenticated charity's ID
            if ($request->has('charity_id')) {
                $charityId = $request->charity_id;
            } else {
                if ($user->role !== 'charity_admin' || !$user->charity) {
                    return response()->json(['error' => 'Unauthorized'], 403);
                }
                $charityId = $user->charity->id;
            }

            $updates = Update::where('charity_id', $charityId)
                ->with(['children.charity', 'charity'])
                ->rootOnly()
                ->orderBy('is_pinned', 'desc')
                ->orderBy('created_at', 'desc')
                ->get();

            // Add is_liked flag for authenticated users
            if ($user) {
                $updates->each(function ($update) use ($user) {
                    $update->is_liked = $update->isLikedBy($user->id);
                    if ($update->children) {
                        $update->children->each(function ($child) use ($user) {
                            $child->is_liked = $child->isLikedBy($user->id);
                        });
                    }
                });
            }

            return response()->json(['data' => $updates]);
        } catch (\Exception $e) {
            Log::error('Failed to fetch updates: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to fetch updates'], 500);
        }
    }

    /**
     * Create a new update
     */
    public function store(Request $request)
    {
        try {
            $user = auth()->user();
            
            if ($user->role !== 'charity_admin' || !$user->charity) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            $validated = $request->validate([
                'content' => 'required|string|max:5000',
                'parent_id' => 'nullable|exists:updates,id',
                'media' => 'nullable|array|max:4',
                'media.*' => 'image|mimes:jpeg,png,jpg,gif|max:5120', // 5MB max
            ]);

            $mediaUrls = [];

            // Handle media uploads
            if ($request->hasFile('media')) {
                foreach ($request->file('media') as $file) {
                    $path = $file->store('updates', 'public');
                    $mediaUrls[] = $path;
                }
            }

            // Verify parent_id belongs to same charity if provided
            if (isset($validated['parent_id'])) {
                $parent = Update::find($validated['parent_id']);
                if ($parent && $parent->charity_id !== $user->charity->id) {
                    return response()->json(['error' => 'Cannot thread to another charity\'s update'], 403);
                }
            }

            $update = Update::create([
                'charity_id' => $user->charity->id,
                'parent_id' => $validated['parent_id'] ?? null,
                'content' => $validated['content'],
                'media_urls' => $mediaUrls,
            ]);

            $update->load('charity');

            return response()->json($update, 201);
        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json(['error' => 'Validation failed', 'details' => $e->errors()], 422);
        } catch (\Exception $e) {
            Log::error('Failed to create update: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to create update'], 500);
        }
    }

    /**
     * Update an existing update
     */
    public function update(Request $request, $id)
    {
        try {
            $update = Update::findOrFail($id);
            $user = auth()->user();

            // Check ownership
            if ($user->role !== 'charity_admin' || !$user->charity || $update->charity_id !== $user->charity->id) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            $validated = $request->validate([
                'content' => 'required|string|max:5000',
            ]);

            $update->update(['content' => $validated['content']]);

            return response()->json($update);
        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json(['error' => 'Validation failed', 'details' => $e->errors()], 422);
        } catch (\Exception $e) {
            Log::error('Failed to update: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to update'], 500);
        }
    }

    /**
     * Delete an update
     */
    public function destroy($id)
    {
        try {
            $update = Update::findOrFail($id);
            $user = auth()->user();

            // Check ownership
            if ($user->role !== 'charity_admin' || !$user->charity || $update->charity_id !== $user->charity->id) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            // Delete associated media files
            if ($update->media_urls) {
                foreach ($update->media_urls as $mediaUrl) {
                    Storage::disk('public')->delete($mediaUrl);
                }
            }

            $update->delete();

            return response()->json(['message' => 'Update deleted successfully']);
        } catch (\Exception $e) {
            Log::error('Failed to delete update: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to delete update'], 500);
        }
    }

    /**
     * Toggle pin status
     */
    public function togglePin($id)
    {
        try {
            $update = Update::findOrFail($id);
            $user = auth()->user();

            // Check ownership
            if ($user->role !== 'charity_admin' || !$user->charity || $update->charity_id !== $user->charity->id) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            // Only allow pinning root updates (not threaded replies)
            if ($update->parent_id) {
                return response()->json(['error' => 'Cannot pin threaded updates'], 400);
            }

            $update->update(['is_pinned' => !$update->is_pinned]);

            return response()->json($update);
        } catch (\Exception $e) {
            Log::error('Failed to toggle pin: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to toggle pin'], 500);
        }
    }

    /**
     * Toggle like on an update
     */
    public function toggleLike($id)
    {
        try {
            $update = Update::findOrFail($id);
            $userId = auth()->id();

            $like = UpdateLike::where('update_id', $id)
                ->where('user_id', $userId)
                ->first();

            if ($like) {
                // Unlike
                $like->delete();
                $update->decrement('likes_count');
                $liked = false;
            } else {
                // Like
                UpdateLike::create([
                    'update_id' => $id,
                    'user_id' => $userId,
                ]);
                $update->increment('likes_count');
                $liked = true;
            }

            return response()->json([
                'liked' => $liked,
                'likes_count' => $update->fresh()->likes_count
            ]);
        } catch (\Exception $e) {
            Log::error('Failed to toggle like: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to toggle like'], 500);
        }
    }

    /**
     * Get comments for an update
     */
    public function getComments($id)
    {
        try {
            $comments = UpdateComment::where('update_id', $id)
                ->with('user:id,name,role')
                ->where('is_hidden', false)
                ->orderBy('created_at', 'asc')
                ->get();

            return response()->json(['data' => $comments]);
        } catch (\Exception $e) {
            Log::error('Failed to fetch comments: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to fetch comments'], 500);
        }
    }

    /**
     * Add a comment to an update
     */
    public function addComment(Request $request, $id)
    {
        try {
            $validated = $request->validate([
                'content' => 'required|string|max:1000',
            ]);

            $update = Update::findOrFail($id);

            $comment = UpdateComment::create([
                'update_id' => $id,
                'user_id' => auth()->id(),
                'content' => $validated['content'],
            ]);

            $update->increment('comments_count');

            $comment->load('user:id,name,role');

            return response()->json($comment, 201);
        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json(['error' => 'Validation failed', 'details' => $e->errors()], 422);
        } catch (\Exception $e) {
            Log::error('Failed to add comment: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to add comment'], 500);
        }
    }

    /**
     * Delete a comment
     */
    public function deleteComment($id)
    {
        try {
            $comment = UpdateComment::findOrFail($id);
            $user = auth()->user();

            // Allow deletion by comment owner or charity admin of the update
            $update = $comment->update;
            $isOwner = $comment->user_id === $user->id;
            $isCharityAdmin = $user->role === 'charity_admin' && 
                              $user->charity && 
                              $update->charity_id === $user->charity->id;

            if (!$isOwner && !$isCharityAdmin) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            $updateId = $comment->update_id;
            $comment->delete();

            Update::find($updateId)->decrement('comments_count');

            return response()->json(['message' => 'Comment deleted successfully']);
        } catch (\Exception $e) {
            Log::error('Failed to delete comment: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to delete comment'], 500);
        }
    }

    /**
     * Hide a comment (charity admin only)
     */
    public function hideComment($id)
    {
        try {
            $comment = UpdateComment::findOrFail($id);
            $user = auth()->user();

            // Only charity admin of the update can hide comments
            $update = $comment->update;
            if ($user->role !== 'charity_admin' || !$user->charity || $update->charity_id !== $user->charity->id) {
                return response()->json(['error' => 'Unauthorized'], 403);
            }

            $comment->update(['is_hidden' => !$comment->is_hidden]);

            return response()->json($comment);
        } catch (\Exception $e) {
            Log::error('Failed to hide comment: ' . $e->getMessage());
            return response()->json(['error' => 'Failed to hide comment'], 500);
        }
    }
}
